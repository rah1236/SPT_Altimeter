
sptAltimeterFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  0800a9b8  0800a9b8  0000b9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b0  0800b9b0  0000d080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b0  0800b9b0  0000c9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b8  0800b9b8  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b8  0800b9b8  0000c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9bc  0800b9bc  0000c9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800b9c0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000080  0800ba40  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800ba40  0000d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb5c  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054b5  00000000  00000000  0002cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  000320c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011df  00000000  00000000  00033810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f165  00000000  00000000  000349ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022530  00000000  00000000  00053b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ed2  00000000  00000000  00076084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ef56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ec  00000000  00000000  0010ef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00115788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9a0 	.word	0x0800a9a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800a9a0 	.word	0x0800a9a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <__aeabi_ldivmod>:
 8000ff4:	b97b      	cbnz	r3, 8001016 <__aeabi_ldivmod+0x22>
 8000ff6:	b972      	cbnz	r2, 8001016 <__aeabi_ldivmod+0x22>
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	bfbe      	ittt	lt
 8000ffc:	2000      	movlt	r0, #0
 8000ffe:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001002:	e006      	blt.n	8001012 <__aeabi_ldivmod+0x1e>
 8001004:	bf08      	it	eq
 8001006:	2800      	cmpeq	r0, #0
 8001008:	bf1c      	itt	ne
 800100a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800100e:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001012:	f000 b9b3 	b.w	800137c <__aeabi_idiv0>
 8001016:	f1ad 0c08 	sub.w	ip, sp, #8
 800101a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800101e:	2900      	cmp	r1, #0
 8001020:	db09      	blt.n	8001036 <__aeabi_ldivmod+0x42>
 8001022:	2b00      	cmp	r3, #0
 8001024:	db1a      	blt.n	800105c <__aeabi_ldivmod+0x68>
 8001026:	f000 f84d 	bl	80010c4 <__udivmoddi4>
 800102a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800102e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001032:	b004      	add	sp, #16
 8001034:	4770      	bx	lr
 8001036:	4240      	negs	r0, r0
 8001038:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	db1b      	blt.n	8001078 <__aeabi_ldivmod+0x84>
 8001040:	f000 f840 	bl	80010c4 <__udivmoddi4>
 8001044:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800104c:	b004      	add	sp, #16
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	4252      	negs	r2, r2
 8001056:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800105a:	4770      	bx	lr
 800105c:	4252      	negs	r2, r2
 800105e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001062:	f000 f82f 	bl	80010c4 <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4240      	negs	r0, r0
 8001072:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001076:	4770      	bx	lr
 8001078:	4252      	negs	r2, r2
 800107a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800107e:	f000 f821 	bl	80010c4 <__udivmoddi4>
 8001082:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108a:	b004      	add	sp, #16
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	4770      	bx	lr

08001094 <__aeabi_uldivmod>:
 8001094:	b953      	cbnz	r3, 80010ac <__aeabi_uldivmod+0x18>
 8001096:	b94a      	cbnz	r2, 80010ac <__aeabi_uldivmod+0x18>
 8001098:	2900      	cmp	r1, #0
 800109a:	bf08      	it	eq
 800109c:	2800      	cmpeq	r0, #0
 800109e:	bf1c      	itt	ne
 80010a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80010a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80010a8:	f000 b968 	b.w	800137c <__aeabi_idiv0>
 80010ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010b4:	f000 f806 	bl	80010c4 <__udivmoddi4>
 80010b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c0:	b004      	add	sp, #16
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9d08      	ldr	r5, [sp, #32]
 80010ca:	460c      	mov	r4, r1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d14e      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d0:	4694      	mov	ip, r2
 80010d2:	458c      	cmp	ip, r1
 80010d4:	4686      	mov	lr, r0
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	d962      	bls.n	80011a2 <__udivmoddi4+0xde>
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	4091      	lsls	r1, r2
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ec:	4319      	orrs	r1, r3
 80010ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010fa:	fb07 1114 	mls	r1, r7, r4, r1
 80010fe:	fa1f f68c 	uxth.w	r6, ip
 8001102:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb04 f106 	mul.w	r1, r4, r6
 800110e:	4299      	cmp	r1, r3
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x64>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800111a:	f080 8110 	bcs.w	800133e <__udivmoddi4+0x27a>
 800111e:	4299      	cmp	r1, r3
 8001120:	f240 810d 	bls.w	800133e <__udivmoddi4+0x27a>
 8001124:	3c02      	subs	r4, #2
 8001126:	4463      	add	r3, ip
 8001128:	1a59      	subs	r1, r3, r1
 800112a:	fbb1 f0f7 	udiv	r0, r1, r7
 800112e:	fb07 1110 	mls	r1, r7, r0, r1
 8001132:	fb00 f606 	mul.w	r6, r0, r6
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113e:	429e      	cmp	r6, r3
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0303 	adds.w	r3, ip, r3
 8001146:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800114a:	f080 80fa 	bcs.w	8001342 <__udivmoddi4+0x27e>
 800114e:	429e      	cmp	r6, r3
 8001150:	f240 80f7 	bls.w	8001342 <__udivmoddi4+0x27e>
 8001154:	4463      	add	r3, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	1b9b      	subs	r3, r3, r6
 800115c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001160:	b11d      	cbz	r5, 800116a <__udivmoddi4+0xa6>
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e9c5 3200 	strd	r3, r2, [r5]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d905      	bls.n	800117e <__udivmoddi4+0xba>
 8001172:	b10d      	cbz	r5, 8001178 <__udivmoddi4+0xb4>
 8001174:	e9c5 0100 	strd	r0, r1, [r5]
 8001178:	2100      	movs	r1, #0
 800117a:	4608      	mov	r0, r1
 800117c:	e7f5      	b.n	800116a <__udivmoddi4+0xa6>
 800117e:	fab3 f183 	clz	r1, r3
 8001182:	2900      	cmp	r1, #0
 8001184:	d146      	bne.n	8001214 <__udivmoddi4+0x150>
 8001186:	42a3      	cmp	r3, r4
 8001188:	d302      	bcc.n	8001190 <__udivmoddi4+0xcc>
 800118a:	4290      	cmp	r0, r2
 800118c:	f0c0 80ee 	bcc.w	800136c <__udivmoddi4+0x2a8>
 8001190:	1a86      	subs	r6, r0, r2
 8001192:	eb64 0303 	sbc.w	r3, r4, r3
 8001196:	2001      	movs	r0, #1
 8001198:	2d00      	cmp	r5, #0
 800119a:	d0e6      	beq.n	800116a <__udivmoddi4+0xa6>
 800119c:	e9c5 6300 	strd	r6, r3, [r5]
 80011a0:	e7e3      	b.n	800116a <__udivmoddi4+0xa6>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	f040 808f 	bne.w	80012c6 <__udivmoddi4+0x202>
 80011a8:	eba1 040c 	sub.w	r4, r1, ip
 80011ac:	2101      	movs	r1, #1
 80011ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b2:	fa1f f78c 	uxth.w	r7, ip
 80011b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ba:	fb08 4416 	mls	r4, r8, r6, r4
 80011be:	fb07 f006 	mul.w	r0, r7, r6
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x11c>
 80011ce:	eb1c 0303 	adds.w	r3, ip, r3
 80011d2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80011d6:	d202      	bcs.n	80011de <__udivmoddi4+0x11a>
 80011d8:	4298      	cmp	r0, r3
 80011da:	f200 80cb 	bhi.w	8001374 <__udivmoddi4+0x2b0>
 80011de:	4626      	mov	r6, r4
 80011e0:	1a1c      	subs	r4, r3, r0
 80011e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e6:	fb08 4410 	mls	r4, r8, r0, r4
 80011ea:	fb00 f707 	mul.w	r7, r0, r7
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x148>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x146>
 8001204:	429f      	cmp	r7, r3
 8001206:	f200 80ae 	bhi.w	8001366 <__udivmoddi4+0x2a2>
 800120a:	4620      	mov	r0, r4
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001212:	e7a5      	b.n	8001160 <__udivmoddi4+0x9c>
 8001214:	f1c1 0720 	rsb	r7, r1, #32
 8001218:	408b      	lsls	r3, r1
 800121a:	fa22 fc07 	lsr.w	ip, r2, r7
 800121e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001222:	fa24 f607 	lsr.w	r6, r4, r7
 8001226:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800122a:	fbb6 f8f9 	udiv	r8, r6, r9
 800122e:	fa1f fe8c 	uxth.w	lr, ip
 8001232:	fb09 6618 	mls	r6, r9, r8, r6
 8001236:	fa20 f307 	lsr.w	r3, r0, r7
 800123a:	408c      	lsls	r4, r1
 800123c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001240:	fb08 f00e 	mul.w	r0, r8, lr
 8001244:	431c      	orrs	r4, r3
 8001246:	0c23      	lsrs	r3, r4, #16
 8001248:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800124c:	4298      	cmp	r0, r3
 800124e:	fa02 f201 	lsl.w	r2, r2, r1
 8001252:	d90a      	bls.n	800126a <__udivmoddi4+0x1a6>
 8001254:	eb1c 0303 	adds.w	r3, ip, r3
 8001258:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 800125c:	f080 8081 	bcs.w	8001362 <__udivmoddi4+0x29e>
 8001260:	4298      	cmp	r0, r3
 8001262:	d97e      	bls.n	8001362 <__udivmoddi4+0x29e>
 8001264:	f1a8 0802 	sub.w	r8, r8, #2
 8001268:	4463      	add	r3, ip
 800126a:	1a1e      	subs	r6, r3, r0
 800126c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001270:	fb09 6613 	mls	r6, r9, r3, r6
 8001274:	fb03 fe0e 	mul.w	lr, r3, lr
 8001278:	b2a4      	uxth	r4, r4
 800127a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127e:	45a6      	cmp	lr, r4
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x1d0>
 8001282:	eb1c 0404 	adds.w	r4, ip, r4
 8001286:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800128a:	d266      	bcs.n	800135a <__udivmoddi4+0x296>
 800128c:	45a6      	cmp	lr, r4
 800128e:	d964      	bls.n	800135a <__udivmoddi4+0x296>
 8001290:	3b02      	subs	r3, #2
 8001292:	4464      	add	r4, ip
 8001294:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001298:	fba0 8302 	umull	r8, r3, r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	429c      	cmp	r4, r3
 80012a2:	46c6      	mov	lr, r8
 80012a4:	461e      	mov	r6, r3
 80012a6:	d350      	bcc.n	800134a <__udivmoddi4+0x286>
 80012a8:	d04d      	beq.n	8001346 <__udivmoddi4+0x282>
 80012aa:	b155      	cbz	r5, 80012c2 <__udivmoddi4+0x1fe>
 80012ac:	ebba 030e 	subs.w	r3, sl, lr
 80012b0:	eb64 0406 	sbc.w	r4, r4, r6
 80012b4:	fa04 f707 	lsl.w	r7, r4, r7
 80012b8:	40cb      	lsrs	r3, r1
 80012ba:	431f      	orrs	r7, r3
 80012bc:	40cc      	lsrs	r4, r1
 80012be:	e9c5 7400 	strd	r7, r4, [r5]
 80012c2:	2100      	movs	r1, #0
 80012c4:	e751      	b.n	800116a <__udivmoddi4+0xa6>
 80012c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ca:	f1c2 0320 	rsb	r3, r2, #32
 80012ce:	40d9      	lsrs	r1, r3
 80012d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d4:	fa20 f303 	lsr.w	r3, r0, r3
 80012d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1110 	mls	r1, r8, r0, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	431c      	orrs	r4, r3
 80012e8:	fa1f f78c 	uxth.w	r7, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012f2:	fb00 f107 	mul.w	r1, r0, r7
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x248>
 80012fa:	eb1c 0303 	adds.w	r3, ip, r3
 80012fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001302:	d22c      	bcs.n	800135e <__udivmoddi4+0x29a>
 8001304:	4299      	cmp	r1, r3
 8001306:	d92a      	bls.n	800135e <__udivmoddi4+0x29a>
 8001308:	3802      	subs	r0, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001312:	fb08 3311 	mls	r3, r8, r1, r3
 8001316:	b2a4      	uxth	r4, r4
 8001318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131c:	fb01 f307 	mul.w	r3, r1, r7
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <__udivmoddi4+0x272>
 8001324:	eb1c 0404 	adds.w	r4, ip, r4
 8001328:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800132c:	d213      	bcs.n	8001356 <__udivmoddi4+0x292>
 800132e:	42a3      	cmp	r3, r4
 8001330:	d911      	bls.n	8001356 <__udivmoddi4+0x292>
 8001332:	3902      	subs	r1, #2
 8001334:	4464      	add	r4, ip
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e73b      	b.n	80011b6 <__udivmoddi4+0xf2>
 800133e:	4604      	mov	r4, r0
 8001340:	e6f2      	b.n	8001128 <__udivmoddi4+0x64>
 8001342:	4608      	mov	r0, r1
 8001344:	e708      	b.n	8001158 <__udivmoddi4+0x94>
 8001346:	45c2      	cmp	sl, r8
 8001348:	d2af      	bcs.n	80012aa <__udivmoddi4+0x1e6>
 800134a:	ebb8 0e02 	subs.w	lr, r8, r2
 800134e:	eb63 060c 	sbc.w	r6, r3, ip
 8001352:	3801      	subs	r0, #1
 8001354:	e7a9      	b.n	80012aa <__udivmoddi4+0x1e6>
 8001356:	4631      	mov	r1, r6
 8001358:	e7ed      	b.n	8001336 <__udivmoddi4+0x272>
 800135a:	4603      	mov	r3, r0
 800135c:	e79a      	b.n	8001294 <__udivmoddi4+0x1d0>
 800135e:	4630      	mov	r0, r6
 8001360:	e7d4      	b.n	800130c <__udivmoddi4+0x248>
 8001362:	46b0      	mov	r8, r6
 8001364:	e781      	b.n	800126a <__udivmoddi4+0x1a6>
 8001366:	4463      	add	r3, ip
 8001368:	3802      	subs	r0, #2
 800136a:	e74f      	b.n	800120c <__udivmoddi4+0x148>
 800136c:	4606      	mov	r6, r0
 800136e:	4623      	mov	r3, r4
 8001370:	4608      	mov	r0, r1
 8001372:	e711      	b.n	8001198 <__udivmoddi4+0xd4>
 8001374:	3e02      	subs	r6, #2
 8001376:	4463      	add	r3, ip
 8001378:	e732      	b.n	80011e0 <__udivmoddi4+0x11c>
 800137a:	bf00      	nop

0800137c <__aeabi_idiv0>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <BMP280_WriteReg>:
    SPI_HandleTypeDef* hspi;
    bmp280_calib_t calib;
    int32_t t_fine;
} bmp280;

static void BMP280_WriteReg(uint8_t reg, uint8_t value) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2110      	movs	r1, #16
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <BMP280_WriteReg+0x4c>)
 8001396:	f005 fbef 	bl	8006b78 <HAL_GPIO_WritePin>
    uint8_t data[2] = {reg & ~BMP280_READ_BIT, value};
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(bmp280.hspi, data, 2, HAL_MAX_DELAY);
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <BMP280_WriteReg+0x50>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b4:	2202      	movs	r2, #2
 80013b6:	f006 f9e7 	bl	8007788 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <BMP280_WriteReg+0x4c>)
 80013c0:	f005 fbda 	bl	8006b78 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010800 	.word	0x40010800
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <BMP280_ReadReg>:

static uint8_t BMP280_ReadReg(uint8_t reg) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data[2] = {0};
 80013de:	2300      	movs	r3, #0
 80013e0:	81bb      	strh	r3, [r7, #12]
    uint8_t tx_data[2] = {reg | BMP280_READ_BIT, 0xFF};  // Use 0xFF as dummy byte to make it obvious
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	723b      	strb	r3, [r7, #8]
 80013ec:	23ff      	movs	r3, #255	@ 0xff
 80013ee:	727b      	strb	r3, [r7, #9]
    HAL_StatusTypeDef status;

    // Make sure CS starts high
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2110      	movs	r1, #16
 80013f4:	4815      	ldr	r0, [pc, #84]	@ (800144c <BMP280_ReadReg+0x78>)
 80013f6:	f005 fbbf 	bl	8006b78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f005 f906 	bl	800660c <HAL_Delay>

    // Assert CS
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2110      	movs	r1, #16
 8001404:	4811      	ldr	r0, [pc, #68]	@ (800144c <BMP280_ReadReg+0x78>)
 8001406:	f005 fbb7 	bl	8006b78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f005 f8fe 	bl	800660c <HAL_Delay>

    // Do transfer
    status = HAL_SPI_TransmitReceive(bmp280.hspi, tx_data, rx_data, 2, HAL_MAX_DELAY);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <BMP280_ReadReg+0x7c>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2302      	movs	r3, #2
 8001424:	f006 fc0d 	bl	8007c42 <HAL_SPI_TransmitReceive>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]

    // Release CS
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4806      	ldr	r0, [pc, #24]	@ (800144c <BMP280_ReadReg+0x78>)
 8001432:	f005 fba1 	bl	8006b78 <HAL_GPIO_WritePin>

    // For debugging - check what's going on
    if(status != HAL_OK) {
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <BMP280_ReadReg+0x6c>
        // Handle error or return 0
        return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <BMP280_ReadReg+0x6e>
    }

    return rx_data[1];
 8001440:	7b7b      	ldrb	r3, [r7, #13]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010800 	.word	0x40010800
 8001450:	2000009c 	.word	0x2000009c

08001454 <BMP280_ReadRegs>:

static void BMP280_ReadRegs(uint8_t reg, uint8_t *buffer, uint8_t length) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4811      	ldr	r0, [pc, #68]	@ (80014b0 <BMP280_ReadRegs+0x5c>)
 800146a:	f005 fb85 	bl	8006b78 <HAL_GPIO_WritePin>
    uint8_t tx_data = reg | BMP280_READ_BIT;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(bmp280.hspi, &tx_data, 1, HAL_MAX_DELAY);
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <BMP280_ReadRegs+0x60>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f107 010f 	add.w	r1, r7, #15
 8001480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001484:	2201      	movs	r2, #1
 8001486:	f006 f97f 	bl	8007788 <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp280.hspi, buffer, length, HAL_MAX_DELAY);
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <BMP280_ReadRegs+0x60>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	b29a      	uxth	r2, r3
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	f006 faba 	bl	8007a10 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <BMP280_ReadRegs+0x5c>)
 80014a2:	f005 fb69 	bl	8006b78 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40010800 	.word	0x40010800
 80014b4:	2000009c 	.word	0x2000009c

080014b8 <BMP280_Init>:

void BMP280_Init(SPI_HandleTypeDef* hspi) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    bmp280.hspi = hspi;
 80014c0:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <BMP280_Init+0x130>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]

    // Check chip ID
    if (BMP280_ReadReg(BMP280_REG_ID) != 0x58) {
 80014c6:	20d0      	movs	r0, #208	@ 0xd0
 80014c8:	f7ff ff84 	bl	80013d4 <BMP280_ReadReg>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b58      	cmp	r3, #88	@ 0x58
 80014d0:	d001      	beq.n	80014d6 <BMP280_Init+0x1e>
        Error_Handler();
 80014d2:	f000 fd6b 	bl	8001fac <Error_Handler>
    }

    // Reset device
    BMP280_WriteReg(BMP280_REG_RESET, 0xB6);
 80014d6:	21b6      	movs	r1, #182	@ 0xb6
 80014d8:	20e0      	movs	r0, #224	@ 0xe0
 80014da:	f7ff ff51 	bl	8001380 <BMP280_WriteReg>
    HAL_Delay(10);
 80014de:	200a      	movs	r0, #10
 80014e0:	f005 f894 	bl	800660c <HAL_Delay>

    // Read calibration data
    uint8_t calib_data[24];
    BMP280_ReadRegs(BMP280_REG_CALIB, calib_data, 24);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	2218      	movs	r2, #24
 80014ea:	4619      	mov	r1, r3
 80014ec:	2088      	movs	r0, #136	@ 0x88
 80014ee:	f7ff ffb1 	bl	8001454 <BMP280_ReadRegs>

    bmp280.calib.dig_T1 = (calib_data[1] << 8) | calib_data[0];
 80014f2:	7a7b      	ldrb	r3, [r7, #9]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <BMP280_Init+0x130>)
 8001504:	809a      	strh	r2, [r3, #4]
    bmp280.calib.dig_T2 = (calib_data[3] << 8) | calib_data[2];
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <BMP280_Init+0x130>)
 8001516:	80da      	strh	r2, [r3, #6]
    bmp280.calib.dig_T3 = (calib_data[5] << 8) | calib_data[4];
 8001518:	7b7b      	ldrb	r3, [r7, #13]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <BMP280_Init+0x130>)
 8001528:	811a      	strh	r2, [r3, #8]
    bmp280.calib.dig_P1 = (calib_data[7] << 8) | calib_data[6];
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <BMP280_Init+0x130>)
 800153c:	815a      	strh	r2, [r3, #10]
    bmp280.calib.dig_P2 = (calib_data[9] << 8) | calib_data[8];
 800153e:	7c7b      	ldrb	r3, [r7, #17]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	7c3b      	ldrb	r3, [r7, #16]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <BMP280_Init+0x130>)
 800154e:	819a      	strh	r2, [r3, #12]
    bmp280.calib.dig_P3 = (calib_data[11] << 8) | calib_data[10];
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7cbb      	ldrb	r3, [r7, #18]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <BMP280_Init+0x130>)
 8001560:	81da      	strh	r2, [r3, #14]
    bmp280.calib.dig_P4 = (calib_data[13] << 8) | calib_data[12];
 8001562:	7d7b      	ldrb	r3, [r7, #21]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7d3b      	ldrb	r3, [r7, #20]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <BMP280_Init+0x130>)
 8001572:	821a      	strh	r2, [r3, #16]
    bmp280.calib.dig_P5 = (calib_data[15] << 8) | calib_data[14];
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7dbb      	ldrb	r3, [r7, #22]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <BMP280_Init+0x130>)
 8001584:	825a      	strh	r2, [r3, #18]
    bmp280.calib.dig_P6 = (calib_data[17] << 8) | calib_data[16];
 8001586:	7e7b      	ldrb	r3, [r7, #25]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7e3b      	ldrb	r3, [r7, #24]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <BMP280_Init+0x130>)
 8001596:	829a      	strh	r2, [r3, #20]
    bmp280.calib.dig_P7 = (calib_data[19] << 8) | calib_data[18];
 8001598:	7efb      	ldrb	r3, [r7, #27]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7ebb      	ldrb	r3, [r7, #26]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <BMP280_Init+0x130>)
 80015a8:	82da      	strh	r2, [r3, #22]
    bmp280.calib.dig_P8 = (calib_data[21] << 8) | calib_data[20];
 80015aa:	7f7b      	ldrb	r3, [r7, #29]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7f3b      	ldrb	r3, [r7, #28]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <BMP280_Init+0x130>)
 80015ba:	831a      	strh	r2, [r3, #24]
    bmp280.calib.dig_P9 = (calib_data[23] << 8) | calib_data[22];
 80015bc:	7ffb      	ldrb	r3, [r7, #31]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7fbb      	ldrb	r3, [r7, #30]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <BMP280_Init+0x130>)
 80015cc:	835a      	strh	r2, [r3, #26]

    // Configure sensor
    BMP280_WriteReg(BMP280_REG_CONFIG, 0x0C);  // IIR filter coefficient 2
 80015ce:	210c      	movs	r1, #12
 80015d0:	20f5      	movs	r0, #245	@ 0xf5
 80015d2:	f7ff fed5 	bl	8001380 <BMP280_WriteReg>
    BMP280_WriteReg(BMP280_REG_CTRL_MEAS, 0x27);  // Normal mode, oversampling x1
 80015d6:	2127      	movs	r1, #39	@ 0x27
 80015d8:	20f4      	movs	r0, #244	@ 0xf4
 80015da:	f7ff fed1 	bl	8001380 <BMP280_WriteReg>
}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000009c 	.word	0x2000009c

080015ec <BMP280_ReadPressure>:
    bmp280.t_fine = var1 + var2;
    float T = (bmp280.t_fine * 5 + 128) >> 8;
    return T / 100.0f;
}

float BMP280_ReadPressure(void) {
 80015ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f0:	b0cc      	sub	sp, #304	@ 0x130
 80015f2:	af00      	add	r7, sp, #0
    uint8_t data[3];
    BMP280_ReadRegs(BMP280_REG_PRESS, data, 3);
 80015f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015f8:	2203      	movs	r2, #3
 80015fa:	4619      	mov	r1, r3
 80015fc:	20f7      	movs	r0, #247	@ 0xf7
 80015fe:	f7ff ff29 	bl	8001454 <BMP280_ReadRegs>

    int32_t adc_P = (data[0] << 16 | data[1] << 8 | data[2]) >> 4;
 8001602:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	431a      	orrs	r2, r3
 8001610:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001614:	4313      	orrs	r3, r2
 8001616:	111b      	asrs	r3, r3, #4
 8001618:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    int64_t var1 = ((int64_t)bmp280.t_fine) - 128000;
 800161c:	4bab      	ldr	r3, [pc, #684]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	469a      	mov	sl, r3
 8001624:	4693      	mov	fp, r2
 8001626:	f5ba 33fa 	subs.w	r3, sl, #128000	@ 0x1f400
 800162a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800162c:	f14b 33ff 	adc.w	r3, fp, #4294967295	@ 0xffffffff
 8001630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001636:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    int64_t var2 = var1 * var1 * (int64_t)bmp280.calib.dig_P6;
 800163a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800163e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001642:	fb03 f102 	mul.w	r1, r3, r2
 8001646:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800164a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	18ca      	adds	r2, r1, r3
 8001654:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001658:	fba3 4503 	umull	r4, r5, r3, r3
 800165c:	1953      	adds	r3, r2, r5
 800165e:	461d      	mov	r5, r3
 8001660:	4b9a      	ldr	r3, [pc, #616]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 8001662:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001666:	b21b      	sxth	r3, r3
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800166e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001672:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001676:	4603      	mov	r3, r0
 8001678:	fb03 f205 	mul.w	r2, r3, r5
 800167c:	460b      	mov	r3, r1
 800167e:	fb04 f303 	mul.w	r3, r4, r3
 8001682:	4413      	add	r3, r2
 8001684:	4602      	mov	r2, r0
 8001686:	fba4 8902 	umull	r8, r9, r4, r2
 800168a:	444b      	add	r3, r9
 800168c:	4699      	mov	r9, r3
 800168e:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001692:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)bmp280.calib.dig_P5) << 17);
 8001696:	4b8d      	ldr	r3, [pc, #564]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 8001698:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800169c:	b21b      	sxth	r3, r3
 800169e:	17da      	asrs	r2, r3, #31
 80016a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016ac:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80016b0:	462a      	mov	r2, r5
 80016b2:	fb02 f203 	mul.w	r2, r2, r3
 80016b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016ba:	4621      	mov	r1, r4
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	441a      	add	r2, r3
 80016c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016c6:	4621      	mov	r1, r4
 80016c8:	fba3 3101 	umull	r3, r1, r3, r1
 80016cc:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80016d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ea:	462b      	mov	r3, r5
 80016ec:	0459      	lsls	r1, r3, #17
 80016ee:	4622      	mov	r2, r4
 80016f0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80016f4:	4623      	mov	r3, r4
 80016f6:	0458      	lsls	r0, r3, #17
 80016f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016fc:	1814      	adds	r4, r2, r0
 80016fe:	643c      	str	r4, [r7, #64]	@ 0x40
 8001700:	414b      	adcs	r3, r1
 8001702:	647b      	str	r3, [r7, #68]	@ 0x44
 8001704:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001708:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)bmp280.calib.dig_P4) << 35);
 800170c:	4b6f      	ldr	r3, [pc, #444]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 800170e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001712:	b21b      	sxth	r3, r3
 8001714:	17da      	asrs	r2, r3, #31
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800171a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800172a:	00d9      	lsls	r1, r3, #3
 800172c:	2000      	movs	r0, #0
 800172e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001732:	1814      	adds	r4, r2, r0
 8001734:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001736:	414b      	adcs	r3, r1
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800173a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800173e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)bmp280.calib.dig_P3) >> 8) +
 8001742:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001746:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174a:	fb03 f102 	mul.w	r1, r3, r2
 800174e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001752:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	18ca      	adds	r2, r1, r3
 800175c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001760:	fba3 3103 	umull	r3, r1, r3, r3
 8001764:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800176c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001776:	4b55      	ldr	r3, [pc, #340]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 8001778:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001788:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 800178c:	4622      	mov	r2, r4
 800178e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001792:	4641      	mov	r1, r8
 8001794:	fb01 f202 	mul.w	r2, r1, r2
 8001798:	464d      	mov	r5, r9
 800179a:	4618      	mov	r0, r3
 800179c:	4621      	mov	r1, r4
 800179e:	4603      	mov	r3, r0
 80017a0:	fb03 f305 	mul.w	r3, r3, r5
 80017a4:	4413      	add	r3, r2
 80017a6:	4602      	mov	r2, r0
 80017a8:	4641      	mov	r1, r8
 80017aa:	fba2 2101 	umull	r2, r1, r2, r1
 80017ae:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80017b2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80017b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80017ba:	4413      	add	r3, r2
 80017bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80017cc:	4623      	mov	r3, r4
 80017ce:	0a18      	lsrs	r0, r3, #8
 80017d0:	462a      	mov	r2, r5
 80017d2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80017d6:	462b      	mov	r3, r5
 80017d8:	1219      	asrs	r1, r3, #8
           ((var1 * (int64_t)bmp280.calib.dig_P2) << 12);
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 80017dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	17da      	asrs	r2, r3, #31
 80017e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80017ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017f0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80017f4:	464a      	mov	r2, r9
 80017f6:	fb02 f203 	mul.w	r2, r2, r3
 80017fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017fe:	4644      	mov	r4, r8
 8001800:	fb04 f303 	mul.w	r3, r4, r3
 8001804:	441a      	add	r2, r3
 8001806:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800180a:	4644      	mov	r4, r8
 800180c:	fba3 3404 	umull	r3, r4, r3, r4
 8001810:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001814:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001818:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800182e:	464c      	mov	r4, r9
 8001830:	0323      	lsls	r3, r4, #12
 8001832:	46c4      	mov	ip, r8
 8001834:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001838:	4644      	mov	r4, r8
 800183a:	0322      	lsls	r2, r4, #12
    var1 = ((var1 * var1 * (int64_t)bmp280.calib.dig_P3) >> 8) +
 800183c:	1884      	adds	r4, r0, r2
 800183e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001840:	eb41 0303 	adc.w	r3, r1, r3
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
 8001846:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800184a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280.calib.dig_P1) >> 33;
 800184e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001852:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001856:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800185a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <BMP280_ReadPressure+0x2e0>)
 8001860:	895b      	ldrh	r3, [r3, #10]
 8001862:	b29b      	uxth	r3, r3
 8001864:	2200      	movs	r2, #0
 8001866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800186a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800186e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001872:	4622      	mov	r2, r4
 8001874:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001878:	4641      	mov	r1, r8
 800187a:	fb01 f202 	mul.w	r2, r1, r2
 800187e:	464d      	mov	r5, r9
 8001880:	4618      	mov	r0, r3
 8001882:	4621      	mov	r1, r4
 8001884:	4603      	mov	r3, r0
 8001886:	fb03 f305 	mul.w	r3, r3, r5
 800188a:	4413      	add	r3, r2
 800188c:	4602      	mov	r2, r0
 800188e:	4641      	mov	r1, r8
 8001890:	fba2 2101 	umull	r2, r1, r2, r1
 8001894:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001898:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800189c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80018a0:	4413      	add	r3, r2
 80018a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80018b2:	4629      	mov	r1, r5
 80018b4:	104a      	asrs	r2, r1, #1
 80018b6:	4629      	mov	r1, r5
 80018b8:	17cb      	asrs	r3, r1, #31
 80018ba:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0) {
 80018be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018c2:	4313      	orrs	r3, r2
 80018c4:	d104      	bne.n	80018d0 <BMP280_ReadPressure+0x2e4>
        return 0.0f;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e150      	b.n	8001b6e <BMP280_ReadPressure+0x582>
 80018cc:	2000009c 	.word	0x2000009c
    }

    int64_t p = 1048576 - adc_P;
 80018d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018d4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80018d8:	17da      	asrs	r2, r3, #31
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80018e2:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 80018e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018ea:	105b      	asrs	r3, r3, #1
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80018f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018f4:	07db      	lsls	r3, r3, #31
 80018f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001902:	4604      	mov	r4, r0
 8001904:	1aa4      	subs	r4, r4, r2
 8001906:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 800190a:	eb61 0303 	sbc.w	r3, r1, r3
 800190e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001912:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001916:	4622      	mov	r2, r4
 8001918:	462b      	mov	r3, r5
 800191a:	1891      	adds	r1, r2, r2
 800191c:	6239      	str	r1, [r7, #32]
 800191e:	415b      	adcs	r3, r3
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001926:	4621      	mov	r1, r4
 8001928:	1851      	adds	r1, r2, r1
 800192a:	61b9      	str	r1, [r7, #24]
 800192c:	4629      	mov	r1, r5
 800192e:	414b      	adcs	r3, r1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800193e:	4649      	mov	r1, r9
 8001940:	018b      	lsls	r3, r1, #6
 8001942:	4641      	mov	r1, r8
 8001944:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001948:	4641      	mov	r1, r8
 800194a:	018a      	lsls	r2, r1, #6
 800194c:	4641      	mov	r1, r8
 800194e:	1889      	adds	r1, r1, r2
 8001950:	6139      	str	r1, [r7, #16]
 8001952:	4649      	mov	r1, r9
 8001954:	eb43 0101 	adc.w	r1, r3, r1
 8001958:	6179      	str	r1, [r7, #20]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001966:	4649      	mov	r1, r9
 8001968:	008b      	lsls	r3, r1, #2
 800196a:	46c4      	mov	ip, r8
 800196c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001970:	4641      	mov	r1, r8
 8001972:	008a      	lsls	r2, r1, #2
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	4603      	mov	r3, r0
 800197a:	4622      	mov	r2, r4
 800197c:	189b      	adds	r3, r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	460b      	mov	r3, r1
 8001982:	462a      	mov	r2, r5
 8001984:	eb42 0303 	adc.w	r3, r2, r3
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001996:	4649      	mov	r1, r9
 8001998:	008b      	lsls	r3, r1, #2
 800199a:	46c4      	mov	ip, r8
 800199c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80019a0:	4641      	mov	r1, r8
 80019a2:	008a      	lsls	r2, r1, #2
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	4622      	mov	r2, r4
 80019ac:	189b      	adds	r3, r3, r2
 80019ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019b0:	462b      	mov	r3, r5
 80019b2:	460a      	mov	r2, r1
 80019b4:	eb42 0303 	adc.w	r3, r2, r3
 80019b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80019c2:	f7ff fb17 	bl	8000ff4 <__aeabi_ldivmod>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)bmp280.calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80019ce:	4b6b      	ldr	r3, [pc, #428]	@ (8001b7c <BMP280_ReadPressure+0x590>)
 80019d0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	17da      	asrs	r2, r3, #31
 80019d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80019da:	677a      	str	r2, [r7, #116]	@ 0x74
 80019dc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0b50      	lsrs	r0, r2, #13
 80019ea:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019ee:	1359      	asrs	r1, r3, #13
 80019f0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80019f4:	462b      	mov	r3, r5
 80019f6:	fb00 f203 	mul.w	r2, r0, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	fb03 f301 	mul.w	r3, r3, r1
 8001a00:	4413      	add	r3, r2
 8001a02:	4622      	mov	r2, r4
 8001a04:	fba2 2100 	umull	r2, r1, r2, r0
 8001a08:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001a0c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a14:	4413      	add	r3, r2
 8001a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a1a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	0b50      	lsrs	r0, r2, #13
 8001a28:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a2c:	1359      	asrs	r1, r3, #13
 8001a2e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a32:	462b      	mov	r3, r5
 8001a34:	fb00 f203 	mul.w	r2, r0, r3
 8001a38:	4623      	mov	r3, r4
 8001a3a:	fb03 f301 	mul.w	r3, r3, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	4622      	mov	r2, r4
 8001a42:	fba2 2100 	umull	r2, r1, r2, r0
 8001a46:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001a4a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a4e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a52:	4413      	add	r3, r2
 8001a54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a64:	4621      	mov	r1, r4
 8001a66:	0e4a      	lsrs	r2, r1, #25
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001a72:	164b      	asrs	r3, r1, #25
 8001a74:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)bmp280.calib.dig_P8) * p) >> 19;
 8001a78:	4b40      	ldr	r3, [pc, #256]	@ (8001b7c <BMP280_ReadPressure+0x590>)
 8001a7a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	17da      	asrs	r2, r3, #31
 8001a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a8a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a8e:	462a      	mov	r2, r5
 8001a90:	fb02 f203 	mul.w	r2, r2, r3
 8001a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a98:	4621      	mov	r1, r4
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fba2 2101 	umull	r2, r1, r2, r1
 8001aaa:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001aae:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001ab2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ac8:	4621      	mov	r1, r4
 8001aca:	0cca      	lsrs	r2, r1, #19
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001ad6:	14cb      	asrs	r3, r1, #19
 8001ad8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280.calib.dig_P7) << 4);
 8001adc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001ae0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ae4:	1884      	adds	r4, r0, r2
 8001ae6:	663c      	str	r4, [r7, #96]	@ 0x60
 8001ae8:	eb41 0303 	adc.w	r3, r1, r3
 8001aec:	667b      	str	r3, [r7, #100]	@ 0x64
 8001aee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001af2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001af6:	4621      	mov	r1, r4
 8001af8:	1889      	adds	r1, r1, r2
 8001afa:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb43 0101 	adc.w	r1, r3, r1
 8001b02:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b10:	4623      	mov	r3, r4
 8001b12:	0a18      	lsrs	r0, r3, #8
 8001b14:	462a      	mov	r2, r5
 8001b16:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	1219      	asrs	r1, r3, #8
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <BMP280_ReadPressure+0x590>)
 8001b20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	17da      	asrs	r2, r3, #31
 8001b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b2a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001b38:	464c      	mov	r4, r9
 8001b3a:	0123      	lsls	r3, r4, #4
 8001b3c:	46c4      	mov	ip, r8
 8001b3e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001b42:	4644      	mov	r4, r8
 8001b44:	0122      	lsls	r2, r4, #4
 8001b46:	1884      	adds	r4, r0, r2
 8001b48:	603c      	str	r4, [r7, #0]
 8001b4a:	eb41 0303 	adc.w	r3, r1, r3
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b54:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (float)p / 256.0f;
 8001b58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001b5c:	f7ff f896 	bl	8000c8c <__aeabi_l2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f982 	bl	8000e70 <__aeabi_fdiv>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000009c 	.word	0x2000009c

08001b80 <BMP280_ReadAltitude>:

float BMP280_ReadAltitude(float seaLevelPressure) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
    float pressure = BMP280_ReadPressure();
 8001b88:	f7ff fd30 	bl	80015ec <BMP280_ReadPressure>
 8001b8c:	60f8      	str	r0, [r7, #12]
    return 44330.0f * (1.0f - pow(pressure / seaLevelPressure, 0.1903f));
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff f96d 	bl	8000e70 <__aeabi_fdiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc4f 	bl	800043c <__aeabi_f2d>
 8001b9e:	a310      	add	r3, pc, #64	@ (adr r3, 8001be0 <BMP280_ReadAltitude+0x60>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f007 ffec 	bl	8009b80 <pow>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	490f      	ldr	r1, [pc, #60]	@ (8001bf0 <BMP280_ReadAltitude+0x70>)
 8001bb2:	f7fe fae3 	bl	800017c <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	a30a      	add	r3, pc, #40	@ (adr r3, 8001be8 <BMP280_ReadAltitude+0x68>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fc92 	bl	80004ec <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ff3c 	bl	8000a4c <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000
 8001be4:	3fc85bc0 	.word	0x3fc85bc0
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40e5a540 	.word	0x40e5a540
 8001bf0:	3ff00000 	.word	0x3ff00000

08001bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfa:	f004 fca5 	bl	8006548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfe:	f000 f841 	bl	8001c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c02:	f000 f93b 	bl	8001e7c <MX_GPIO_Init>
  HAL_GPIO_WritePin(BMP280_nCS_GPIO_Port, BMP280_nCS_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2110      	movs	r1, #16
 8001c0a:	4819      	ldr	r0, [pc, #100]	@ (8001c70 <main+0x7c>)
 8001c0c:	f004 ffb4 	bl	8006b78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SX1276_nCS_GPIO_Port, SX1276_nCS_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c16:	4816      	ldr	r0, [pc, #88]	@ (8001c70 <main+0x7c>)
 8001c18:	f004 ffae 	bl	8006b78 <HAL_GPIO_WritePin>

  MX_I2C1_Init();
 8001c1c:	f000 f876 	bl	8001d0c <MX_I2C1_Init>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <main+0x80>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <main+0x80>)
 8001c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <main+0x80>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
  MX_SPI1_Init();
 8001c38:	f000 f896 	bl	8001d68 <MX_SPI1_Init>

  MX_USART1_UART_Init();
 8001c3c:	f000 f8ca 	bl	8001dd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c40:	f000 f8f2 	bl	8001e28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c4a:	4809      	ldr	r0, [pc, #36]	@ (8001c70 <main+0x7c>)
 8001c4c:	f004 ff94 	bl	8006b78 <HAL_GPIO_WritePin>

  shell_init(&huart2);
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <main+0x84>)
 8001c52:	f000 fe4b 	bl	80028ec <shell_init>
  init_servo();
 8001c56:	f000 fda7 	bl	80027a8 <init_servo>
  BMP280_Init(&hspi1);
 8001c5a:	4808      	ldr	r0, [pc, #32]	@ (8001c7c <main+0x88>)
 8001c5c:	f7ff fc2c 	bl	80014b8 <BMP280_Init>
  rfm95_init(&LoRa_config, &hspi1);
 8001c60:	4906      	ldr	r1, [pc, #24]	@ (8001c7c <main+0x88>)
 8001c62:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <main+0x8c>)
 8001c64:	f000 fa50 	bl	8002108 <rfm95_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      shell_service();
 8001c68:	f000 ff5a 	bl	8002b20 <shell_service>
 8001c6c:	e7fc      	b.n	8001c68 <main+0x74>
 8001c6e:	bf00      	nop
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40021000 	.word	0x40021000
 8001c78:	200001b0 	.word	0x200001b0
 8001c7c:	20000110 	.word	0x20000110
 8001c80:	20000000 	.word	0x20000000

08001c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b090      	sub	sp, #64	@ 0x40
 8001c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0318 	add.w	r3, r7, #24
 8001c8e:	2228      	movs	r2, #40	@ 0x28
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 fadb 	bl	800924e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f005 f8c8 	bl	8006e60 <HAL_RCC_OscConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001cd6:	f000 f969 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fb36 	bl	8007364 <HAL_RCC_ClockConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001cfe:	f000 f955 	bl	8001fac <Error_Handler>
  }
}
 8001d02:	bf00      	nop
 8001d04:	3740      	adds	r7, #64	@ 0x40
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f004 ff45 	bl	8006bd8 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 f92a 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200000bc 	.word	0x200000bc
 8001d60:	40005400 	.word	0x40005400
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d6e:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <MX_SPI1_Init+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001db4:	220a      	movs	r2, #10
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <MX_SPI1_Init+0x64>)
 8001dba:	f005 fc61 	bl	8007680 <HAL_SPI_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dc4:	f000 f8f2 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000110 	.word	0x20000110
 8001dd0:	40013000 	.word	0x40013000

08001dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <MX_USART1_UART_Init+0x50>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001de0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_USART1_UART_Init+0x4c>)
 8001e0c:	f006 fdf8 	bl	8008a00 <HAL_UART_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e16:	f000 f8c9 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000168 	.word	0x20000168
 8001e24:	40013800 	.word	0x40013800

08001e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <MX_USART2_UART_Init+0x50>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_USART2_UART_Init+0x4c>)
 8001e60:	f006 fdce 	bl	8008a00 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e6a:	f000 f89f 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200001b0 	.word	0x200001b0
 8001e78:	40004400 	.word	0x40004400

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	4b42      	ldr	r3, [pc, #264]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a41      	ldr	r2, [pc, #260]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001e96:	f043 0320 	orr.w	r3, r3, #32
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a3b      	ldr	r2, [pc, #236]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b39      	ldr	r3, [pc, #228]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a35      	ldr	r2, [pc, #212]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b33      	ldr	r3, [pc, #204]	@ (8001f9c <MX_GPIO_Init+0x120>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BMP280_nCS_Pin|SX1276_nCS_Pin|LED_PIN_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f248 1110 	movw	r1, #33040	@ 0x8110
 8001ede:	4830      	ldr	r0, [pc, #192]	@ (8001fa0 <MX_GPIO_Init+0x124>)
 8001ee0:	f004 fe4a 	bl	8006b78 <HAL_GPIO_WritePin>


  /* SPI1 GPIO Configuration */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;  // SCK|MISO|MOSI
 8001ee4:	23e0      	movs	r3, #224	@ 0xe0
 8001ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate Function Push Pull
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482a      	ldr	r0, [pc, #168]	@ (8001fa0 <MX_GPIO_Init+0x124>)
 8001ef8:	f004 fcba 	bl	8006870 <HAL_GPIO_Init>

  // For MISO, we need input mode
  GPIO_InitStruct.Pin = GPIO_PIN_6;  // MISO
 8001efc:	2340      	movs	r3, #64	@ 0x40
 8001efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4824      	ldr	r0, [pc, #144]	@ (8001fa0 <MX_GPIO_Init+0x124>)
 8001f10:	f004 fcae 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP280_nCS_Pin SX1276_nCS_Pin LED_PIN_Pin */
  GPIO_InitStruct.Pin = BMP280_nCS_Pin|SX1276_nCS_Pin|LED_PIN_Pin;
 8001f14:	f248 1310 	movw	r3, #33040	@ 0x8110
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481c      	ldr	r0, [pc, #112]	@ (8001fa0 <MX_GPIO_Init+0x124>)
 8001f2e:	f004 fc9f 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1276_DIO0_Pin SX1276_DIO1_Pin */
  GPIO_InitStruct.Pin = SX1276_DIO0_Pin|SX1276_DIO1_Pin;
 8001f32:	2303      	movs	r3, #3
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <MX_GPIO_Init+0x128>)
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	4818      	ldr	r0, [pc, #96]	@ (8001fa8 <MX_GPIO_Init+0x12c>)
 8001f46:	f004 fc93 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1276_DIO2_Pin SX1276_DIO3_Pin */
  GPIO_InitStruct.Pin = SX1276_DIO2_Pin|SX1276_DIO3_Pin;
 8001f4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f50:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <MX_GPIO_Init+0x128>)
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4810      	ldr	r0, [pc, #64]	@ (8001fa0 <MX_GPIO_Init+0x124>)
 8001f60:	f004 fc86 	bl	8006870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2006      	movs	r0, #6
 8001f6a:	f004 fc4a 	bl	8006802 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f6e:	2006      	movs	r0, #6
 8001f70:	f004 fc63 	bl	800683a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2007      	movs	r0, #7
 8001f7a:	f004 fc42 	bl	8006802 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f004 fc5b 	bl	800683a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2028      	movs	r0, #40	@ 0x28
 8001f8a:	f004 fc3a 	bl	8006802 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f8e:	2028      	movs	r0, #40	@ 0x28
 8001f90:	f004 fc53 	bl	800683a <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	10110000 	.word	0x10110000
 8001fa8:	40010c00 	.word	0x40010c00

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <Error_Handler+0x8>

08001fb8 <rfm95_select>:

// Static SPI handle
static SPI_HandleTypeDef *rfm95_spi;

// Private functions
static void rfm95_select(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX1276_nCS_GPIO_Port, SX1276_nCS_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fc2:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <rfm95_select+0x14>)
 8001fc4:	f004 fdd8 	bl	8006b78 <HAL_GPIO_WritePin>
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40010800 	.word	0x40010800

08001fd0 <rfm95_unselect>:

static void rfm95_unselect(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX1276_nCS_GPIO_Port, SX1276_nCS_Pin, GPIO_PIN_SET);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fda:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <rfm95_unselect+0x14>)
 8001fdc:	f004 fdcc 	bl	8006b78 <HAL_GPIO_WritePin>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010800 	.word	0x40010800

08001fe8 <rfm95_read_reg>:

uint8_t rfm95_read_reg(uint8_t reg) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    rfm95_select();
 8001ff2:	f7ff ffe1 	bl	8001fb8 <rfm95_select>

    uint8_t addr = reg & 0x7F;  // Clear top bit to indicate read
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(rfm95_spi, &addr, 1, HAL_MAX_DELAY);
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <rfm95_read_reg+0x4c>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	f107 010e 	add.w	r1, r7, #14
 8002008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200c:	2201      	movs	r2, #1
 800200e:	f005 fbbb 	bl	8007788 <HAL_SPI_Transmit>
    HAL_SPI_Receive(rfm95_spi, &data, 1, HAL_MAX_DELAY);
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <rfm95_read_reg+0x4c>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 010f 	add.w	r1, r7, #15
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800201e:	2201      	movs	r2, #1
 8002020:	f005 fcf6 	bl	8007a10 <HAL_SPI_Receive>

    rfm95_unselect();
 8002024:	f7ff ffd4 	bl	8001fd0 <rfm95_unselect>
    return data;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200001f8 	.word	0x200001f8

08002038 <rfm95_write_reg>:

void rfm95_write_reg(uint8_t reg, uint8_t data) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]
    rfm95_select();
 8002048:	f7ff ffb6 	bl	8001fb8 <rfm95_select>

    uint8_t addr = reg | 0x80;  // Set top bit to indicate write
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002052:	b2db      	uxtb	r3, r3
 8002054:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(rfm95_spi, &addr, 1, HAL_MAX_DELAY);
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <rfm95_write_reg+0x4c>)
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	f107 010f 	add.w	r1, r7, #15
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002062:	2201      	movs	r2, #1
 8002064:	f005 fb90 	bl	8007788 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(rfm95_spi, &data, 1, HAL_MAX_DELAY);
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <rfm95_write_reg+0x4c>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	1db9      	adds	r1, r7, #6
 800206e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002072:	2201      	movs	r2, #1
 8002074:	f005 fb88 	bl	8007788 <HAL_SPI_Transmit>

    rfm95_unselect();
 8002078:	f7ff ffaa 	bl	8001fd0 <rfm95_unselect>
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200001f8 	.word	0x200001f8

08002088 <rfm95_dio0_callback>:

// DIO interrupt callbacks (to be implemented by user)
__weak void rfm95_dio0_callback(void) {}
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <rfm95_dio1_callback>:
__weak void rfm95_dio1_callback(void) {}
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <rfm95_dio2_callback>:
__weak void rfm95_dio2_callback(void) {}
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <rfm95_dio3_callback>:
__weak void rfm95_dio3_callback(void) {}
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handlers
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin) {
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c8:	d016      	beq.n	80020f8 <HAL_GPIO_EXTI_Callback+0x40>
 80020ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ce:	dc16      	bgt.n	80020fe <HAL_GPIO_EXTI_Callback+0x46>
 80020d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_EXTI_Callback+0x3a>
 80020d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020da:	dc10      	bgt.n	80020fe <HAL_GPIO_EXTI_Callback+0x46>
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d002      	beq.n	80020e6 <HAL_GPIO_EXTI_Callback+0x2e>
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_EXTI_Callback+0x34>
            break;
        case SX1276_DIO3_Pin:
            rfm95_dio3_callback();
            break;
        default:
            break;
 80020e4:	e00b      	b.n	80020fe <HAL_GPIO_EXTI_Callback+0x46>
            rfm95_dio0_callback();
 80020e6:	f7ff ffcf 	bl	8002088 <rfm95_dio0_callback>
            break;
 80020ea:	e009      	b.n	8002100 <HAL_GPIO_EXTI_Callback+0x48>
            rfm95_dio1_callback();
 80020ec:	f7ff ffd2 	bl	8002094 <rfm95_dio1_callback>
            break;
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_EXTI_Callback+0x48>
            rfm95_dio2_callback();
 80020f2:	f7ff ffd5 	bl	80020a0 <rfm95_dio2_callback>
            break;
 80020f6:	e003      	b.n	8002100 <HAL_GPIO_EXTI_Callback+0x48>
            rfm95_dio3_callback();
 80020f8:	f7ff ffd8 	bl	80020ac <rfm95_dio3_callback>
            break;
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_EXTI_Callback+0x48>
            break;
 80020fe:	bf00      	nop
    }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <rfm95_init>:

bool rfm95_init(const rfm95_config_t *config, SPI_HandleTypeDef *spi) {
 8002108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
    // Store SPI handle
    rfm95_spi = spi;
 8002114:	4a43      	ldr	r2, [pc, #268]	@ (8002224 <rfm95_init+0x11c>)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6013      	str	r3, [r2, #0]

    // Module shares reset with MCU, so it's already reset at this point
    HAL_Delay(10); // Wait for module to be ready after reset
 800211a:	200a      	movs	r0, #10
 800211c:	f004 fa76 	bl	800660c <HAL_Delay>

    // Read version register to check if module is responsive
    uint8_t version = rfm95_read_reg(RFM95_REG_VERSION);
 8002120:	2042      	movs	r0, #66	@ 0x42
 8002122:	f7ff ff61 	bl	8001fe8 <rfm95_read_reg>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
    if (version != 0x12) {
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d001      	beq.n	8002134 <rfm95_init+0x2c>
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e072      	b.n	800221a <rfm95_init+0x112>
    }

    // Set sleep mode to access LoRa registers
    rfm95_sleep();
 8002134:	f000 f966 	bl	8002404 <rfm95_sleep>

    // Set LoRa mode
    rfm95_write_reg(RFM95_REG_OP_MODE, 0x80);  // LoRa mode
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	2001      	movs	r0, #1
 800213c:	f7ff ff7c 	bl	8002038 <rfm95_write_reg>

    // Configure frequency
    uint32_t frf = ((uint64_t)config->frequency << 19) / 32000000;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	461c      	mov	r4, r3
 8002148:	4615      	mov	r5, r2
 800214a:	ea4f 3954 	mov.w	r9, r4, lsr #13
 800214e:	ea4f 48c4 	mov.w	r8, r4, lsl #19
 8002152:	4a35      	ldr	r2, [pc, #212]	@ (8002228 <rfm95_init+0x120>)
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	4640      	mov	r0, r8
 800215a:	4649      	mov	r1, r9
 800215c:	f7fe ff9a 	bl	8001094 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
    rfm95_write_reg(RFM95_REG_FR_MSB, (frf >> 16) & 0xFF);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4619      	mov	r1, r3
 8002170:	2006      	movs	r0, #6
 8002172:	f7ff ff61 	bl	8002038 <rfm95_write_reg>
    rfm95_write_reg(RFM95_REG_FR_MID, (frf >> 8) & 0xFF);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	2007      	movs	r0, #7
 8002180:	f7ff ff5a 	bl	8002038 <rfm95_write_reg>
    rfm95_write_reg(RFM95_REG_FR_LSB, frf & 0xFF);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	2008      	movs	r0, #8
 800218c:	f7ff ff54 	bl	8002038 <rfm95_write_reg>

    // Configure PA
    if (config->power > 15) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f993 3000 	ldrsb.w	r3, [r3]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	dd0f      	ble.n	80021ba <rfm95_init+0xb2>
        // Enable PA_BOOST
        rfm95_write_reg(RFM95_REG_PA_CONFIG, RFM95_PA_BOOST | (config->power - 2));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f993 3000 	ldrsb.w	r3, [r3]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b02      	subs	r3, #2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	2009      	movs	r0, #9
 80021b4:	f7ff ff40 	bl	8002038 <rfm95_write_reg>
 80021b8:	e007      	b.n	80021ca <rfm95_init+0xc2>
    } else {
        rfm95_write_reg(RFM95_REG_PA_CONFIG, config->power);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f993 3000 	ldrsb.w	r3, [r3]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	2009      	movs	r0, #9
 80021c6:	f7ff ff37 	bl	8002038 <rfm95_write_reg>
    }

    // Set LNA gain
    rfm95_write_reg(RFM95_REG_LNA, config->lna_gain);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7a1b      	ldrb	r3, [r3, #8]
 80021ce:	4619      	mov	r1, r3
 80021d0:	200c      	movs	r0, #12
 80021d2:	f7ff ff31 	bl	8002038 <rfm95_write_reg>

    // Configure modem - spreading factor, bandwidth, coding rate
    rfm95_write_reg(RFM95_REG_MODEM_CONFIG_1,
                    (config->bandwidth << 4) | (config->coding_rate << 1));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7a5b      	ldrb	r3, [r3, #9]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	b25a      	sxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7a9b      	ldrb	r3, [r3, #10]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b25b      	sxtb	r3, r3
    rfm95_write_reg(RFM95_REG_MODEM_CONFIG_1,
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	201d      	movs	r0, #29
 80021f0:	f7ff ff22 	bl	8002038 <rfm95_write_reg>
    rfm95_write_reg(RFM95_REG_MODEM_CONFIG_2,
                    (config->spreading_factor << 4));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7adb      	ldrb	r3, [r3, #11]
    rfm95_write_reg(RFM95_REG_MODEM_CONFIG_2,
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	201e      	movs	r0, #30
 8002200:	f7ff ff1a 	bl	8002038 <rfm95_write_reg>

    // Enable LNA boost
    rfm95_write_reg(RFM95_REG_MODEM_CONFIG_3, 0x04);
 8002204:	2104      	movs	r1, #4
 8002206:	2026      	movs	r0, #38	@ 0x26
 8002208:	f7ff ff16 	bl	8002038 <rfm95_write_reg>
    // Configure DIO mapping for common usage
    // DIO0 = RxDone/TxDone
    // DIO1 = RxTimeout
    // DIO2 = FhssChangeChannel
    // DIO3 = ValidHeader
    rfm95_write_reg(RFM95_REG_DIO_MAPPING_1, 0x00);
 800220c:	2100      	movs	r1, #0
 800220e:	2040      	movs	r0, #64	@ 0x40
 8002210:	f7ff ff12 	bl	8002038 <rfm95_write_reg>

    // Set to standby mode
    rfm95_standby();
 8002214:	f000 f8fe 	bl	8002414 <rfm95_standby>

    return true;
 8002218:	2301      	movs	r3, #1
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002224:	200001f8 	.word	0x200001f8
 8002228:	01e84800 	.word	0x01e84800

0800222c <rfm95_send>:


bool rfm95_send(const uint8_t *data, uint8_t len) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
    uint8_t packet[FIXED_PACKET_LENGTH] = {0}; // Initialize with zeros for padding
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	615a      	str	r2, [r3, #20]
 800224e:	619a      	str	r2, [r3, #24]

    // Copy data, truncating if too long or padding with zeros if too short
    uint8_t copy_len = (len > FIXED_PACKET_LENGTH) ? FIXED_PACKET_LENGTH : len;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b20      	cmp	r3, #32
 8002254:	bf28      	it	cs
 8002256:	2320      	movcs	r3, #32
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    memcpy(packet, data, copy_len);
 800225c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f007 f826 	bl	80092b8 <memcpy>

    rfm95_write_reg(RFM95_REG_FIFO_TX_BASE, 0);
 800226c:	2100      	movs	r1, #0
 800226e:	200e      	movs	r0, #14
 8002270:	f7ff fee2 	bl	8002038 <rfm95_write_reg>
    rfm95_write_reg(RFM95_REG_FIFO_ADDR_PTR, 0);
 8002274:	2100      	movs	r1, #0
 8002276:	200d      	movs	r0, #13
 8002278:	f7ff fede 	bl	8002038 <rfm95_write_reg>

    rfm95_select();
 800227c:	f7ff fe9c 	bl	8001fb8 <rfm95_select>
    uint8_t addr = RFM95_REG_FIFO | 0x80;
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(rfm95_spi, &addr, 1, HAL_MAX_DELAY);
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <rfm95_send+0xc4>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	f107 010b 	add.w	r1, r7, #11
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002290:	2201      	movs	r2, #1
 8002292:	f005 fa79 	bl	8007788 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(rfm95_spi, packet, FIXED_PACKET_LENGTH, HAL_MAX_DELAY);
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <rfm95_send+0xc4>)
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f107 010c 	add.w	r1, r7, #12
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022a2:	2220      	movs	r2, #32
 80022a4:	f005 fa70 	bl	8007788 <HAL_SPI_Transmit>
    rfm95_unselect();
 80022a8:	f7ff fe92 	bl	8001fd0 <rfm95_unselect>

    // Always use fixed length
    rfm95_write_reg(RFM95_REG_PAYLOAD_LENGTH, FIXED_PACKET_LENGTH);
 80022ac:	2120      	movs	r1, #32
 80022ae:	2022      	movs	r0, #34	@ 0x22
 80022b0:	f7ff fec2 	bl	8002038 <rfm95_write_reg>
    rfm95_write_reg(RFM95_REG_DIO_MAPPING_1, 0x40);
 80022b4:	2140      	movs	r1, #64	@ 0x40
 80022b6:	2040      	movs	r0, #64	@ 0x40
 80022b8:	f7ff febe 	bl	8002038 <rfm95_write_reg>

    rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_TX);
 80022bc:	2103      	movs	r1, #3
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff feba 	bl	8002038 <rfm95_write_reg>

    while ((rfm95_read_reg(RFM95_REG_IRQ_FLAGS) & RFM95_IRQ_TX_DONE_MASK) == 0) {
 80022c4:	e002      	b.n	80022cc <rfm95_send+0xa0>
        HAL_Delay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f004 f9a0 	bl	800660c <HAL_Delay>
    while ((rfm95_read_reg(RFM95_REG_IRQ_FLAGS) & RFM95_IRQ_TX_DONE_MASK) == 0) {
 80022cc:	2012      	movs	r0, #18
 80022ce:	f7ff fe8b 	bl	8001fe8 <rfm95_read_reg>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f4      	beq.n	80022c6 <rfm95_send+0x9a>
    }

    rfm95_write_reg(RFM95_REG_IRQ_FLAGS, 0xFF);
 80022dc:	21ff      	movs	r1, #255	@ 0xff
 80022de:	2012      	movs	r0, #18
 80022e0:	f7ff feaa 	bl	8002038 <rfm95_write_reg>
    return true;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3730      	adds	r7, #48	@ 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200001f8 	.word	0x200001f8

080022f4 <rfm95_receive>:

bool rfm95_receive(uint8_t *data, uint8_t *len, uint32_t timeout_ms) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
    // Check if we need to start receiving
    uint8_t op_mode = rfm95_read_reg(RFM95_REG_OP_MODE);
 8002300:	2001      	movs	r0, #1
 8002302:	f7ff fe71 	bl	8001fe8 <rfm95_read_reg>
 8002306:	4603      	mov	r3, r0
 8002308:	76fb      	strb	r3, [r7, #27]
    if ((op_mode & 0x07) != RFM95_MODE_RX_SINGLE) {
 800230a:	7efb      	ldrb	r3, [r7, #27]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	2b06      	cmp	r3, #6
 8002312:	d00f      	beq.n	8002334 <rfm95_receive+0x40>
        rfm95_write_reg(RFM95_REG_DIO_MAPPING_1, 0x00);
 8002314:	2100      	movs	r1, #0
 8002316:	2040      	movs	r0, #64	@ 0x40
 8002318:	f7ff fe8e 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_FIFO_RX_BASE, 0);
 800231c:	2100      	movs	r1, #0
 800231e:	200f      	movs	r0, #15
 8002320:	f7ff fe8a 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_FIFO_ADDR_PTR, 0);
 8002324:	2100      	movs	r1, #0
 8002326:	200d      	movs	r0, #13
 8002328:	f7ff fe86 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_RX_SINGLE);
 800232c:	2106      	movs	r1, #6
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff fe82 	bl	8002038 <rfm95_write_reg>
    }

    uint32_t start = HAL_GetTick();
 8002334:	f004 f960 	bl	80065f8 <HAL_GetTick>
 8002338:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - start) < timeout_ms) {
 800233a:	e054      	b.n	80023e6 <rfm95_receive+0xf2>
        if (rfm95_read_reg(RFM95_REG_IRQ_FLAGS) & RFM95_IRQ_RX_DONE_MASK) {
 800233c:	2012      	movs	r0, #18
 800233e:	f7ff fe53 	bl	8001fe8 <rfm95_read_reg>
 8002342:	4603      	mov	r3, r0
 8002344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d049      	beq.n	80023e0 <rfm95_receive+0xec>
            uint8_t current_addr = rfm95_read_reg(RFM95_REG_FIFO_RX_BASE);
 800234c:	200f      	movs	r0, #15
 800234e:	f7ff fe4b 	bl	8001fe8 <rfm95_read_reg>
 8002352:	4603      	mov	r3, r0
 8002354:	74fb      	strb	r3, [r7, #19]
            rfm95_write_reg(RFM95_REG_FIFO_ADDR_PTR, current_addr);
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	4619      	mov	r1, r3
 800235a:	200d      	movs	r0, #13
 800235c:	f7ff fe6c 	bl	8002038 <rfm95_write_reg>

            rfm95_select();
 8002360:	f7ff fe2a 	bl	8001fb8 <rfm95_select>
            uint8_t addr = RFM95_REG_FIFO;
 8002364:	2300      	movs	r3, #0
 8002366:	74bb      	strb	r3, [r7, #18]
            HAL_SPI_Transmit(rfm95_spi, &addr, 1, HAL_MAX_DELAY);
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <rfm95_receive+0x10c>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f107 0112 	add.w	r1, r7, #18
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002374:	2201      	movs	r2, #1
 8002376:	f005 fa07 	bl	8007788 <HAL_SPI_Transmit>
            HAL_SPI_Receive(rfm95_spi, data, FIXED_PACKET_LENGTH, HAL_MAX_DELAY);
 800237a:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <rfm95_receive+0x10c>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002382:	2220      	movs	r2, #32
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	f005 fb43 	bl	8007a10 <HAL_SPI_Receive>
            rfm95_unselect();
 800238a:	f7ff fe21 	bl	8001fd0 <rfm95_unselect>

            // Find actual message length by looking for zero padding
            *len = FIXED_PACKET_LENGTH;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2220      	movs	r2, #32
 8002392:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < FIXED_PACKET_LENGTH; i++) {
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	e00d      	b.n	80023b6 <rfm95_receive+0xc2>
                if (data[i] == 0) {
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <rfm95_receive+0xbc>
                    *len = i;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	701a      	strb	r2, [r3, #0]
                    break;
 80023ae:	e005      	b.n	80023bc <rfm95_receive+0xc8>
            for (int i = 0; i < FIXED_PACKET_LENGTH; i++) {
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b1f      	cmp	r3, #31
 80023ba:	ddee      	ble.n	800239a <rfm95_receive+0xa6>
                }
            }

            rfm95_write_reg(RFM95_REG_IRQ_FLAGS, 0xFF);  // Clear all flags
 80023bc:	21ff      	movs	r1, #255	@ 0xff
 80023be:	2012      	movs	r0, #18
 80023c0:	f7ff fe3a 	bl	8002038 <rfm95_write_reg>

            // Restart RX mode
            rfm95_write_reg(RFM95_REG_FIFO_RX_BASE, 0);
 80023c4:	2100      	movs	r1, #0
 80023c6:	200f      	movs	r0, #15
 80023c8:	f7ff fe36 	bl	8002038 <rfm95_write_reg>
            rfm95_write_reg(RFM95_REG_FIFO_ADDR_PTR, 0);
 80023cc:	2100      	movs	r1, #0
 80023ce:	200d      	movs	r0, #13
 80023d0:	f7ff fe32 	bl	8002038 <rfm95_write_reg>
            rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_RX_SINGLE);
 80023d4:	2106      	movs	r1, #6
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff fe2e 	bl	8002038 <rfm95_write_reg>

            return true;
 80023dc:	2301      	movs	r3, #1
 80023de:	e00b      	b.n	80023f8 <rfm95_receive+0x104>
        }
        HAL_Delay(1);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f004 f913 	bl	800660c <HAL_Delay>
    while ((HAL_GetTick() - start) < timeout_ms) {
 80023e6:	f004 f907 	bl	80065f8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d8a2      	bhi.n	800233c <rfm95_receive+0x48>
    }
    return false;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200001f8 	.word	0x200001f8

08002404 <rfm95_sleep>:

void rfm95_sleep(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
    rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_SLEEP);
 8002408:	2100      	movs	r1, #0
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff fe14 	bl	8002038 <rfm95_write_reg>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <rfm95_standby>:

void rfm95_standby(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_STDBY);
 8002418:	2101      	movs	r1, #1
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fe0c 	bl	8002038 <rfm95_write_reg>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <rfm95_get_rssi>:

int16_t rfm95_get_rssi(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    return -137 + rfm95_read_reg(RFM95_REG_RSSI_VALUE);
 8002428:	2022      	movs	r0, #34	@ 0x22
 800242a:	f7ff fddd 	bl	8001fe8 <rfm95_read_reg>
 800242e:	4603      	mov	r3, r0
 8002430:	3b89      	subs	r3, #137	@ 0x89
 8002432:	b29b      	uxth	r3, r3
 8002434:	b21b      	sxth	r3, r3
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <rfm95_get_snr>:

float rfm95_get_snr(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
    return ((int8_t)rfm95_read_reg(RFM95_REG_PKT_SNR_VALUE)) * 0.25;
 8002440:	2023      	movs	r0, #35	@ 0x23
 8002442:	f7ff fdd1 	bl	8001fe8 <rfm95_read_reg>
 8002446:	4603      	mov	r3, r0
 8002448:	b25b      	sxtb	r3, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd ffe4 	bl	8000418 <__aeabi_i2d>
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <rfm95_get_snr+0x30>)
 8002456:	f7fe f849 	bl	80004ec <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe faf3 	bl	8000a4c <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	3fd00000 	.word	0x3fd00000

08002470 <rfm95_clear_flags>:

void rfm95_clear_flags(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	   rfm95_write_reg(RFM95_REG_IRQ_FLAGS, 0xFF);
 8002474:	21ff      	movs	r1, #255	@ 0xff
 8002476:	2012      	movs	r0, #18
 8002478:	f7ff fdde 	bl	8002038 <rfm95_write_reg>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <sam_m8q_set_debug>:
static bool parse_nmea_sentence(const char *sentence);
static float parse_coordinate(const char *coord_str);
static uint8_t nmea_checksum(const char *sentence);

static bool debug_enabled = false;
void sam_m8q_set_debug(bool enable) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
    debug_enabled = enable;
 800248a:	4a04      	ldr	r2, [pc, #16]	@ (800249c <sam_m8q_set_debug+0x1c>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	7013      	strb	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200002b5 	.word	0x200002b5

080024a0 <sam_m8q_init_uart>:

bool sam_m8q_init_uart(UART_HandleTypeDef *huart) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    gps_uart = huart;
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <sam_m8q_init_uart+0x34>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
    using_uart = true;
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <sam_m8q_init_uart+0x38>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]

    // Enable UART receive interrupt
    HAL_UART_Receive_IT(gps_uart, (uint8_t*)&nmea_buffer[nmea_index], 1);
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <sam_m8q_init_uart+0x34>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <sam_m8q_init_uart+0x3c>)
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	4611      	mov	r1, r2
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <sam_m8q_init_uart+0x40>)
 80024c0:	4411      	add	r1, r2
 80024c2:	2201      	movs	r2, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f006 fc0d 	bl	8008ce4 <HAL_UART_Receive_IT>

    return true;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200001fc 	.word	0x200001fc
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	20000284 	.word	0x20000284
 80024e0:	20000204 	.word	0x20000204

080024e4 <sam_m8q_init_i2c>:

bool sam_m8q_init_i2c(I2C_HandleTypeDef *hi2c) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    gps_i2c = hi2c;
 80024ec:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <sam_m8q_init_i2c+0x20>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
    using_uart = false;
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <sam_m8q_init_i2c+0x24>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

    // TODO: Add I2C initialization if needed

    return true;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000200 	.word	0x20000200
 8002508:	2000000c 	.word	0x2000000c

0800250c <sam_m8q_get_data>:

    // Re-enable UART receive interrupt
    HAL_UART_Receive_IT(gps_uart, (uint8_t*)&nmea_buffer[nmea_index], 1);
}

bool sam_m8q_get_data(sam_m8q_data_t *data, bool force_copy) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
    if (!new_data_available && !force_copy) {
 8002518:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <sam_m8q_get_data+0x44>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f083 0301 	eor.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <sam_m8q_get_data+0x2a>
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <sam_m8q_get_data+0x2a>
        return false;
 8002532:	2300      	movs	r3, #0
 8002534:	e008      	b.n	8002548 <sam_m8q_get_data+0x3c>
    }

    memcpy(data, &current_data, sizeof(sam_m8q_data_t));
 8002536:	222c      	movs	r2, #44	@ 0x2c
 8002538:	4906      	ldr	r1, [pc, #24]	@ (8002554 <sam_m8q_get_data+0x48>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f006 febc 	bl	80092b8 <memcpy>
    new_data_available = false;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <sam_m8q_get_data+0x44>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
    return true;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200002b4 	.word	0x200002b4
 8002554:	20000288 	.word	0x20000288

08002558 <sam_m8q_sleep>:

bool sam_m8q_sleep(void) {
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
    const char *sleep_cmd = "$PMTK161,0*28\r\n";
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <sam_m8q_sleep+0x44>)
 8002560:	607b      	str	r3, [r7, #4]

    if (using_uart) {
 8002562:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <sam_m8q_sleep+0x48>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <sam_m8q_sleep+0x38>
        return (HAL_UART_Transmit(gps_uart, (uint8_t*)sleep_cmd, strlen(sleep_cmd), 100) == HAL_OK);
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <sam_m8q_sleep+0x4c>)
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fd fdee 	bl	8000150 <strlen>
 8002574:	4603      	mov	r3, r0
 8002576:	b29a      	uxth	r2, r3
 8002578:	2364      	movs	r3, #100	@ 0x64
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4620      	mov	r0, r4
 800257e:	f006 fa8f 	bl	8008aa0 <HAL_UART_Transmit>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e000      	b.n	8002592 <sam_m8q_sleep+0x3a>
    } else {
        // TODO: Implement I2C sleep command
        return false;
 8002590:	2300      	movs	r3, #0
    }
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	0800a9e0 	.word	0x0800a9e0
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	200001fc 	.word	0x200001fc

080025a8 <sam_m8q_wake>:

bool sam_m8q_wake(void) {
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
    const char *wake_cmd = "$PMTK167*00\r\n";
 80025ae:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <sam_m8q_wake+0x44>)
 80025b0:	607b      	str	r3, [r7, #4]

    if (using_uart) {
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <sam_m8q_wake+0x48>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <sam_m8q_wake+0x38>
        return (HAL_UART_Transmit(gps_uart, (uint8_t*)wake_cmd, strlen(wake_cmd), 100) == HAL_OK);
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <sam_m8q_wake+0x4c>)
 80025bc:	681c      	ldr	r4, [r3, #0]
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fd fdc6 	bl	8000150 <strlen>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	2364      	movs	r3, #100	@ 0x64
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4620      	mov	r0, r4
 80025ce:	f006 fa67 	bl	8008aa0 <HAL_UART_Transmit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e000      	b.n	80025e2 <sam_m8q_wake+0x3a>
    } else {
        // TODO: Implement I2C wake command
        return false;
 80025e0:	2300      	movs	r3, #0
    }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0800a9f0 	.word	0x0800a9f0
 80025f0:	2000000c 	.word	0x2000000c
 80025f4:	200001fc 	.word	0x200001fc

080025f8 <sam_m8q_data_ready>:

bool sam_m8q_data_ready(void) {
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
    return new_data_available;
 80025fc:	4b02      	ldr	r3, [pc, #8]	@ (8002608 <sam_m8q_data_ready+0x10>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	200002b4 	.word	0x200002b4

0800260c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

void MX_TIM2_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002612:	f107 0320 	add.w	r3, r7, #32
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800262e:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <MX_TIM2_Init+0xc4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a27      	ldr	r2, [pc, #156]	@ (80026d0 <MX_TIM2_Init+0xc4>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <MX_TIM2_Init+0xc4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 8002648:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800264c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PRESCALER;
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 8002650:	229f      	movs	r2, #159	@ 0x9f
 8002652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PERIOD;
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 800265c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800266e:	4819      	ldr	r0, [pc, #100]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 8002670:	f005 fd9b 	bl	80081aa <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800267a:	f7ff fc97 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	4811      	ldr	r0, [pc, #68]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 800268e:	f006 f959 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002698:	f7ff fc88 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2360      	movs	r3, #96	@ 0x60
 800269e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 80026a0:	2396      	movs	r3, #150	@ 0x96
 80026a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2204      	movs	r2, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 80026b4:	f005 fe6a 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM2_Init+0xb6>
  {
	Error_Handler();
 80026be:	f7ff fc75 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026c2:	4804      	ldr	r0, [pc, #16]	@ (80026d4 <MX_TIM2_Init+0xc8>)
 80026c4:	f000 fb24 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 80026c8:	bf00      	nop
 80026ca:	3728      	adds	r7, #40	@ 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	200002b8 	.word	0x200002b8

080026d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	615a      	str	r2, [r3, #20]
 80026f8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_TIM3_CLK_ENABLE();
 80026fa:	4b28      	ldr	r3, [pc, #160]	@ (800279c <MX_TIM3_Init+0xc4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a27      	ldr	r2, [pc, #156]	@ (800279c <MX_TIM3_Init+0xc4>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b25      	ldr	r3, [pc, #148]	@ (800279c <MX_TIM3_Init+0xc4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <MX_TIM3_Init+0xcc>)
 8002716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PRESCALER;
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 800271a:	229f      	movs	r2, #159	@ 0x9f
 800271c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PERIOD;
 8002724:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 8002726:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800272a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272c:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002732:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002738:	4819      	ldr	r0, [pc, #100]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 800273a:	f005 fd36 	bl	80081aa <HAL_TIM_PWM_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002744:	f7ff fc32 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4619      	mov	r1, r3
 8002756:	4812      	ldr	r0, [pc, #72]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 8002758:	f006 f8f4 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002762:	f7ff fc23 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	@ 0x60
 8002768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 800276a:	2396      	movs	r3, #150	@ 0x96
 800276c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2204      	movs	r2, #4
 800277a:	4619      	mov	r1, r3
 800277c:	4808      	ldr	r0, [pc, #32]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 800277e:	f005 fe05 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0xb4>
  {
	Error_Handler();
 8002788:	f7ff fc10 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <MX_TIM3_Init+0xc8>)
 800278e:	f000 fabf 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 8002792:	bf00      	nop
 8002794:	3728      	adds	r7, #40	@ 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	20000300 	.word	0x20000300
 80027a4:	40000400 	.word	0x40000400

080027a8 <init_servo>:

void init_servo(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
      MX_TIM2_Init();
 80027ac:	f7ff ff2e 	bl	800260c <MX_TIM2_Init>
      MX_TIM3_Init();
 80027b0:	f7ff ff92 	bl	80026d8 <MX_TIM3_Init>
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80027b4:	2104      	movs	r1, #4
 80027b6:	4804      	ldr	r0, [pc, #16]	@ (80027c8 <init_servo+0x20>)
 80027b8:	f005 fd46 	bl	8008248 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80027bc:	2104      	movs	r1, #4
 80027be:	4803      	ldr	r0, [pc, #12]	@ (80027cc <init_servo+0x24>)
 80027c0:	f005 fd42 	bl	8008248 <HAL_TIM_PWM_Start>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200002b8 	.word	0x200002b8
 80027cc:	20000300 	.word	0x20000300

080027d0 <servo_set_angle>:

void servo_set_angle(TIM_HandleTypeDef *htim, uint8_t angle)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
   // Convert angle 0-180° to pulse width 100-200
   uint32_t pulse = 100 + (angle * 100 / 180);
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	2264      	movs	r2, #100	@ 0x64
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	4a08      	ldr	r2, [pc, #32]	@ (8002808 <servo_set_angle+0x38>)
 80027e6:	fb82 1203 	smull	r1, r2, r2, r3
 80027ea:	441a      	add	r2, r3
 80027ec:	11d2      	asrs	r2, r2, #7
 80027ee:	17db      	asrs	r3, r3, #31
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	3364      	adds	r3, #100	@ 0x64
 80027f4:	60fb      	str	r3, [r7, #12]
   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, pulse);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	b60b60b7 	.word	0xb60b60b7

0800280c <ush_read>:

extern bool lora_rx_mode;

// Non-blocking read interface
static int ush_read(struct ush_object *self, char *ch)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
    if(HAL_UART_Receive(uart_handle, (uint8_t*)ch, 1, 0) == HAL_OK) {
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <ush_read+0x2c>)
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	2300      	movs	r3, #0
 800281c:	2201      	movs	r2, #1
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	f006 f9c9 	bl	8008bb6 <HAL_UART_Receive>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <ush_read+0x22>
        return 1;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <ush_read+0x24>
    }
    return 0;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200004d4 	.word	0x200004d4

0800283c <ush_write>:

// Non-blocking write interface
static int ush_write(struct ush_object *self, char ch)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
    if(HAL_UART_Transmit(uart_handle, (uint8_t*)&ch, 1, 10) == HAL_OK) {
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <ush_write+0x30>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	1cf9      	adds	r1, r7, #3
 800284e:	230a      	movs	r3, #10
 8002850:	2201      	movs	r2, #1
 8002852:	f006 f925 	bl	8008aa0 <HAL_UART_Transmit>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <ush_write+0x24>
        return 1;
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <ush_write+0x26>
    }
    return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200004d4 	.word	0x200004d4

08002870 <cmd_led_callback>:
    .write = ush_write,
};

// LED command callbacks
static void cmd_led_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
    if (argc != 2) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d004      	beq.n	800288e <cmd_led_callback+0x1e>
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8002884:	2106      	movs	r1, #6
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fc16 	bl	80030b8 <ush_print_status>
        return;
 800288c:	e025      	b.n	80028da <cmd_led_callback+0x6a>
    }

    if (strcmp(argv[1], "on") == 0) {
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4912      	ldr	r1, [pc, #72]	@ (80028e0 <cmd_led_callback+0x70>)
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fc62 	bl	8000160 <strcmp>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <cmd_led_callback+0x40>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028a8:	480e      	ldr	r0, [pc, #56]	@ (80028e4 <cmd_led_callback+0x74>)
 80028aa:	f004 f965 	bl	8006b78 <HAL_GPIO_WritePin>
 80028ae:	e014      	b.n	80028da <cmd_led_callback+0x6a>
    } else if (strcmp(argv[1], "off") == 0) {
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3304      	adds	r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <cmd_led_callback+0x78>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fc51 	bl	8000160 <strcmp>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <cmd_led_callback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ca:	4806      	ldr	r0, [pc, #24]	@ (80028e4 <cmd_led_callback+0x74>)
 80028cc:	f004 f954 	bl	8006b78 <HAL_GPIO_WritePin>
 80028d0:	e003      	b.n	80028da <cmd_led_callback+0x6a>
    } else {
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 80028d2:	2106      	movs	r1, #6
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fbef 	bl	80030b8 <ush_print_status>
    }
}
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	0800aa04 	.word	0x0800aa04
 80028e4:	40010800 	.word	0x40010800
 80028e8:	0800aa08 	.word	0x0800aa08

080028ec <shell_init>:
    .path_max_length = PATH_MAX_SIZE,
    .hostname = SHELL_PROMPT,
};

void shell_init(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    uart_handle = huart;
 80028f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002934 <shell_init+0x48>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]

    // Initialize shell instance
    ush_init(&ush, &ush_desc);
 80028fa:	490f      	ldr	r1, [pc, #60]	@ (8002938 <shell_init+0x4c>)
 80028fc:	480f      	ldr	r0, [pc, #60]	@ (800293c <shell_init+0x50>)
 80028fe:	f000 fb73 	bl	8002fe8 <ush_init>

    //store handle for global access
    shell_handle = &ush;
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <shell_init+0x54>)
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <shell_init+0x50>)
 8002906:	601a      	str	r2, [r3, #0]
    // Add custom commands
    ush_commands_add(&ush, &cmd, cmd_files, sizeof(cmd_files) / sizeof(cmd_files[0]));
 8002908:	2301      	movs	r3, #1
 800290a:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <shell_init+0x58>)
 800290c:	490e      	ldr	r1, [pc, #56]	@ (8002948 <shell_init+0x5c>)
 800290e:	480b      	ldr	r0, [pc, #44]	@ (800293c <shell_init+0x50>)
 8002910:	f000 ff61 	bl	80037d6 <ush_commands_add>

    //Custom command inits
    cmd_servo_init(&ush);
 8002914:	4809      	ldr	r0, [pc, #36]	@ (800293c <shell_init+0x50>)
 8002916:	f003 fddf 	bl	80064d8 <cmd_servo_init>
    cmd_baro_init(&ush);
 800291a:	4808      	ldr	r0, [pc, #32]	@ (800293c <shell_init+0x50>)
 800291c:	f002 fae8 	bl	8004ef0 <cmd_baro_init>
    cmd_rfm95_init(&ush);
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <shell_init+0x50>)
 8002922:	f003 fd73 	bl	800640c <cmd_rfm95_init>
    cmd_gps_init(&ush);
 8002926:	4805      	ldr	r0, [pc, #20]	@ (800293c <shell_init+0x50>)
 8002928:	f002 ff12 	bl	8005750 <cmd_gps_init>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200004d4 	.word	0x200004d4
 8002938:	0800b658 	.word	0x0800b658
 800293c:	2000044c 	.word	0x2000044c
 8002940:	20000448 	.word	0x20000448
 8002944:	0800b63c 	.word	0x0800b63c
 8002948:	200004d8 	.word	0x200004d8

0800294c <lora_monitor_service>:
        ush_printf(shell_handle, format, args);
        va_end(args);
    }
}

void lora_monitor_service(void) {
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b0e8      	sub	sp, #416	@ 0x1a0
 8002950:	af02      	add	r7, sp, #8
    if (lora_rx_mode) {
 8002952:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <lora_monitor_service+0x1ac>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80c8 	beq.w	8002aec <lora_monitor_service+0x1a0>
        uint8_t data[FIXED_PACKET_LENGTH];
        uint8_t len;

        if (rfm95_receive(data, &len, 10)) {
 800295c:	f207 118b 	addw	r1, r7, #395	@ 0x18b
 8002960:	463b      	mov	r3, r7
 8002962:	220a      	movs	r2, #10
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fcc5 	bl	80022f4 <rfm95_receive>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80bd 	beq.w	8002aec <lora_monitor_service+0x1a0>
            // Print received data info
            char print_buf[256];
            snprintf(print_buf, sizeof(print_buf), "RX (%d bytes): ", len);
 8002972:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8002976:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800297a:	4a60      	ldr	r2, [pc, #384]	@ (8002afc <lora_monitor_service+0x1b0>)
 800297c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002980:	f006 fb5c 	bl	800903c <sniprintf>

            char hex_buf[4];
            for (int i = 0; i < len; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800298a:	e01a      	b.n	80029c2 <lora_monitor_service+0x76>
                snprintf(hex_buf, sizeof(hex_buf), "%02X ", data[i]);
 800298c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002990:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 8002994:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f507 70c2 	add.w	r0, r7, #388	@ 0x184
 80029a0:	4a57      	ldr	r2, [pc, #348]	@ (8002b00 <lora_monitor_service+0x1b4>)
 80029a2:	2104      	movs	r1, #4
 80029a4:	f006 fb4a 	bl	800903c <sniprintf>
                strcat(print_buf, hex_buf);
 80029a8:	f507 72c2 	add.w	r2, r7, #388	@ 0x184
 80029ac:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 fc1a 	bl	80091ec <strcat>
            for (int i = 0; i < len; i++) {
 80029b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80029bc:	3301      	adds	r3, #1
 80029be:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80029c2:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 80029c6:	461a      	mov	r2, r3
 80029c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80029cc:	4293      	cmp	r3, r2
 80029ce:	dbdd      	blt.n	800298c <lora_monitor_service+0x40>
            }

            char rssi_snr_buf[64];
            int16_t snr = (int16_t)(rfm95_get_snr() * 100);
 80029d0:	f7ff fd34 	bl	800243c <rfm95_get_snr>
 80029d4:	4603      	mov	r3, r0
 80029d6:	494b      	ldr	r1, [pc, #300]	@ (8002b04 <lora_monitor_service+0x1b8>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f995 	bl	8000d08 <__aeabi_fmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fae1 	bl	8000fa8 <__aeabi_f2iz>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
            snprintf(rssi_snr_buf, sizeof(rssi_snr_buf),
                    "\r\nRSSI:%ddBm SNR:%d.%02ddB",
                    rfm95_get_rssi(),
 80029ec:	f7ff fd1a 	bl	8002424 <rfm95_get_rssi>
 80029f0:	4603      	mov	r3, r0
            snprintf(rssi_snr_buf, sizeof(rssi_snr_buf),
 80029f2:	461d      	mov	r5, r3
 80029f4:	f9b7 3192 	ldrsh.w	r3, [r7, #402]	@ 0x192
 80029f8:	4a43      	ldr	r2, [pc, #268]	@ (8002b08 <lora_monitor_service+0x1bc>)
 80029fa:	fb82 1203 	smull	r1, r2, r2, r3
 80029fe:	1152      	asrs	r2, r2, #5
 8002a00:	17db      	asrs	r3, r3, #31
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	b21b      	sxth	r3, r3
 8002a06:	461c      	mov	r4, r3
                    snr / 100,
                    abs(snr % 100));
 8002a08:	f9b7 3192 	ldrsh.w	r3, [r7, #402]	@ 0x192
 8002a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b08 <lora_monitor_service+0x1bc>)
 8002a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a12:	1151      	asrs	r1, r2, #5
 8002a14:	17da      	asrs	r2, r3, #31
 8002a16:	1a8a      	subs	r2, r1, r2
 8002a18:	2164      	movs	r1, #100	@ 0x64
 8002a1a:	fb01 f202 	mul.w	r2, r1, r2
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bfb8      	it	lt
 8002a26:	425b      	neglt	r3, r3
 8002a28:	b29b      	uxth	r3, r3
            snprintf(rssi_snr_buf, sizeof(rssi_snr_buf),
 8002a2a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	9400      	str	r4, [sp, #0]
 8002a32:	462b      	mov	r3, r5
 8002a34:	4a35      	ldr	r2, [pc, #212]	@ (8002b0c <lora_monitor_service+0x1c0>)
 8002a36:	2140      	movs	r1, #64	@ 0x40
 8002a38:	f006 fb00 	bl	800903c <sniprintf>
            strcat(print_buf, rssi_snr_buf);
 8002a3c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a40:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fbd0 	bl	80091ec <strcat>

            ush_print(&ush, print_buf);
 8002a4c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a50:	4619      	mov	r1, r3
 8002a52:	482f      	ldr	r0, [pc, #188]	@ (8002b10 <lora_monitor_service+0x1c4>)
 8002a54:	f000 fb44 	bl	80030e0 <ush_print>

            // Check if data starts with "servo_"
            if (len >= 6 && memcmp(data, "servo_", 6) == 0) {
 8002a58:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d945      	bls.n	8002aec <lora_monitor_service+0x1a0>
 8002a60:	463b      	mov	r3, r7
 8002a62:	2206      	movs	r2, #6
 8002a64:	492b      	ldr	r1, [pc, #172]	@ (8002b14 <lora_monitor_service+0x1c8>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f006 fbe1 	bl	800922e <memcmp>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d13c      	bne.n	8002aec <lora_monitor_service+0x1a0>
                // Convert remaining data to angle value
                char angle_str[4] = {0}; // Max 3 digits + null terminator
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
                uint8_t angle_len = len - 6;
 8002a78:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8002a7c:	3b06      	subs	r3, #6
 8002a7e:	f887 3191 	strb.w	r3, [r7, #401]	@ 0x191
                if (angle_len > 0 && angle_len <= 3) {
 8002a82:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d030      	beq.n	8002aec <lora_monitor_service+0x1a0>
 8002a8a:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d82c      	bhi.n	8002aec <lora_monitor_service+0x1a0>
                    memcpy(angle_str, &data[6], angle_len);
 8002a92:	f897 2191 	ldrb.w	r2, [r7, #401]	@ 0x191
 8002a96:	463b      	mov	r3, r7
 8002a98:	1d99      	adds	r1, r3, #6
 8002a9a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 fc0a 	bl	80092b8 <memcpy>
                    int angle = atoi(angle_str);
 8002aa4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f006 fac3 	bl	8009034 <atoi>
 8002aae:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c

                    // Check if angle is within valid range (0-180)
                    if (angle >= 0 && angle <= 180) {
 8002ab2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db18      	blt.n	8002aec <lora_monitor_service+0x1a0>
 8002aba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002abe:	2bb4      	cmp	r3, #180	@ 0xb4
 8002ac0:	dc14      	bgt.n	8002aec <lora_monitor_service+0x1a0>
                        servo_set_angle(&htim2, (uint8_t)angle);
 8002ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4813      	ldr	r0, [pc, #76]	@ (8002b18 <lora_monitor_service+0x1cc>)
 8002acc:	f7ff fe80 	bl	80027d0 <servo_set_angle>

                        // Print confirmation message
                        char confirm_buf[32];
                        snprintf(confirm_buf, sizeof(confirm_buf),
 8002ad0:	f107 0020 	add.w	r0, r7, #32
 8002ad4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ad8:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <lora_monitor_service+0x1d0>)
 8002ada:	2120      	movs	r1, #32
 8002adc:	f006 faae 	bl	800903c <sniprintf>
                                "\r\nSetting servo to %d degrees", angle);
                        ush_print(&ush, confirm_buf);
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480a      	ldr	r0, [pc, #40]	@ (8002b10 <lora_monitor_service+0x1c4>)
 8002ae8:	f000 fafa 	bl	80030e0 <ush_print>
                    }
                }
            }
        }
    }
}
 8002aec:	bf00      	nop
 8002aee:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000528 	.word	0x20000528
 8002afc:	0800aa48 	.word	0x0800aa48
 8002b00:	0800aa58 	.word	0x0800aa58
 8002b04:	42c80000 	.word	0x42c80000
 8002b08:	51eb851f 	.word	0x51eb851f
 8002b0c:	0800aa60 	.word	0x0800aa60
 8002b10:	2000044c 	.word	0x2000044c
 8002b14:	0800aa7c 	.word	0x0800aa7c
 8002b18:	200002b8 	.word	0x200002b8
 8002b1c:	0800aa84 	.word	0x0800aa84

08002b20 <shell_service>:

void shell_service(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
    ush_service(&ush);
 8002b24:	4804      	ldr	r0, [pc, #16]	@ (8002b38 <shell_service+0x18>)
 8002b26:	f000 fa81 	bl	800302c <ush_service>
    lora_monitor_service();
 8002b2a:	f7ff ff0f 	bl	800294c <lora_monitor_service>
    gps_monitor_service(&ush);
 8002b2e:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <shell_service+0x18>)
 8002b30:	f002 fcc4 	bl	80054bc <gps_monitor_service>


}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000044c 	.word	0x2000044c

08002b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	61d3      	str	r3, [r2, #28]
 8002b66:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <HAL_MspInit+0x5c>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_MspInit+0x60>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <HAL_MspInit+0x60>)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000

08002ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <HAL_I2C_MspInit+0x70>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d123      	bne.n	8002c08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bd8:	23c0      	movs	r3, #192	@ 0xc0
 8002bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4619      	mov	r1, r3
 8002bea:	480b      	ldr	r0, [pc, #44]	@ (8002c18 <HAL_I2C_MspInit+0x78>)
 8002bec:	f003 fe40 	bl	8006870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bfa:	61d3      	str	r3, [r2, #28]
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_I2C_MspInit+0x74>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40005400 	.word	0x40005400
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010c00 	.word	0x40010c00

08002c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca4 <HAL_SPI_MspInit+0x88>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d12f      	bne.n	8002c9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c46:	6193      	str	r3, [r2, #24]
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_SPI_MspInit+0x8c>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c6c:	23a0      	movs	r3, #160	@ 0xa0
 8002c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480b      	ldr	r0, [pc, #44]	@ (8002cac <HAL_SPI_MspInit+0x90>)
 8002c80:	f003 fdf6 	bl	8006870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c84:	2340      	movs	r3, #64	@ 0x40
 8002c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	4619      	mov	r1, r3
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <HAL_SPI_MspInit+0x90>)
 8002c98:	f003 fdea 	bl	8006870 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40013000 	.word	0x40013000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010800 	.word	0x40010800

08002cb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc2:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a10      	ldr	r2, [pc, #64]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cda:	e010      	b.n	8002cfe <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_TIM_PWM_MspInit+0x5c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10b      	bne.n	8002cfe <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_TIM_PWM_MspInit+0x58>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40000400 	.word	0x40000400

08002d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	@ 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2e:	d118      	bne.n	8002d62 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a24      	ldr	r2, [pc, #144]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	481c      	ldr	r0, [pc, #112]	@ (8002dcc <HAL_TIM_MspPostInit+0xbc>)
 8002d5c:	f003 fd88 	bl	8006870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d60:	e02e      	b.n	8002dc0 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <HAL_TIM_MspPostInit+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d129      	bne.n	8002dc0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a15      	ldr	r2, [pc, #84]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_TIM_MspPostInit+0xb8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d84:	2320      	movs	r3, #32
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	480f      	ldr	r0, [pc, #60]	@ (8002dd4 <HAL_TIM_MspPostInit+0xc4>)
 8002d98:	f003 fd6a 	bl	8006870 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_TIM_MspPostInit+0xc8>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_TIM_MspPostInit+0xc8>)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	6053      	str	r3, [r2, #4]
}
 8002dc0:	bf00      	nop
 8002dc2:	3728      	adds	r7, #40	@ 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010800 	.word	0x40010800
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40010c00 	.word	0x40010c00
 8002dd8:	40010000 	.word	0x40010000

08002ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0318 	add.w	r3, r7, #24
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <HAL_UART_MspInit+0xf8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d132      	bne.n	8002e62 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfc:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4a35      	ldr	r2, [pc, #212]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e06:	6193      	str	r3, [r2, #24]
 8002e08:	4b33      	ldr	r3, [pc, #204]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	4b30      	ldr	r3, [pc, #192]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6193      	str	r3, [r2, #24]
 8002e20:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 0318 	add.w	r3, r7, #24
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4826      	ldr	r0, [pc, #152]	@ (8002edc <HAL_UART_MspInit+0x100>)
 8002e42:	f003 fd15 	bl	8006870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 0318 	add.w	r3, r7, #24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4820      	ldr	r0, [pc, #128]	@ (8002edc <HAL_UART_MspInit+0x100>)
 8002e5c:	f003 fd08 	bl	8006870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e60:	e034      	b.n	8002ecc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_UART_MspInit+0x104>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d12f      	bne.n	8002ecc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4a19      	ldr	r2, [pc, #100]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e76:	61d3      	str	r3, [r2, #28]
 8002e78:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_UART_MspInit+0xfc>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f107 0318 	add.w	r3, r7, #24
 8002eac:	4619      	mov	r1, r3
 8002eae:	480b      	ldr	r0, [pc, #44]	@ (8002edc <HAL_UART_MspInit+0x100>)
 8002eb0:	f003 fcde 	bl	8006870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <HAL_UART_MspInit+0x100>)
 8002ec8:	f003 fcd2 	bl	8006870 <HAL_GPIO_Init>
}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	@ 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <NMI_Handler+0x4>

08002eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <BusFault_Handler+0x4>

08002f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <UsageFault_Handler+0x4>

08002f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f34:	f003 fb4e 	bl	80065d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <EXTI0_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1276_DIO0_Pin);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f003 fe31 	bl	8006ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1276_DIO1_Pin);
 8002f4e:	2002      	movs	r0, #2
 8002f50:	f003 fe2a 	bl	8006ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1276_DIO2_Pin);  // Pin 11
 8002f5c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002f60:	f003 fe22 	bl	8006ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SX1276_DIO3_Pin);  // Pin 12
 8002f64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002f68:	f003 fe1e 	bl	8006ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f006 f95e 	bl	8009260 <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20005000 	.word	0x20005000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	200004f0 	.word	0x200004f0
 8002fd8:	200006a8 	.word	0x200006a8

08002fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <ush_init>:

#include <stdarg.h>
#include <string.h>

void ush_init(struct ush_object *self, const struct ush_descriptor *desc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
        USH_ASSERT(desc->io->read != NULL);
        USH_ASSERT(desc->io->write != NULL);

        USH_ASSERT(desc->hostname != NULL);

        self->desc = desc;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	601a      	str	r2, [r3, #0]
        self->root = NULL;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

#if USH_CONFIG_ENABLE_FEATURE_COMMANDS == 1
        ush_status_t stat = ush_commands_add(self, &self->buildin_commands, g_ush_buildin_commands, g_ush_buildin_commands_num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <ush_init+0x3c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	@ (8003028 <ush_init+0x40>)
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fbe3 	bl	80037d6 <ush_commands_add>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
        if (stat != USH_STATUS_OK) {
                USH_ASSERT(false);
        }
#endif /* USH_CONFIG_ENABLE_FEATURE_COMMANDS */

        ush_reset(self);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 fa21 	bl	800445c <ush_reset>
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	0800b6c8 	.word	0x0800b6c8
 8003028:	0800b690 	.word	0x0800b690

0800302c <ush_service>:
        ush_node_deinit_recursive(self, self->root);
        memset(self, 0, sizeof(struct ush_object));
}

bool ush_service(struct ush_object *self)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);
        USH_ASSERT(self->current_node != NULL);

        bool busy = false;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

        if (ush_reset_service(self) != false)
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f001 fa23 	bl	8004484 <ush_reset_service>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <ush_service+0x1c>
                return true;        
 8003044:	2301      	movs	r3, #1
 8003046:	e033      	b.n	80030b0 <ush_service+0x84>
        if (ush_prompt_service(self) != false)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 f83d 	bl	80040c8 <ush_prompt_service>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <ush_service+0x2c>
                return true;        
 8003054:	2301      	movs	r3, #1
 8003056:	e02b      	b.n	80030b0 <ush_service+0x84>
        if (ush_read_service(self, &busy) != false)
 8003058:	f107 030f 	add.w	r3, r7, #15
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 f882 	bl	8004168 <ush_read_service>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <ush_service+0x42>
                return busy;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	e020      	b.n	80030b0 <ush_service+0x84>
#if USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE == 1
        if (ush_autocomp_service(self) != false)
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f852 	bl	8003118 <ush_autocomp_service>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <ush_service+0x52>
                return true;
 800307a:	2301      	movs	r3, #1
 800307c:	e018      	b.n	80030b0 <ush_service+0x84>
#endif /* USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE */
        if (ush_parse_service(self) != false)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fe62 	bl	8003d48 <ush_parse_service>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <ush_service+0x62>
                return true;        
 800308a:	2301      	movs	r3, #1
 800308c:	e010      	b.n	80030b0 <ush_service+0x84>
        if (ush_write_service(self) != false)
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f001 fd62 	bl	8004b58 <ush_write_service>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <ush_service+0x72>
                return true;
 800309a:	2301      	movs	r3, #1
 800309c:	e008      	b.n	80030b0 <ush_service+0x84>
        if (ush_process_service(self) != false)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 ffdb 	bl	800405a <ush_process_service>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <ush_service+0x82>
                return true;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <ush_service+0x84>

        return false;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <ush_print_status>:

void ush_print_status(struct ush_object *self, ush_status_t status)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
        USH_ASSERT(self != NULL);
        USH_ASSERT(status < USH_STATUS__TOTAL_NUM);

        char *ret = (char*)ush_utils_get_status_string(status);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 fc3e 	bl	8004948 <ush_utils_get_status_string>
 80030cc:	60f8      	str	r0, [r7, #12]
        ush_write_pointer(self, ret, USH_STATE_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f001 fd2c 	bl	8004b30 <ush_write_pointer>
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <ush_print>:

void ush_print(struct ush_object *self, char *buf)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
        USH_ASSERT(self != NULL);
        USH_ASSERT(buf != NULL);

        ush_write_pointer(self, buf, USH_STATE_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 fd1e 	bl	8004b30 <ush_write_pointer>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ush_print_no_newline>:

        va_end(arg_list);
}

void ush_print_no_newline(struct ush_object *self, char *buf)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
        USH_ASSERT(self != NULL);
        USH_ASSERT(buf != NULL);

        ush_write_pointer(self, buf, USH_STATE_RESET_PROMPT);
 8003106:	2201      	movs	r2, #1
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f001 fd10 	bl	8004b30 <ush_write_pointer>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <ush_autocomp_service>:
#include <string.h>

#if USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE == 1

bool ush_autocomp_service(struct ush_object *self)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791b      	ldrb	r3, [r3, #4]
 8003128:	3b11      	subs	r3, #17
 800312a:	2b09      	cmp	r3, #9
 800312c:	d83e      	bhi.n	80031ac <ush_autocomp_service+0x94>
 800312e:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <ush_autocomp_service+0x1c>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800316d 	.word	0x0800316d
 8003140:	0800316d 	.word	0x0800316d
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800317d 	.word	0x0800317d
 8003150:	08003189 	.word	0x08003189
 8003154:	08003193 	.word	0x08003193
 8003158:	080031a5 	.word	0x080031a5

        case USH_STATE_AUTOCOMP_PREPARE:
                ush_autocomp_state_prepare(self);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f859 	bl	8003214 <ush_autocomp_state_prepare>
                break;
 8003162:	e026      	b.n	80031b2 <ush_autocomp_service+0x9a>

        case USH_STATE_AUTOCOMP_CANDIDATES_START:
                ush_autocomp_state_candidates_start(self);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f869 	bl	800323c <ush_autocomp_state_candidates_start>
                break;
 800316a:	e022      	b.n	80031b2 <ush_autocomp_service+0x9a>

        case USH_STATE_AUTOCOMP_CANDIDATES_COUNT:
        case USH_STATE_AUTOCOMP_CANDIDATES_OPTIMISE:
        case USH_STATE_AUTOCOMP_CANDIDATES_PRINT: {
                ush_autocomp_state_candidates_process(self);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f87b 	bl	8003268 <ush_autocomp_state_candidates_process>
                break;
 8003172:	e01e      	b.n	80031b2 <ush_autocomp_service+0x9a>
        }

        case USH_STATE_AUTOCOMP_CANDIDATES_FINISH:
                ush_autocomp_state_candidates_finish(self);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8a0 	bl	80032ba <ush_autocomp_state_candidates_finish>
                break;
 800317a:	e01a      	b.n	80031b2 <ush_autocomp_service+0x9a>

        case USH_STATE_AUTOCOMP_PROMPT_PREPARE:
                ush_write_pointer(self, "\r\n", USH_STATE_AUTOCOMP_PROMPT);
 800317c:	2218      	movs	r2, #24
 800317e:	490f      	ldr	r1, [pc, #60]	@ (80031bc <ush_autocomp_service+0xa4>)
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f001 fcd5 	bl	8004b30 <ush_write_pointer>
                break;
 8003186:	e014      	b.n	80031b2 <ush_autocomp_service+0x9a>

        case USH_STATE_AUTOCOMP_PROMPT:
                ush_prompt_start(self, USH_STATE_AUTOCOMP_RECALL);
 8003188:	2119      	movs	r1, #25
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 ff8a 	bl	80040a4 <ush_prompt_start>
                break;
 8003190:	e00f      	b.n	80031b2 <ush_autocomp_service+0x9a>

        case USH_STATE_AUTOCOMP_RECALL:
                ush_write_pointer(self, self->desc->input_buffer, USH_STATE_READ_CHAR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2208      	movs	r2, #8
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 fcc7 	bl	8004b30 <ush_write_pointer>
                break;
 80031a2:	e006      	b.n	80031b2 <ush_autocomp_service+0x9a>
        
        case USH_STATE_AUTOCOMP_RECALL_SUFFIX: {                
                ush_autocomp_state_recall_suffix(self);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f80b 	bl	80031c0 <ush_autocomp_state_recall_suffix>
                break;
 80031aa:	e002      	b.n	80031b2 <ush_autocomp_service+0x9a>
        }

        default:
                processed = false;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
                break;
 80031b0:	bf00      	nop

        }

        return processed;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	0800aaa4 	.word	0x0800aaa4

080031c0 <ush_autocomp_state_recall_suffix>:
#include <string.h>

#if USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE == 1

void ush_autocomp_state_recall_suffix(struct ush_object *self)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
        char *suffix = self->autocomp_input + strlen(self->autocomp_input) - self->autocomp_suffix_len;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fc ffbd 	bl	8000150 <strlen>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4423      	add	r3, r4
 80031e2:	60fb      	str	r3, [r7, #12]
        if (strlen(suffix) > 0) {
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <ush_autocomp_state_recall_suffix+0x38>
                ush_write_pointer(self, suffix, USH_STATE_READ_CHAR);
 80031ec:	2208      	movs	r2, #8
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f001 fc9d 	bl	8004b30 <ush_write_pointer>
        } else {
                ush_autocomp_prepare_candidates(self);
                ush_write_pointer(self, "\r\n", USH_STATE_AUTOCOMP_CANDIDATES_PRINT);
        }
}
 80031f6:	e007      	b.n	8003208 <ush_autocomp_state_recall_suffix+0x48>
                ush_autocomp_prepare_candidates(self);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8de 	bl	80033ba <ush_autocomp_prepare_candidates>
                ush_write_pointer(self, "\r\n", USH_STATE_AUTOCOMP_CANDIDATES_PRINT);
 80031fe:	2215      	movs	r2, #21
 8003200:	4903      	ldr	r1, [pc, #12]	@ (8003210 <ush_autocomp_state_recall_suffix+0x50>)
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 fc94 	bl	8004b30 <ush_write_pointer>
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	0800aaa8 	.word	0x0800aaa8

08003214 <ush_autocomp_state_prepare>:

void ush_autocomp_state_prepare(struct ush_object *self)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
        self->autocomp_input = ush_utils_get_last_arg(self->desc->input_buffer);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f001 fb44 	bl	80048b0 <ush_utils_get_last_arg>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	671a      	str	r2, [r3, #112]	@ 0x70
        self->state = USH_STATE_AUTOCOMP_CANDIDATES_START;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2212      	movs	r2, #18
 8003232:	711a      	strb	r2, [r3, #4]
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <ush_autocomp_state_candidates_start>:

void ush_autocomp_state_candidates_start(struct ush_object *self)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
        self->autocomp_prev_count = 0;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        self->autocomp_suffix_len = 0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        ush_autocomp_prepare_candidates(self);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8b0 	bl	80033ba <ush_autocomp_prepare_candidates>
        self->state = USH_STATE_AUTOCOMP_CANDIDATES_COUNT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2213      	movs	r2, #19
 800325e:	711a      	strb	r2, [r3, #4]
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <ush_autocomp_state_candidates_process>:

void ush_autocomp_state_candidates_process(struct ush_object *self)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
        if (self->process_node == NULL) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <ush_autocomp_state_candidates_process+0x18>
                ush_autocomp_check_for_finish(self);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f906 	bl	800348a <ush_autocomp_check_for_finish>
                return;                        
 800327e:	e019      	b.n	80032b4 <ush_autocomp_state_candidates_process+0x4c>
        }

        if (ush_autocomp_check_for_next(self) != false)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f98e 	bl	80035a2 <ush_autocomp_check_for_next>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d110      	bne.n	80032ae <ush_autocomp_state_candidates_process+0x46>
                return;
        
        struct ush_file_descriptor const *file = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
        
        if (ush_autocomp_process_file_prepare(self, &file) != false)
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa3e 	bl	8003718 <ush_autocomp_process_file_prepare>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <ush_autocomp_state_candidates_process+0x4a>
                return;

        ush_autocomp_process_file_index(self, file);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9b0 	bl	800360c <ush_autocomp_process_file_index>
 80032ac:	e002      	b.n	80032b4 <ush_autocomp_state_candidates_process+0x4c>
                return;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <ush_autocomp_state_candidates_process+0x4c>
                return;
 80032b2:	bf00      	nop
}
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ush_autocomp_state_candidates_finish>:

void ush_autocomp_state_candidates_finish(struct ush_object *self)
{
 80032ba:	b590      	push	{r4, r7, lr}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
        if (self->autocomp_prev_state == USH_STATE_AUTOCOMP_CANDIDATES_PRINT) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80032c8:	2b15      	cmp	r3, #21
 80032ca:	d103      	bne.n	80032d4 <ush_autocomp_state_candidates_finish+0x1a>
                self->state = USH_STATE_AUTOCOMP_PROMPT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2218      	movs	r2, #24
 80032d0:	711a      	strb	r2, [r3, #4]
 80032d2:	e063      	b.n	800339c <ush_autocomp_state_candidates_finish+0xe2>

        } else if (self->autocomp_prev_state == USH_STATE_AUTOCOMP_CANDIDATES_COUNT) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80032da:	2b13      	cmp	r3, #19
 80032dc:	d133      	bne.n	8003346 <ush_autocomp_state_candidates_finish+0x8c>
                switch (self->autocomp_count) {
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <ush_autocomp_state_candidates_finish+0x32>
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d004      	beq.n	80032f4 <ush_autocomp_state_candidates_finish+0x3a>
 80032ea:	e024      	b.n	8003336 <ush_autocomp_state_candidates_finish+0x7c>
                case 0:
                        self->state = USH_STATE_READ_CHAR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2208      	movs	r2, #8
 80032f0:	711a      	strb	r2, [r3, #4]
                        break;
 80032f2:	e053      	b.n	800339c <ush_autocomp_state_candidates_finish+0xe2>
                case 1: {
                        char *suffix = self->autocomp_input + strlen(self->autocomp_input);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fc ff27 	bl	8000150 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	4423      	add	r3, r4
 8003306:	60fb      	str	r3, [r7, #12]
                        strcpy(self->autocomp_input, self->autocomp_candidate_name);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f005 ffde 	bl	80092d4 <strcpy>
                        self->in_pos = strlen(self->desc->input_buffer);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fc ff16 	bl	8000150 <strlen>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
                        ush_write_pointer(self, suffix, USH_STATE_READ_CHAR);
 800332a:	2208      	movs	r2, #8
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f001 fbfe 	bl	8004b30 <ush_write_pointer>
                        break;
 8003334:	e032      	b.n	800339c <ush_autocomp_state_candidates_finish+0xe2>
                }
                default:
                        self->autocomp_suffix_len = 0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        ush_autocomp_optimize_continue(self);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f854 	bl	80033ec <ush_autocomp_optimize_continue>
                        break;
 8003344:	e02a      	b.n	800339c <ush_autocomp_state_candidates_finish+0xe2>
                }

        } else if (self->autocomp_prev_state == USH_STATE_AUTOCOMP_CANDIDATES_OPTIMISE) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800334c:	2b14      	cmp	r3, #20
 800334e:	d125      	bne.n	800339c <ush_autocomp_state_candidates_finish+0xe2>
                if (self->autocomp_count < self->autocomp_prev_count) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800335a:	429a      	cmp	r2, r3
 800335c:	d21b      	bcs.n	8003396 <ush_autocomp_state_candidates_finish+0xdc>
                        if (self->in_pos > 0)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <ush_autocomp_state_candidates_finish+0xb6>
                                self->in_pos--;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
                        self->desc->input_buffer[self->in_pos] = '\0';
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	4413      	add	r3, r2
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
                        self->autocomp_suffix_len--;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        self->state = USH_STATE_AUTOCOMP_RECALL_SUFFIX;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	221a      	movs	r2, #26
 8003392:	711a      	strb	r2, [r3, #4]
                        return;
 8003394:	e002      	b.n	800339c <ush_autocomp_state_candidates_finish+0xe2>
                }

                ush_autocomp_optimize_continue(self);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f828 	bl	80033ec <ush_autocomp_optimize_continue>
        } else {
                USH_ASSERT(false);
        }
}
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <ush_autocomp_start>:
#include <string.h>

#if USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE == 1

void ush_autocomp_start(struct ush_object *self)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        self->state = USH_STATE_AUTOCOMP_PREPARE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2211      	movs	r2, #17
 80033ae:	711a      	strb	r2, [r3, #4]
}        
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <ush_autocomp_prepare_candidates>:

void ush_autocomp_prepare_candidates(struct ush_object *self)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
        self->autocomp_count = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	67da      	str	r2, [r3, #124]	@ 0x7c
        self->process_stage = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	669a      	str	r2, [r3, #104]	@ 0x68
        self->process_node = self->commands;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        self->process_index = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	659a      	str	r2, [r3, #88]	@ 0x58
        self->process_index_item = 0;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <ush_autocomp_optimize_continue>:

void ush_autocomp_optimize_continue(struct ush_object *self)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
        self->autocomp_prev_count = self->autocomp_count;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        size_t pos = strlen(self->autocomp_input);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	4618      	mov	r0, r3
 8003404:	f7fc fea4 	bl	8000150 <strlen>
 8003408:	60f8      	str	r0, [r7, #12]
        if (pos >= strlen(self->autocomp_candidate_name)) {
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340e:	4618      	mov	r0, r3
 8003410:	f7fc fe9e 	bl	8000150 <strlen>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4293      	cmp	r3, r2
 800341a:	d303      	bcc.n	8003424 <ush_autocomp_optimize_continue+0x38>
                self->state = USH_STATE_AUTOCOMP_RECALL_SUFFIX;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	221a      	movs	r2, #26
 8003420:	711a      	strb	r2, [r3, #4]
                return;
 8003422:	e02f      	b.n	8003484 <ush_autocomp_optimize_continue+0x98>
        }
        char ch = self->autocomp_candidate_name[pos];
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	72fb      	strb	r3, [r7, #11]
        self->desc->input_buffer[self->in_pos++] = ch;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	1c58      	adds	r0, r3, #1
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6188      	str	r0, [r1, #24]
 8003440:	4413      	add	r3, r2
 8003442:	7afa      	ldrb	r2, [r7, #11]
 8003444:	701a      	strb	r2, [r3, #0]
        if (self->in_pos >= self->desc->input_buffer_size)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d302      	bcc.n	800345a <ush_autocomp_optimize_continue+0x6e>
                self->in_pos = 0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
        self->desc->input_buffer[self->in_pos] = '\0';
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4413      	add	r3, r2
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
        self->autocomp_suffix_len++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        ush_autocomp_prepare_candidates(self);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff9e 	bl	80033ba <ush_autocomp_prepare_candidates>
        self->state = USH_STATE_AUTOCOMP_CANDIDATES_OPTIMISE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2214      	movs	r2, #20
 8003482:	711a      	strb	r2, [r3, #4]
}
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <ush_autocomp_check_for_finish>:

void ush_autocomp_check_for_finish(struct ush_object *self)
{
 800348a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	466b      	mov	r3, sp
 8003496:	461e      	mov	r6, r3
        char abs_path[self->desc->path_max_length];
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	4698      	mov	r8, r3
 80034ac:	4691      	mov	r9, r2
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	461c      	mov	r4, r3
 80034cc:	4615      	mov	r5, r2
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	00eb      	lsls	r3, r5, #3
 80034d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034dc:	00e2      	lsls	r2, r4, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	3307      	adds	r3, #7
 80034e6:	08db      	lsrs	r3, r3, #3
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	ebad 0d03 	sub.w	sp, sp, r3
 80034ee:	466b      	mov	r3, sp
 80034f0:	3300      	adds	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]

        if (self->process_stage == 0) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <ush_autocomp_check_for_finish+0x8e>
                self->process_node = self->current_node;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	64da      	str	r2, [r3, #76]	@ 0x4c
                self->process_index = 0;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	659a      	str	r2, [r3, #88]	@ 0x58
                self->process_index_item = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	65da      	str	r2, [r3, #92]	@ 0x5c
                self->process_stage = 1;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	669a      	str	r2, [r3, #104]	@ 0x68
 8003516:	e03e      	b.n	8003596 <ush_autocomp_check_for_finish+0x10c>
        } else if (self->process_stage == 1) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800351c:	2b01      	cmp	r3, #1
 800351e:	d12e      	bne.n	800357e <ush_autocomp_check_for_finish+0xf4>
                ush_node_get_absolute_path(self, self->autocomp_input, abs_path);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fad1 	bl	8003ad0 <ush_node_get_absolute_path>
                if (self->autocomp_input[0] == '\0') {
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <ush_autocomp_check_for_finish+0xb8>
                        self->process_node = self->current_node;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003540:	e00e      	b.n	8003560 <ush_autocomp_check_for_finish+0xd6>
                } else {
                        self->process_node = ush_node_get_parent_by_path(self, abs_path);
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb43 	bl	8003bd0 <ush_node_get_parent_by_path>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	64da      	str	r2, [r3, #76]	@ 0x4c
                        if (self->process_node == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <ush_autocomp_check_for_finish+0xd6>
                                self->process_node = self->current_node;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	64da      	str	r2, [r3, #76]	@ 0x4c
                }

                self->process_node = self->process_node->children;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	64da      	str	r2, [r3, #76]	@ 0x4c
                self->process_index = 0;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	659a      	str	r2, [r3, #88]	@ 0x58
                self->process_index_item = 0;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	65da      	str	r2, [r3, #92]	@ 0x5c
                self->process_stage = 2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	669a      	str	r2, [r3, #104]	@ 0x68
 800357c:	e00b      	b.n	8003596 <ush_autocomp_check_for_finish+0x10c>
        } else if (self->process_stage == 2) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <ush_autocomp_check_for_finish+0x10c>
                self->autocomp_prev_state = self->state;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791a      	ldrb	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
                self->state = USH_STATE_AUTOCOMP_CANDIDATES_FINISH;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2216      	movs	r2, #22
 8003594:	711a      	strb	r2, [r3, #4]
 8003596:	46b5      	mov	sp, r6
        } else {
                USH_ASSERT(false);
        }
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080035a2 <ush_autocomp_check_for_next>:

bool ush_autocomp_check_for_next(struct ush_object *self)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
        bool ret = false;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]

        if (self->process_stage == 0) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d111      	bne.n	80035da <ush_autocomp_check_for_next+0x38>
                if (self->process_index_item >= self->process_node->file_list_size) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d31d      	bcc.n	8003600 <ush_autocomp_check_for_next+0x5e>
                        self->process_index_item = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	65da      	str	r2, [r3, #92]	@ 0x5c
                        self->process_node = self->process_node->next;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	64da      	str	r2, [r3, #76]	@ 0x4c
                        ret = true;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e012      	b.n	8003600 <ush_autocomp_check_for_next+0x5e>
                }
        } else if (self->process_stage == 1) {
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d10e      	bne.n	8003600 <ush_autocomp_check_for_next+0x5e>
                if (self->process_index_item >= self->process_node->file_list_size) {
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d307      	bcc.n	8003600 <ush_autocomp_check_for_next+0x5e>
                        self->process_index_item = 0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	65da      	str	r2, [r3, #92]	@ 0x5c
                        self->process_node = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	64da      	str	r2, [r3, #76]	@ 0x4c
                        ret = true;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
                /* do nothing */
        } else {
                USH_ASSERT(false);
        }

        return ret;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <ush_autocomp_process_file_index>:

void ush_autocomp_process_file_index(struct ush_object *self, const struct ush_file_descriptor *file)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
        switch (self->process_index) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	2b02      	cmp	r3, #2
 800361c:	d053      	beq.n	80036c6 <ush_autocomp_process_file_index+0xba>
 800361e:	2b02      	cmp	r3, #2
 8003620:	d86f      	bhi.n	8003702 <ush_autocomp_process_file_index+0xf6>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <ush_autocomp_process_file_index+0x20>
 8003626:	2b01      	cmp	r3, #1
 8003628:	d03e      	beq.n	80036a8 <ush_autocomp_process_file_index+0x9c>
                        USH_ASSERT(false);
                }                        
                break;
        default:
                USH_ASSERT(false);
                break;
 800362a:	e06a      	b.n	8003702 <ush_autocomp_process_file_index+0xf6>
                if ((self->process_stage == 0) || (self->process_stage == 1)) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <ush_autocomp_process_file_index+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003638:	2b01      	cmp	r3, #1
 800363a:	d118      	bne.n	800366e <ush_autocomp_process_file_index+0x62>
                        if (self->state == USH_STATE_AUTOCOMP_CANDIDATES_PRINT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	2b15      	cmp	r3, #21
 8003642:	d107      	bne.n	8003654 <ush_autocomp_process_file_index+0x48>
                                ush_write_pointer(self, (char*)file->name, self->state);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	791b      	ldrb	r3, [r3, #4]
 800364c:	461a      	mov	r2, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f001 fa6e 	bl	8004b30 <ush_write_pointer>
                        self->process_index = 1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	659a      	str	r2, [r3, #88]	@ 0x58
                        self->autocomp_count++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	67da      	str	r2, [r3, #124]	@ 0x7c
                        self->autocomp_candidate_name = (char*)file->name;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	675a      	str	r2, [r3, #116]	@ 0x74
                break;
 800366c:	e04b      	b.n	8003706 <ush_autocomp_process_file_index+0xfa>
                } else if (self->process_stage == 2) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003672:	2b02      	cmp	r3, #2
 8003674:	d147      	bne.n	8003706 <ush_autocomp_process_file_index+0xfa>
                        if (self->state == USH_STATE_AUTOCOMP_CANDIDATES_PRINT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	791b      	ldrb	r3, [r3, #4]
 800367a:	2b15      	cmp	r3, #21
 800367c:	d107      	bne.n	800368e <ush_autocomp_process_file_index+0x82>
                                ush_write_pointer(self, self->autocomp_name, self->state);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f001 fa51 	bl	8004b30 <ush_write_pointer>
                        self->process_index = 1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58
                        self->autocomp_count++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	67da      	str	r2, [r3, #124]	@ 0x7c
                        self->autocomp_candidate_name = self->autocomp_name;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	675a      	str	r2, [r3, #116]	@ 0x74
                break;
 80036a6:	e02e      	b.n	8003706 <ush_autocomp_process_file_index+0xfa>
                if (self->state == USH_STATE_AUTOCOMP_CANDIDATES_PRINT)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	791b      	ldrb	r3, [r3, #4]
 80036ac:	2b15      	cmp	r3, #21
 80036ae:	d106      	bne.n	80036be <ush_autocomp_process_file_index+0xb2>
                        ush_write_pointer(self, "\r\n", self->state);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	791b      	ldrb	r3, [r3, #4]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4917      	ldr	r1, [pc, #92]	@ (8003714 <ush_autocomp_process_file_index+0x108>)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 fa39 	bl	8004b30 <ush_write_pointer>
                self->process_index = 2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	659a      	str	r2, [r3, #88]	@ 0x58
                break;
 80036c4:	e022      	b.n	800370c <ush_autocomp_process_file_index+0x100>
                if ((self->process_stage == 0) || (self->process_stage == 1)) {
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <ush_autocomp_process_file_index+0xca>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <ush_autocomp_process_file_index+0xdc>
                        self->process_index_item++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c
                        self->process_index = 0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	659a      	str	r2, [r3, #88]	@ 0x58
                break;
 80036e6:	e010      	b.n	800370a <ush_autocomp_process_file_index+0xfe>
                } else if (self->process_stage == 2) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d10c      	bne.n	800370a <ush_autocomp_process_file_index+0xfe>
                        self->process_node = self->process_node->next;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	64da      	str	r2, [r3, #76]	@ 0x4c
                        self->process_index = 0;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	659a      	str	r2, [r3, #88]	@ 0x58
                break;
 8003700:	e003      	b.n	800370a <ush_autocomp_process_file_index+0xfe>
                break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <ush_autocomp_process_file_index+0x100>
                break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <ush_autocomp_process_file_index+0x100>
                break;
 800370a:	bf00      	nop
        }
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	0800aaac 	.word	0x0800aaac

08003718 <ush_autocomp_process_file_prepare>:

bool ush_autocomp_process_file_prepare(struct ush_object *self, struct ush_file_descriptor const **file)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
        bool ret = false;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]

        if ((self->process_stage == 0) || (self->process_stage == 1)) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <ush_autocomp_process_file_prepare+0x1e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003732:	2b01      	cmp	r3, #1
 8003734:	d125      	bne.n	8003782 <ush_autocomp_process_file_prepare+0x6a>
                *file = &self->process_node->file_list[self->process_index_item];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	18ca      	adds	r2, r1, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
                if (ush_utils_startswith((char*)((*file)->name), self->autocomp_input) == false) {
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f001 f8db 	bl	8004916 <ush_utils_startswith>
 8003760:	4603      	mov	r3, r0
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02f      	beq.n	80037cc <ush_autocomp_process_file_prepare+0xb4>
                        self->process_index_item++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	65da      	str	r2, [r3, #92]	@ 0x5c
                        self->process_index = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58
                        ret = true;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
                if (ush_utils_startswith((char*)((*file)->name), self->autocomp_input) == false) {
 8003780:	e024      	b.n	80037cc <ush_autocomp_process_file_prepare+0xb4>
                }
        } else if (self->process_stage == 2) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003786:	2b02      	cmp	r3, #2
 8003788:	d120      	bne.n	80037cc <ush_autocomp_process_file_prepare+0xb4>
                self->autocomp_name = ush_utils_path_last(self->process_node->path);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f864 	bl	800485e <ush_utils_path_last>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	679a      	str	r2, [r3, #120]	@ 0x78
                if (ush_utils_startswith(self->autocomp_name, self->autocomp_input) == false) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f001 f8b5 	bl	8004916 <ush_utils_startswith>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f083 0301 	eor.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <ush_autocomp_process_file_prepare+0xb4>
                        self->process_node = self->process_node->next;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	64da      	str	r2, [r3, #76]	@ 0x4c
                        self->process_index = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	659a      	str	r2, [r3, #88]	@ 0x58
                        ret = true;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
                }
        } else {
                USH_ASSERT(false);
        }

        return ret;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <ush_commands_add>:
#include "inc/ush_commands.h"
#include "inc/ush_types.h"
#include "inc/ush_preconfig.h"

ush_status_t ush_commands_add(struct ush_object *self, struct ush_node_object *node, const struct ush_file_descriptor *file_list, size_t file_list_size)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
        USH_ASSERT(self != NULL);
        USH_ASSERT(node != NULL);
        USH_ASSERT(file_list != NULL);
        USH_ASSERT(file_list_size > 0);

        for (size_t i = 0; i < file_list_size; i++) {
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e002      	b.n	80037f0 <ush_commands_add+0x1a>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3301      	adds	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3f8      	bcc.n	80037ea <ush_commands_add+0x14>
                USH_ASSERT(file_list[i].name != NULL);
        }

        node->file_list = file_list;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
        node->file_list_size = file_list_size;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	605a      	str	r2, [r3, #4]
        node->path = NULL;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]

        node->next = self->commands;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	615a      	str	r2, [r3, #20]
        self->commands = node;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	629a      	str	r2, [r3, #40]	@ 0x28

        return USH_STATUS_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <ush_file_find_by_name>:
#include "inc/ush_node.h"

#include <string.h>

struct ush_file_descriptor const* ush_file_find_by_name(struct ush_object *self, const char *name)
{
 8003824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003828:	b08d      	sub	sp, #52	@ 0x34
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	466b      	mov	r3, sp
 8003832:	461e      	mov	r6, r3
        char file_path[self->desc->path_max_length];
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	3b01      	subs	r3, #1
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	00cb      	lsls	r3, r1, #3
 8003856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800385a:	4684      	mov	ip, r0
 800385c:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8003860:	4601      	mov	r1, r0
 8003862:	00ca      	lsls	r2, r1, #3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	469a      	mov	sl, r3
 800386e:	4693      	mov	fp, r2
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800387c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	3307      	adds	r3, #7
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	ebad 0d03 	sub.w	sp, sp, r3
 8003894:	466b      	mov	r3, sp
 8003896:	3300      	adds	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
        char abs_path[self->desc->path_max_length];
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	2200      	movs	r2, #0
 80038ac:	4698      	mov	r8, r3
 80038ae:	4691      	mov	r9, r2
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	461c      	mov	r4, r3
 80038ce:	4615      	mov	r5, r2
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	3307      	adds	r3, #7
 80038e8:	08db      	lsrs	r3, r3, #3
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	ebad 0d03 	sub.w	sp, sp, r3
 80038f0:	466b      	mov	r3, sp
 80038f2:	3300      	adds	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

        struct ush_node_object *curr;
        struct ush_file_descriptor const *file;

        curr = self->commands;        
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (curr != NULL) {
 80038fc:	e021      	b.n	8003942 <ush_file_find_by_name+0x11e>
                for (size_t i = 0; i < curr->file_list_size; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003902:	e016      	b.n	8003932 <ush_file_find_by_name+0x10e>
                        file = &curr->file_list[i];
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	613b      	str	r3, [r7, #16]
                        if (strcmp(file->name, name) == 0)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fc1f 	bl	8000160 <strcmp>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <ush_file_find_by_name+0x108>
                                return file;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	e044      	b.n	80039b6 <ush_file_find_by_name+0x192>
                for (size_t i = 0; i < curr->file_list_size; i++) {
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	3301      	adds	r3, #1
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003938:	429a      	cmp	r2, r3
 800393a:	d3e3      	bcc.n	8003904 <ush_file_find_by_name+0xe0>
                }
                curr = curr->next;                
 800393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (curr != NULL) {
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1da      	bne.n	80038fe <ush_file_find_by_name+0xda>
        }

        ush_node_get_absolute_path(self, name, abs_path);
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f8bf 	bl	8003ad0 <ush_node_get_absolute_path>
        curr = ush_node_get_parent_by_path(self, abs_path);      
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f93b 	bl	8003bd0 <ush_node_get_parent_by_path>
 800395a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        while (curr != NULL) {
 800395c:	e027      	b.n	80039ae <ush_file_find_by_name+0x18a>
                for (size_t i = 0; i < curr->file_list_size; i++) {
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
 8003962:	e01c      	b.n	800399e <ush_file_find_by_name+0x17a>
                        file = &curr->file_list[i];
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	613b      	str	r3, [r7, #16]
                        ush_utils_join_path(curr->path, file->name, file_path);
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	6898      	ldr	r0, [r3, #8]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	4619      	mov	r1, r3
 8003982:	f000 fda1 	bl	80044c8 <ush_utils_join_path>
                        if (strcmp(file_path, abs_path) == 0)
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	69f8      	ldr	r0, [r7, #28]
 800398a:	f7fc fbe9 	bl	8000160 <strcmp>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <ush_file_find_by_name+0x174>
                                return file;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	e00e      	b.n	80039b6 <ush_file_find_by_name+0x192>
                for (size_t i = 0; i < curr->file_list_size; i++) {
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	3301      	adds	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
 800399e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3dd      	bcc.n	8003964 <ush_file_find_by_name+0x140>
                }
                curr = curr->next;                
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (curr != NULL) {
 80039ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1d4      	bne.n	800395e <ush_file_find_by_name+0x13a>
        }

        return NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	46b5      	mov	sp, r6
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3734      	adds	r7, #52	@ 0x34
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080039c2 <ush_node_get_by_path>:
#include "inc/ush_utils.h"

#include <string.h>

struct ush_node_object* ush_node_get_by_path(struct ush_object *self, const char *path)
{
 80039c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	466b      	mov	r3, sp
 80039d0:	461e      	mov	r6, r3
        USH_ASSERT(self != NULL);
        USH_ASSERT(path != NULL);

        char level_path[self->desc->path_max_length];
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	3b01      	subs	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2200      	movs	r2, #0
 80039e4:	4698      	mov	r8, r3
 80039e6:	4691      	mov	r9, r2
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	461c      	mov	r4, r3
 8003a06:	4615      	mov	r5, r2
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	00eb      	lsls	r3, r5, #3
 8003a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a16:	00e2      	lsls	r2, r4, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	3307      	adds	r3, #7
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	ebad 0d03 	sub.w	sp, sp, r3
 8003a28:	466b      	mov	r3, sp
 8003a2a:	3300      	adds	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
        
        size_t levels = ush_utils_get_path_levels_count(path);
 8003a2e:	6838      	ldr	r0, [r7, #0]
 8003a30:	f000 feba 	bl	80047a8 <ush_utils_get_path_levels_count>
 8003a34:	60b8      	str	r0, [r7, #8]

        if (levels == 0)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <ush_node_get_by_path+0x80>
                return self->root;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	e03f      	b.n	8003ac2 <ush_node_get_by_path+0x100>
        if (self->root == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <ush_node_get_by_path+0x8c>
                return NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e039      	b.n	8003ac2 <ush_node_get_by_path+0x100>

        struct ush_node_object *curr = self->root->children;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i <= levels; i++) {
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e02b      	b.n	8003ab4 <ush_node_get_by_path+0xf2>
                ush_utils_get_path_level(i, path, level_path);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	69b8      	ldr	r0, [r7, #24]
 8003a62:	f000 fe6b 	bl	800473c <ush_utils_get_path_level>
                
                bool found = false;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
                while (curr != NULL) {
 8003a6a:	e00e      	b.n	8003a8a <ush_node_get_by_path+0xc8>
                        if (strcmp(curr->path, level_path) == 0) {
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fb74 	bl	8000160 <strcmp>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <ush_node_get_by_path+0xc2>
                                found = true;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
                                break;
 8003a82:	e005      	b.n	8003a90 <ush_node_get_by_path+0xce>
                        }
                        curr = curr->next;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	61fb      	str	r3, [r7, #28]
                while (curr != NULL) {
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ed      	bne.n	8003a6c <ush_node_get_by_path+0xaa>
                }

                if (found == false)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <ush_node_get_by_path+0xfc>
                        break;
                
                if (i == levels)
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d101      	bne.n	8003aa8 <ush_node_get_by_path+0xe6>
                        return curr;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	e00c      	b.n	8003ac2 <ush_node_get_by_path+0x100>

                curr = curr->children;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i <= levels; i++) {
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d9cf      	bls.n	8003a5c <ush_node_get_by_path+0x9a>
 8003abc:	e000      	b.n	8003ac0 <ush_node_get_by_path+0xfe>
                        break;
 8003abe:	bf00      	nop
        }
        

        return NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	46b5      	mov	sp, r6
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3724      	adds	r7, #36	@ 0x24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003ad0 <ush_node_get_absolute_path>:

void ush_node_get_absolute_path(struct ush_object *self, const char *in_path, char *out_path)
{
 8003ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ad4:	b089      	sub	sp, #36	@ 0x24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	466b      	mov	r3, sp
 8003ae0:	461e      	mov	r6, r3
        char abs_path[self->desc->path_max_length];
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	4698      	mov	r8, r3
 8003af6:	4691      	mov	r9, r2
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	461c      	mov	r4, r3
 8003b16:	4615      	mov	r5, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	3307      	adds	r3, #7
 8003b30:	08db      	lsrs	r3, r3, #3
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	ebad 0d03 	sub.w	sp, sp, r3
 8003b38:	466b      	mov	r3, sp
 8003b3a:	3300      	adds	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]

        USH_ASSERT(self != NULL);
        USH_ASSERT(in_path != NULL);
        USH_ASSERT(out_path != NULL);

        if (in_path[0] == '/') {
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b2f      	cmp	r3, #47	@ 0x2f
 8003b44:	d104      	bne.n	8003b50 <ush_node_get_absolute_path+0x80>
                strcpy(abs_path, in_path);
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	69b8      	ldr	r0, [r7, #24]
 8003b4a:	f005 fbc3 	bl	80092d4 <strcpy>
 8003b4e:	e020      	b.n	8003b92 <ush_node_get_absolute_path+0xc2>
        } else {
                strcpy(abs_path, self->current_node->path);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4619      	mov	r1, r3
 8003b58:	69b8      	ldr	r0, [r7, #24]
 8003b5a:	f005 fbbb 	bl	80092d4 <strcpy>
                if (strcmp(self->current_node->path, "/") != 0)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4919      	ldr	r1, [pc, #100]	@ (8003bcc <ush_node_get_absolute_path+0xfc>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fafa 	bl	8000160 <strcmp>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <ush_node_get_absolute_path+0xba>
                        strcat(abs_path, "/");
 8003b72:	69b8      	ldr	r0, [r7, #24]
 8003b74:	f7fc faec 	bl	8000150 <strlen>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	4413      	add	r3, r2
 8003b80:	4912      	ldr	r1, [pc, #72]	@ (8003bcc <ush_node_get_absolute_path+0xfc>)
 8003b82:	461a      	mov	r2, r3
 8003b84:	460b      	mov	r3, r1
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	8013      	strh	r3, [r2, #0]
                strcat(abs_path, in_path);
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	69b8      	ldr	r0, [r7, #24]
 8003b8e:	f005 fb2d 	bl	80091ec <strcat>
        }

        size_t abs_path_len = strlen(abs_path);
 8003b92:	69b8      	ldr	r0, [r7, #24]
 8003b94:	f7fc fadc 	bl	8000150 <strlen>
 8003b98:	6178      	str	r0, [r7, #20]
        if ((abs_path_len > 1) && (abs_path[abs_path_len - 1] == '/'))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d90a      	bls.n	8003bb6 <ush_node_get_absolute_path+0xe6>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	2b2f      	cmp	r3, #47	@ 0x2f
 8003baa:	d104      	bne.n	8003bb6 <ush_node_get_absolute_path+0xe6>
                abs_path[abs_path_len - 1] = '\0';
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	54d1      	strb	r1, [r2, r3]

        ush_utils_get_collapse_path(abs_path, out_path);
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	69b8      	ldr	r0, [r7, #24]
 8003bba:	f000 fcb1 	bl	8004520 <ush_utils_get_collapse_path>
 8003bbe:	46b5      	mov	sp, r6
}
 8003bc0:	bf00      	nop
 8003bc2:	3724      	adds	r7, #36	@ 0x24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bca:	bf00      	nop
 8003bcc:	0800aab0 	.word	0x0800aab0

08003bd0 <ush_node_get_parent_by_path>:
#include "inc/ush_utils.h"

#include <string.h>

struct ush_node_object* ush_node_get_parent_by_path(struct ush_object *self, const char *path)
{
 8003bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
 8003bdc:	466b      	mov	r3, sp
 8003bde:	461e      	mov	r6, r3
        USH_ASSERT(self != NULL);
        USH_ASSERT(path != NULL);

        size_t path_len = strlen(path);
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f7fc fab5 	bl	8000150 <strlen>
 8003be6:	6178      	str	r0, [r7, #20]
        char path_parent[path_len + 1];
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	460b      	mov	r3, r1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4688      	mov	r8, r1
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	461d      	mov	r5, r3
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	00eb      	lsls	r3, r5, #3
 8003c1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c20:	00e2      	lsls	r2, r4, #3
 8003c22:	1dcb      	adds	r3, r1, #7
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	ebad 0d03 	sub.w	sp, sp, r3
 8003c2c:	466b      	mov	r3, sp
 8003c2e:	3300      	adds	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
        memcpy(path_parent, path, path_len + 1);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	461a      	mov	r2, r3
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f005 fb3c 	bl	80092b8 <memcpy>

        ush_utils_path_upper(path_parent);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fddd 	bl	8004800 <ush_utils_path_upper>
        if (path_parent[0] == '\0')
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <ush_node_get_parent_by_path+0x82>
                return NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e004      	b.n	8003c5c <ush_node_get_parent_by_path+0x8c>
        
        return ush_node_get_by_path(self, path_parent);
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff feb4 	bl	80039c2 <ush_node_get_by_path>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	46b5      	mov	sp, r6
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003c68 <ush_parse_finish>:
#include "inc/ush.h"

#include <string.h>

void ush_parse_finish(struct ush_object *self)
{
 8003c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	466b      	mov	r3, sp
 8003c74:	461e      	mov	r6, r3
        USH_ASSERT(self != NULL);

        char *argv[self->args_count + 1];
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	2300      	movs	r3, #0
 8003c84:	4688      	mov	r8, r1
 8003c86:	4699      	mov	r9, r3
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003c94:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003c98:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	016b      	lsls	r3, r5, #5
 8003cac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003cb0:	0162      	lsls	r2, r4, #5
 8003cb2:	008b      	lsls	r3, r1, #2
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	ebad 0d03 	sub.w	sp, sp, r3
 8003cbe:	466b      	mov	r3, sp
 8003cc0:	3303      	adds	r3, #3
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
        int argc;

        argc = ush_parse_get_args(self, argv);
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8a4 	bl	8003e18 <ush_parse_get_args>
 8003cd0:	60f8      	str	r0, [r7, #12]
        if (argc == 0)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d032      	beq.n	8003d3e <ush_parse_finish+0xd6>
                return;

        /* C standard says 'argv[argc] shall be a null pointer' */
        argv[argc] = NULL;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        if (self->desc->exec != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <ush_parse_finish+0x94>
                self->desc->exec(self, NULL, argc, argv);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69dc      	ldr	r4, [r3, #28]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	47a0      	blx	r4

        struct ush_file_descriptor const *file = ush_file_find_by_name(self, argv[0]);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fd8e 	bl	8003824 <ush_file_find_by_name>
 8003d08:	60b8      	str	r0, [r7, #8]
        if (file == NULL) {
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <ush_parse_finish+0xb2>
                ush_print_status(self, USH_STATUS_ERROR_COMMAND_SYNTAX_ERROR);
 8003d10:	2105      	movs	r1, #5
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff f9d0 	bl	80030b8 <ush_print_status>
                return;
 8003d18:	e011      	b.n	8003d3e <ush_parse_finish+0xd6>
        }

        if (file->exec == NULL) {
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <ush_parse_finish+0xc4>
                ush_print_status(self, USH_STATUS_ERROR_FILE_NOT_EXECUTABLE);
 8003d22:	2107      	movs	r1, #7
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff f9c7 	bl	80030b8 <ush_print_status>
                return;
 8003d2a:	e008      	b.n	8003d3e <ush_parse_finish+0xd6>
        }
        
        file->exec(self, file, argc, argv);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	68dc      	ldr	r4, [r3, #12]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	47a0      	blx	r4
 8003d3a:	46b5      	mov	sp, r6
 8003d3c:	e000      	b.n	8003d40 <ush_parse_finish+0xd8>
                return;
 8003d3e:	46b5      	mov	sp, r6
}
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003d48 <ush_parse_service>:

bool ush_parse_service(struct ush_object *self)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	791b      	ldrb	r3, [r3, #4]
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d005      	beq.n	8003d68 <ush_parse_service+0x20>
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	db0b      	blt.n	8003d78 <ush_parse_service+0x30>
 8003d60:	3b0a      	subs	r3, #10
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d808      	bhi.n	8003d78 <ush_parse_service+0x30>
 8003d66:	e003      	b.n	8003d70 <ush_parse_service+0x28>
        case USH_STATE_PARSE_PREPARE:
                ush_parse_start(self);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f83c 	bl	8003de6 <ush_parse_start>
                break;
 8003d6e:	e006      	b.n	8003d7e <ush_parse_service+0x36>
        case USH_STATE_PARSE_SEARCH_ARG:
        case USH_STATE_PARSE_QUOTE_ARG:
        case USH_STATE_PARSE_STANDARD_ARG:
                ush_parse_char(self);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f809 	bl	8003d88 <ush_parse_char>
                break;
 8003d76:	e002      	b.n	8003d7e <ush_parse_service+0x36>
        default:
                processed = false;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
                break;
 8003d7c:	bf00      	nop
        }

        return processed;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <ush_parse_char>:

#include "inc/ush_internal.h"
#include "inc/ush_preconfig.h"

void ush_parse_char(struct ush_object *self)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        char ch = self->desc->input_buffer[self->in_pos++];
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	1c58      	adds	r0, r3, #1
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	6188      	str	r0, [r1, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	73fb      	strb	r3, [r7, #15]

        if (ch == '\n' || ch == '\r') {
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b0a      	cmp	r3, #10
 8003daa:	d002      	beq.n	8003db2 <ush_parse_char+0x2a>
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b0d      	cmp	r3, #13
 8003db0:	d111      	bne.n	8003dd6 <ush_parse_char+0x4e>
                self->desc->input_buffer[self->out_pos++] = '\0';
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	1c58      	adds	r0, r3, #1
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	61c8      	str	r0, [r1, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
                self->state = USH_STATE_RESET_PROMPT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	711a      	strb	r2, [r3, #4]
                ush_parse_finish(self);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff4a 	bl	8003c68 <ush_parse_finish>
                return;
 8003dd4:	e004      	b.n	8003de0 <ush_parse_char+0x58>
        }

        ush_parse_char_standard(self, ch);
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f84f 	bl	8003e7e <ush_parse_char_standard>
}
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <ush_parse_start>:
#include "inc/ush_preconfig.h"

#include <string.h>

void ush_parse_start(struct ush_object *self)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        self->in_pos = 0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
        self->out_pos = 0;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
        self->args_count = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	621a      	str	r2, [r3, #32]
        self->escape_flag = false;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        self->state = USH_STATE_PARSE_SEARCH_ARG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	220a      	movs	r2, #10
 8003e0c:	711a      	strb	r2, [r3, #4]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <ush_parse_get_args>:

int ush_parse_get_args(struct ush_object *self, char* *argv)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
        char *ptr = self->desc->input_buffer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]
        int argc = self->args_count;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	60fb      	str	r3, [r7, #12]

        if (argv == NULL)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <ush_parse_get_args+0x22>
                return argc;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e01d      	b.n	8003e76 <ush_parse_get_args+0x5e>

        for (int i = 0; i < argc; i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e015      	b.n	8003e6c <ush_parse_get_args+0x54>
                argv[i] = ptr;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]
                ptr += strlen(argv[i]) + 1;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc f97a 	bl	8000150 <strlen>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	3301      	adds	r3, #1
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < argc; i++) {
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	dbe5      	blt.n	8003e40 <ush_parse_get_args+0x28>
        }

        return argc;        
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <ush_parse_char_standard>:

void ush_parse_char_standard(struct ush_object *self, char ch)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	70fb      	strb	r3, [r7, #3]
        switch (self->state) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d07b      	beq.n	8003f8a <ush_parse_char_standard+0x10c>
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	f300 80cb 	bgt.w	800402e <ush_parse_char_standard+0x1b0>
 8003e98:	2b0a      	cmp	r3, #10
 8003e9a:	d002      	beq.n	8003ea2 <ush_parse_char_standard+0x24>
 8003e9c:	2b0b      	cmp	r3, #11
 8003e9e:	d035      	beq.n	8003f0c <ush_parse_char_standard+0x8e>
                        break;
                }
                break;
        default:
                USH_ASSERT(false);
                break;
 8003ea0:	e0c5      	b.n	800402e <ush_parse_char_standard+0x1b0>
                switch (ch) {
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	2b5c      	cmp	r3, #92	@ 0x5c
 8003ea6:	d00e      	beq.n	8003ec6 <ush_parse_char_standard+0x48>
 8003ea8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003eaa:	dc19      	bgt.n	8003ee0 <ush_parse_char_standard+0x62>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d02b      	beq.n	8003f08 <ush_parse_char_standard+0x8a>
 8003eb0:	2b22      	cmp	r3, #34	@ 0x22
 8003eb2:	d115      	bne.n	8003ee0 <ush_parse_char_standard+0x62>
                        self->args_count++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	621a      	str	r2, [r3, #32]
                        self->state = USH_STATE_PARSE_QUOTE_ARG;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	220b      	movs	r2, #11
 8003ec2:	711a      	strb	r2, [r3, #4]
                        break;
 8003ec4:	e021      	b.n	8003f0a <ush_parse_char_standard+0x8c>
                        self->escape_flag = true;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        self->args_count++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]
                        self->state = USH_STATE_PARSE_STANDARD_ARG;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	220c      	movs	r2, #12
 8003edc:	711a      	strb	r2, [r3, #4]
                        break;
 8003ede:	e014      	b.n	8003f0a <ush_parse_char_standard+0x8c>
                        self->desc->input_buffer[self->out_pos++] = ch;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	1c58      	adds	r0, r3, #1
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	61c8      	str	r0, [r1, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	701a      	strb	r2, [r3, #0]
                        self->args_count++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]
                        self->state = USH_STATE_PARSE_STANDARD_ARG;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	220c      	movs	r2, #12
 8003f04:	711a      	strb	r2, [r3, #4]
                        break;
 8003f06:	e000      	b.n	8003f0a <ush_parse_char_standard+0x8c>
                        break;
 8003f08:	bf00      	nop
                break;
 8003f0a:	e091      	b.n	8004030 <ush_parse_char_standard+0x1b2>
                if (self->escape_flag != false) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01d      	beq.n	8003f52 <ush_parse_char_standard+0xd4>
                        if (ch == 'x')
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	2b78      	cmp	r3, #120	@ 0x78
 8003f1a:	d10a      	bne.n	8003f32 <ush_parse_char_standard+0xb4>
                                self->desc->input_buffer[self->out_pos++] = '\\';
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	1c58      	adds	r0, r3, #1
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	61c8      	str	r0, [r1, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	225c      	movs	r2, #92	@ 0x5c
 8003f30:	701a      	strb	r2, [r3, #0]
                        self->desc->input_buffer[self->out_pos++] = ch;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	1c58      	adds	r0, r3, #1
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	61c8      	str	r0, [r1, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	701a      	strb	r2, [r3, #0]
                        self->escape_flag = false;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003f50:	e06e      	b.n	8004030 <ush_parse_char_standard+0x1b2>
                switch (ch) {
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	2b22      	cmp	r3, #34	@ 0x22
 8003f56:	d002      	beq.n	8003f5e <ush_parse_char_standard+0xe0>
 8003f58:	2b5c      	cmp	r3, #92	@ 0x5c
 8003f5a:	d004      	beq.n	8003f66 <ush_parse_char_standard+0xe8>
 8003f5c:	e008      	b.n	8003f70 <ush_parse_char_standard+0xf2>
                        self->state = USH_STATE_PARSE_STANDARD_ARG;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	220c      	movs	r2, #12
 8003f62:	711a      	strb	r2, [r3, #4]
                        break;
 8003f64:	e010      	b.n	8003f88 <ush_parse_char_standard+0x10a>
                        self->escape_flag = true;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003f6e:	e00b      	b.n	8003f88 <ush_parse_char_standard+0x10a>
                        self->desc->input_buffer[self->out_pos++] = ch;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	1c58      	adds	r0, r3, #1
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	61c8      	str	r0, [r1, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	701a      	strb	r2, [r3, #0]
                        break;
 8003f86:	bf00      	nop
                break;
 8003f88:	e052      	b.n	8004030 <ush_parse_char_standard+0x1b2>
                if (self->escape_flag != false) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01d      	beq.n	8003fd0 <ush_parse_char_standard+0x152>
                        if (ch == 'x')
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b78      	cmp	r3, #120	@ 0x78
 8003f98:	d10a      	bne.n	8003fb0 <ush_parse_char_standard+0x132>
                                self->desc->input_buffer[self->out_pos++] = '\\';
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	1c58      	adds	r0, r3, #1
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	61c8      	str	r0, [r1, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	225c      	movs	r2, #92	@ 0x5c
 8003fae:	701a      	strb	r2, [r3, #0]
                        self->desc->input_buffer[self->out_pos++] = ch;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	1c58      	adds	r0, r3, #1
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	61c8      	str	r0, [r1, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	701a      	strb	r2, [r3, #0]
                        self->escape_flag = false;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003fce:	e02f      	b.n	8004030 <ush_parse_char_standard+0x1b2>
                switch (ch) {
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b5c      	cmp	r3, #92	@ 0x5c
 8003fd4:	d019      	beq.n	800400a <ush_parse_char_standard+0x18c>
 8003fd6:	2b5c      	cmp	r3, #92	@ 0x5c
 8003fd8:	dc1c      	bgt.n	8004014 <ush_parse_char_standard+0x196>
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d002      	beq.n	8003fe4 <ush_parse_char_standard+0x166>
 8003fde:	2b22      	cmp	r3, #34	@ 0x22
 8003fe0:	d00f      	beq.n	8004002 <ush_parse_char_standard+0x184>
 8003fe2:	e017      	b.n	8004014 <ush_parse_char_standard+0x196>
                        self->desc->input_buffer[self->out_pos++] = '\0';
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	1c58      	adds	r0, r3, #1
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	61c8      	str	r0, [r1, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
                        self->state = USH_STATE_PARSE_SEARCH_ARG;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	711a      	strb	r2, [r3, #4]
                        break;
 8004000:	e014      	b.n	800402c <ush_parse_char_standard+0x1ae>
                        self->state = USH_STATE_PARSE_QUOTE_ARG;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	220b      	movs	r2, #11
 8004006:	711a      	strb	r2, [r3, #4]
                        break;
 8004008:	e010      	b.n	800402c <ush_parse_char_standard+0x1ae>
                        self->escape_flag = true;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8004012:	e00b      	b.n	800402c <ush_parse_char_standard+0x1ae>
                        self->desc->input_buffer[self->out_pos++] = ch;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	1c58      	adds	r0, r3, #1
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	61c8      	str	r0, [r1, #28]
 8004024:	4413      	add	r3, r2
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	701a      	strb	r2, [r3, #0]
                        break;
 800402a:	bf00      	nop
                break;
 800402c:	e000      	b.n	8004030 <ush_parse_char_standard+0x1b2>
                break;
 800402e:	bf00      	nop
        }
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <ush_process_start>:
#include "inc/ush_internal.h"
#include "inc/ush_types.h"
#include "inc/ush_preconfig.h"

void ush_process_start(struct ush_object *self, const struct ush_file_descriptor *file)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
        USH_ASSERT(self != NULL);
        USH_ASSERT(file != NULL);
        
        self->process_file = file;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
        self->state = USH_STATE_PROCESS_START;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	220e      	movs	r2, #14
 800404e:	711a      	strb	r2, [r3, #4]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <ush_process_service>:

bool ush_process_service(struct ush_object *self)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	791b      	ldrb	r3, [r3, #4]
 800406a:	3b0e      	subs	r3, #14
 800406c:	2b02      	cmp	r3, #2
 800406e:	d811      	bhi.n	8004094 <ush_process_service+0x3a>
        case USH_STATE_PROCESS_START:
        case USH_STATE_PROCESS_SERVICE:
        case USH_STATE_PROCESS_FINISH:
                USH_ASSERT(self->process_file != NULL);
                
                if (self->process_file->process == NULL) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <ush_process_service+0x28>
                        self->state = USH_STATE_RESET;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	711a      	strb	r2, [r3, #4]
                        break;
 8004080:	e00b      	b.n	800409a <ush_process_service+0x40>
                }
                self->process_file->process(self, self->process_file);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800408c:	4611      	mov	r1, r2
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
                break;
 8004092:	e002      	b.n	800409a <ush_process_service+0x40>
        default:
                processed = false;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
                break;
 8004098:	bf00      	nop
        }

        return processed;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <ush_prompt_start>:
#include "inc/ush_internal.h"

#include <string.h>

void ush_prompt_start(struct ush_object *self, ush_state_t prompt_next_state)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
        self->state = USH_STATE_PROMPT_PREFIX;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	711a      	strb	r2, [r3, #4]
        self->prompt_next_state = prompt_next_state;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	719a      	strb	r2, [r3, #6]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
	...

080040c8 <ush_prompt_service>:

bool ush_prompt_service(struct ush_object *self)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	3b02      	subs	r3, #2
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d836      	bhi.n	800414c <ush_prompt_service+0x84>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <ush_prompt_service+0x1c>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f9 	.word	0x080040f9
 80040e8:	08004105 	.word	0x08004105
 80040ec:	08004117 	.word	0x08004117
 80040f0:	08004123 	.word	0x08004123
 80040f4:	0800413d 	.word	0x0800413d
        case USH_STATE_PROMPT_PREFIX:
                ush_write_pointer(self, USH_SHELL_FONT_COLOR_MAGENTA "[", USH_STATE_PROMPT_HOST);
 80040f8:	2203      	movs	r2, #3
 80040fa:	4918      	ldr	r1, [pc, #96]	@ (800415c <ush_prompt_service+0x94>)
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fd17 	bl	8004b30 <ush_write_pointer>
                break;
 8004102:	e026      	b.n	8004152 <ush_prompt_service+0x8a>
        case USH_STATE_PROMPT_HOST:
                ush_write_pointer(self, self->desc->hostname, USH_STATE_PROMPT_SPACE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2204      	movs	r2, #4
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fd0e 	bl	8004b30 <ush_write_pointer>
                break;
 8004114:	e01d      	b.n	8004152 <ush_prompt_service+0x8a>
        case USH_STATE_PROMPT_SPACE:
                ush_write_pointer(self, " ", USH_STATE_PROMPT_PATH);
 8004116:	2205      	movs	r2, #5
 8004118:	4911      	ldr	r1, [pc, #68]	@ (8004160 <ush_prompt_service+0x98>)
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fd08 	bl	8004b30 <ush_write_pointer>
                break;
 8004120:	e017      	b.n	8004152 <ush_prompt_service+0x8a>
        case USH_STATE_PROMPT_PATH: {
                char *path = ush_utils_path_last(self->current_node->path);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb98 	bl	800485e <ush_utils_path_last>
 800412e:	60b8      	str	r0, [r7, #8]
                ush_write_pointer(self, (char*)path, USH_STATE_PROMPT_SUFFIX);
 8004130:	2206      	movs	r2, #6
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fcfb 	bl	8004b30 <ush_write_pointer>
                break;
 800413a:	e00a      	b.n	8004152 <ush_prompt_service+0x8a>
        }
        case USH_STATE_PROMPT_SUFFIX:
                ush_write_pointer(self, "]$ " USH_SHELL_FONT_STYLE_RESET, self->prompt_next_state);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	799b      	ldrb	r3, [r3, #6]
 8004140:	461a      	mov	r2, r3
 8004142:	4908      	ldr	r1, [pc, #32]	@ (8004164 <ush_prompt_service+0x9c>)
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fcf3 	bl	8004b30 <ush_write_pointer>
                break;
 800414a:	e002      	b.n	8004152 <ush_prompt_service+0x8a>
        default:
                processed = false;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
                break;
 8004150:	bf00      	nop
        }

        return processed;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	0800aab4 	.word	0x0800aab4
 8004160:	0800aabc 	.word	0x0800aabc
 8004164:	0800aac0 	.word	0x0800aac0

08004168 <ush_read_service>:
#include "inc/ush_internal.h"

bool ush_read_service(struct ush_object *self, bool *read)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
        USH_ASSERT(self != NULL);

        bool processed = true;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	791b      	ldrb	r3, [r3, #4]
 800417a:	2b07      	cmp	r3, #7
 800417c:	d002      	beq.n	8004184 <ush_read_service+0x1c>
 800417e:	2b08      	cmp	r3, #8
 8004180:	d004      	beq.n	800418c <ush_read_service+0x24>
 8004182:	e00b      	b.n	800419c <ush_read_service+0x34>
        case USH_STATE_READ_PREPARE:
                ush_read_start(self);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f94f 	bl	8004428 <ush_read_start>
                break;
 800418a:	e00a      	b.n	80041a2 <ush_read_service+0x3a>
        case USH_STATE_READ_CHAR:
                *read = ush_read_char(self);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f80d 	bl	80041ac <ush_read_char>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	701a      	strb	r2, [r3, #0]
                break;
 800419a:	e002      	b.n	80041a2 <ush_read_service+0x3a>
        default:
                processed = false;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
                break;
 80041a0:	bf00      	nop
        }

        return processed;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <ush_read_char>:

#include "inc/ush_internal.h"
#include "inc/ush_preconfig.h"

bool ush_read_char(struct ush_object *self)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        char ch;
        bool echo = true;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]

        if (self->desc->io->read(self, &ch) == 0)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f107 020e 	add.w	r2, r7, #14
 80041c4:	4611      	mov	r1, r2
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <ush_read_char+0x28>
                return false;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e07a      	b.n	80042ca <ush_read_char+0x11e>
        
        switch (ch) {
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b1b      	cmp	r3, #27
 80041d8:	dc3a      	bgt.n	8004250 <ush_read_char+0xa4>
 80041da:	2b03      	cmp	r3, #3
 80041dc:	db64      	blt.n	80042a8 <ush_read_char+0xfc>
 80041de:	3b03      	subs	r3, #3
 80041e0:	2b18      	cmp	r3, #24
 80041e2:	d861      	bhi.n	80042a8 <ush_read_char+0xfc>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <ush_read_char+0x40>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004257 	.word	0x08004257
 80041f0:	080042a9 	.word	0x080042a9
 80041f4:	080042a9 	.word	0x080042a9
 80041f8:	080042a9 	.word	0x080042a9
 80041fc:	080042a9 	.word	0x080042a9
 8004200:	08004267 	.word	0x08004267
 8004204:	08004291 	.word	0x08004291
 8004208:	080042a9 	.word	0x080042a9
 800420c:	080042a9 	.word	0x080042a9
 8004210:	080042a9 	.word	0x080042a9
 8004214:	080042a9 	.word	0x080042a9
 8004218:	080042a9 	.word	0x080042a9
 800421c:	080042a9 	.word	0x080042a9
 8004220:	080042a9 	.word	0x080042a9
 8004224:	080042a9 	.word	0x080042a9
 8004228:	080042a9 	.word	0x080042a9
 800422c:	080042a9 	.word	0x080042a9
 8004230:	080042a9 	.word	0x080042a9
 8004234:	080042a9 	.word	0x080042a9
 8004238:	080042a9 	.word	0x080042a9
 800423c:	080042a9 	.word	0x080042a9
 8004240:	080042a9 	.word	0x080042a9
 8004244:	080042a9 	.word	0x080042a9
 8004248:	080042a9 	.word	0x080042a9
 800424c:	0800429d 	.word	0x0800429d
 8004250:	2b7f      	cmp	r3, #127	@ 0x7f
 8004252:	d008      	beq.n	8004266 <ush_read_char+0xba>
 8004254:	e028      	b.n	80042a8 <ush_read_char+0xfc>
        case '\x03':
                /* ctrl+c */
                ush_write_pointer(self, "^C", USH_STATE_RESET);
 8004256:	2200      	movs	r2, #0
 8004258:	491e      	ldr	r1, [pc, #120]	@ (80042d4 <ush_read_char+0x128>)
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fc68 	bl	8004b30 <ush_write_pointer>
                echo = false;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
                break;
 8004264:	e028      	b.n	80042b8 <ush_read_char+0x10c>
        case '\x08':
        case '\x7F':
                /* backspace */
                if (self->in_pos > 0) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <ush_read_char+0xde>
                        self->in_pos--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	1e5a      	subs	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
                        self->desc->input_buffer[self->in_pos] = '\0';
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	4413      	add	r3, r2
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
                } else {
                        echo = false;
                }
                break;
 8004288:	e016      	b.n	80042b8 <ush_read_char+0x10c>
                        echo = false;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
                break;
 800428e:	e013      	b.n	80042b8 <ush_read_char+0x10c>
        case '\x09':
                /* tab */
#if USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE == 1      
                ush_autocomp_start(self);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff f886 	bl	80033a2 <ush_autocomp_start>
#endif /* USH_CONFIG_ENABLE_FEATURE_AUTOCOMPLETE */
                echo = false;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
                break;
 800429a:	e00d      	b.n	80042b8 <ush_read_char+0x10c>
        case '\x1B':
                /* escape */
                self->ansi_escape_state = 1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	615a      	str	r2, [r3, #20]
                echo = false;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
                break;
 80042a6:	e007      	b.n	80042b8 <ush_read_char+0x10c>
        default:
                echo = ush_read_char_by_escape_state(self, ch);
 80042a8:	7bbb      	ldrb	r3, [r7, #14]
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f86e 	bl	800438e <ush_read_char_by_escape_state>
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
                break;
 80042b6:	bf00      	nop
        }

        if (echo != false)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <ush_read_char+0x11c>
                ush_read_echo_service(self, ch);
 80042be:	7bbb      	ldrb	r3, [r7, #14]
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f808 	bl	80042d8 <ush_read_echo_service>
        
        return true;
 80042c8:	2301      	movs	r3, #1
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	0800aac8 	.word	0x0800aac8

080042d8 <ush_read_echo_service>:
*/

#include "inc/ush_internal.h"

void ush_read_echo_service(struct ush_object *self, char ch)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
        switch (ch) {
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e8:	d017      	beq.n	800431a <ush_read_echo_service+0x42>
 80042ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80042ec:	dc2d      	bgt.n	800434a <ush_read_echo_service+0x72>
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d013      	beq.n	800431a <ush_read_echo_service+0x42>
 80042f2:	2b0d      	cmp	r3, #13
 80042f4:	d129      	bne.n	800434a <ush_read_echo_service+0x72>
        case '\r':
                self->desc->output_buffer[0] = ch;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[1] = '\n';
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	220a      	movs	r2, #10
 800430a:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[2] = '\0';
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	3302      	adds	r3, #2
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
                break;
 8004318:	e023      	b.n	8004362 <ush_read_echo_service+0x8a>
        case '\x08':
        case '\x7F':
                self->desc->output_buffer[0] = '\x08';
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2208      	movs	r2, #8
 8004322:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[1] = ' ';
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	2220      	movs	r2, #32
 800432e:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[2] = '\x08';
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	3302      	adds	r3, #2
 8004338:	2208      	movs	r2, #8
 800433a:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[3] = '\0';
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	3303      	adds	r3, #3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
                break;
 8004348:	e00b      	b.n	8004362 <ush_read_echo_service+0x8a>
        default:
                self->desc->output_buffer[0] = ch;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	701a      	strb	r2, [r3, #0]
                self->desc->output_buffer[1] = '\0';
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	3301      	adds	r3, #1
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
                break;
 8004360:	bf00      	nop
        }

        ush_state_t next = (ch == '\r' || ch == '\n') ? USH_STATE_PARSE_PREPARE : USH_STATE_READ_CHAR;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	2b0d      	cmp	r3, #13
 8004366:	d002      	beq.n	800436e <ush_read_echo_service+0x96>
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b0a      	cmp	r3, #10
 800436c:	d101      	bne.n	8004372 <ush_read_echo_service+0x9a>
 800436e:	2309      	movs	r3, #9
 8004370:	e000      	b.n	8004374 <ush_read_echo_service+0x9c>
 8004372:	2308      	movs	r3, #8
 8004374:	73fb      	strb	r3, [r7, #15]
        ush_write_pointer(self, self->desc->output_buffer, next);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fbd5 	bl	8004b30 <ush_write_pointer>
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <ush_read_char_by_escape_state>:

bool ush_read_char_by_escape_state(struct ush_object *self, char ch)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
        bool echo = true;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]

        if (self->ansi_escape_state == 0) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <ush_read_char_by_escape_state+0x54>
                self->desc->input_buffer[self->in_pos++] = ch;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	1c58      	adds	r0, r3, #1
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	6188      	str	r0, [r1, #24]
 80043b6:	4413      	add	r3, r2
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	701a      	strb	r2, [r3, #0]
                if (self->in_pos >= self->desc->input_buffer_size)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <ush_read_char_by_escape_state+0x42>
                        self->in_pos = 0;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
                self->desc->input_buffer[self->in_pos] = '\0';
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e01c      	b.n	800441c <ush_read_char_by_escape_state+0x8e>
        } else if (self->ansi_escape_state == 1) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10f      	bne.n	800440a <ush_read_char_by_escape_state+0x7c>
                /* normal or ctrl */
                if (ch == '\x5B' || ch == '\x4F') {
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80043ee:	d002      	beq.n	80043f6 <ush_read_char_by_escape_state+0x68>
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80043f4:	d103      	bne.n	80043fe <ush_read_char_by_escape_state+0x70>
                        self->ansi_escape_state = 2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	615a      	str	r2, [r3, #20]
 80043fc:	e002      	b.n	8004404 <ush_read_char_by_escape_state+0x76>
                } else {
                        self->ansi_escape_state = 0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	615a      	str	r2, [r3, #20]
                }
                echo = false;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e008      	b.n	800441c <ush_read_char_by_escape_state+0x8e>
        } else if (self->ansi_escape_state == 2) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d104      	bne.n	800441c <ush_read_char_by_escape_state+0x8e>
                } else if (ch == '\x43') {
                        /* right */
                } else if (ch == '\x44') {
                        /* left */
                }
                self->ansi_escape_state = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
                echo = false;
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
        }

        return echo;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <ush_read_start>:

void ush_read_start(struct ush_object *self)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        self->in_pos = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
        self->desc->input_buffer[self->in_pos] = '\0';
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4413      	add	r3, r2
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
        self->state = USH_STATE_READ_CHAR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2208      	movs	r2, #8
 800444a:	711a      	strb	r2, [r3, #4]
        self->ansi_escape_state = 0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	615a      	str	r2, [r3, #20]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <ush_reset>:

        self->state = USH_STATE_RESET;
}

void ush_reset(struct ush_object *self)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);
        
        self->current_node = self->root;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
        ush_write_pointer(self, USH_NAME " " USH_VERSION "\r\n", USH_STATE_RESET_PROMPT);
 800446c:	2201      	movs	r2, #1
 800446e:	4904      	ldr	r1, [pc, #16]	@ (8004480 <ush_reset+0x24>)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fb5d 	bl	8004b30 <ush_write_pointer>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	0800aacc 	.word	0x0800aacc

08004484 <ush_reset_service>:

bool ush_reset_service(struct ush_object *self)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	791b      	ldrb	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <ush_reset_service+0x1a>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d006      	beq.n	80044aa <ush_reset_service+0x26>
 800449c:	e00a      	b.n	80044b4 <ush_reset_service+0x30>
        case USH_STATE_RESET:
                ush_write_pointer(self, "\r\n", USH_STATE_RESET_PROMPT);
 800449e:	2201      	movs	r2, #1
 80044a0:	4908      	ldr	r1, [pc, #32]	@ (80044c4 <ush_reset_service+0x40>)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fb44 	bl	8004b30 <ush_write_pointer>
                break;
 80044a8:	e007      	b.n	80044ba <ush_reset_service+0x36>
        case USH_STATE_RESET_PROMPT:
                ush_prompt_start(self, USH_STATE_READ_PREPARE);
 80044aa:	2107      	movs	r1, #7
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fdf9 	bl	80040a4 <ush_prompt_start>
                break;
 80044b2:	e002      	b.n	80044ba <ush_reset_service+0x36>
        default:
                processed = false;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
                break;
 80044b8:	bf00      	nop
        }

        return processed;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	0800aadc 	.word	0x0800aadc

080044c8 <ush_utils_join_path>:
#include "inc/ush_types.h"

#include <string.h>

void ush_utils_join_path(const char *in_path, const char *name, char *out_path)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
        USH_ASSERT(in_path != NULL);

        strcpy(out_path, in_path);
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f004 fefc 	bl	80092d4 <strcpy>
        
        if (strcmp(out_path, "/") == 0) {
 80044dc:	490f      	ldr	r1, [pc, #60]	@ (800451c <ush_utils_join_path+0x54>)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fb fe3e 	bl	8000160 <strcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <ush_utils_join_path+0x2c>
                strcat(out_path, name);
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f004 fe7d 	bl	80091ec <strcat>
        } else {
                strcat(out_path, "/");
                strcat(out_path, name);
        }
}
 80044f2:	e00f      	b.n	8004514 <ush_utils_join_path+0x4c>
                strcat(out_path, "/");
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fb fe2b 	bl	8000150 <strlen>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	4906      	ldr	r1, [pc, #24]	@ (800451c <ush_utils_join_path+0x54>)
 8004504:	461a      	mov	r2, r3
 8004506:	460b      	mov	r3, r1
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	8013      	strh	r3, [r2, #0]
                strcat(out_path, name);
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f004 fe6c 	bl	80091ec <strcat>
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	0800aae0 	.word	0x0800aae0

08004520 <ush_utils_get_collapse_path>:

void ush_utils_get_collapse_path(char *in_path, char *out_path)
{
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	b091      	sub	sp, #68	@ 0x44
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	466b      	mov	r3, sp
 800452e:	461e      	mov	r6, r3
        USH_ASSERT(in_path != NULL);
        USH_ASSERT(out_path != NULL);

        strcpy(out_path, in_path);
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	f004 fece 	bl	80092d4 <strcpy>

        if (strcmp(in_path, "/") == 0)
 8004538:	497d      	ldr	r1, [pc, #500]	@ (8004730 <ush_utils_get_collapse_path+0x210>)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7fb fe10 	bl	8000160 <strcmp>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80ee 	beq.w	8004724 <ush_utils_get_collapse_path+0x204>
                return;

        size_t levels = ush_utils_get_path_levels_count(in_path);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f92d 	bl	80047a8 <ush_utils_get_path_levels_count>
 800454e:	62b8      	str	r0, [r7, #40]	@ 0x28
        char *nodes[levels];
 8004550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004552:	460b      	mov	r3, r1
 8004554:	3b01      	subs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
 8004558:	2300      	movs	r3, #0
 800455a:	6039      	str	r1, [r7, #0]
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	0143      	lsls	r3, r0, #5
 800456a:	6838      	ldr	r0, [r7, #0]
 800456c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004570:	6838      	ldr	r0, [r7, #0]
 8004572:	0142      	lsls	r2, r0, #5
 8004574:	2300      	movs	r3, #0
 8004576:	468a      	mov	sl, r1
 8004578:	469b      	mov	fp, r3
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8004586:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800458a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	3307      	adds	r3, #7
 8004592:	08db      	lsrs	r3, r3, #3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	ebad 0d03 	sub.w	sp, sp, r3
 800459a:	466b      	mov	r3, sp
 800459c:	3303      	adds	r3, #3
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	623b      	str	r3, [r7, #32]
        size_t index = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int state = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (1) {
                char ch = *in_path;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	77fb      	strb	r3, [r7, #31]
                if (state == 0) {
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <ush_utils_get_collapse_path+0xb0>
                        if (ch == '\0')
 80045b8:	7ffb      	ldrb	r3, [r7, #31]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d020      	beq.n	8004600 <ush_utils_get_collapse_path+0xe0>
                                break;

                        if (ch == '/') {
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80045c2:	d119      	bne.n	80045f8 <ush_utils_get_collapse_path+0xd8>
                                *in_path = '\0';
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
                                state = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ce:	e013      	b.n	80045f8 <ush_utils_get_collapse_path+0xd8>
                        }
                } else {
                        if (ch == '\0') {
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <ush_utils_get_collapse_path+0xc6>
                                nodes[index++] = in_path;
 80045d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                break;
 80045e4:	e00d      	b.n	8004602 <ush_utils_get_collapse_path+0xe2>
                        }
                        nodes[index++] = in_path;
 80045e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        state = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                in_path++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
        while (1) {
 80045fe:	e7d5      	b.n	80045ac <ush_utils_get_collapse_path+0x8c>
                                break;
 8004600:	bf00      	nop
        }

        char *nodes_out[levels];
 8004602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004604:	460b      	mov	r3, r1
 8004606:	3b01      	subs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	2300      	movs	r3, #0
 800460c:	4688      	mov	r8, r1
 800460e:	4699      	mov	r9, r3
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800461c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8004620:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8004624:	2300      	movs	r3, #0
 8004626:	460c      	mov	r4, r1
 8004628:	461d      	mov	r5, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	016b      	lsls	r3, r5, #5
 8004634:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004638:	0162      	lsls	r2, r4, #5
 800463a:	008b      	lsls	r3, r1, #2
 800463c:	3307      	adds	r3, #7
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	ebad 0d03 	sub.w	sp, sp, r3
 8004646:	466b      	mov	r3, sp
 8004648:	3303      	adds	r3, #3
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	617b      	str	r3, [r7, #20]
        size_t count = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
        for (size_t i = 0; i < index; i++) {
 8004654:	2300      	movs	r3, #0
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
 8004658:	e02d      	b.n	80046b6 <ush_utils_get_collapse_path+0x196>
                if (strcmp(nodes[i], "..") == 0) {
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	4934      	ldr	r1, [pc, #208]	@ (8004734 <ush_utils_get_collapse_path+0x214>)
 8004664:	4618      	mov	r0, r3
 8004666:	f7fb fd7b 	bl	8000160 <strcmp>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <ush_utils_get_collapse_path+0x15e>
                        if (count > 0)
 8004670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d019      	beq.n	80046aa <ush_utils_get_collapse_path+0x18a>
                                count--;
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	3b01      	subs	r3, #1
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
                        continue;
 800467c:	e015      	b.n	80046aa <ush_utils_get_collapse_path+0x18a>
                } else if (strcmp(nodes[i], ".") == 0) {
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004686:	492c      	ldr	r1, [pc, #176]	@ (8004738 <ush_utils_get_collapse_path+0x218>)
 8004688:	4618      	mov	r0, r3
 800468a:	f7fb fd69 	bl	8000160 <strcmp>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <ush_utils_get_collapse_path+0x18e>
                        continue;
                }
                nodes_out[count++] = nodes[i];
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	637a      	str	r2, [r7, #52]	@ 0x34
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800469e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80046a8:	e002      	b.n	80046b0 <ush_utils_get_collapse_path+0x190>
                        continue;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <ush_utils_get_collapse_path+0x190>
                        continue;
 80046ae:	bf00      	nop
        for (size_t i = 0; i < index; i++) {
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	3301      	adds	r3, #1
 80046b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3cd      	bcc.n	800465a <ush_utils_get_collapse_path+0x13a>
        }

        out_path[0] = '\0';
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
        if (count == 0) {
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10c      	bne.n	80046e4 <ush_utils_get_collapse_path+0x1c4>
                strcat(out_path, "/");
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f7fb fd40 	bl	8000150 <strlen>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4413      	add	r3, r2
 80046d8:	4915      	ldr	r1, [pc, #84]	@ (8004730 <ush_utils_get_collapse_path+0x210>)
 80046da:	461a      	mov	r2, r3
 80046dc:	460b      	mov	r3, r1
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	8013      	strh	r3, [r2, #0]
                return;
 80046e2:	e01f      	b.n	8004724 <ush_utils_get_collapse_path+0x204>
        }

        for (size_t i = 0; i < count; i++) {
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e8:	e016      	b.n	8004718 <ush_utils_get_collapse_path+0x1f8>
                strcat(out_path, "/");
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	f7fb fd30 	bl	8000150 <strlen>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4413      	add	r3, r2
 80046f8:	490d      	ldr	r1, [pc, #52]	@ (8004730 <ush_utils_get_collapse_path+0x210>)
 80046fa:	461a      	mov	r2, r3
 80046fc:	460b      	mov	r3, r1
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	8013      	strh	r3, [r2, #0]
                strcat(out_path, nodes_out[i]);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470a:	4619      	mov	r1, r3
 800470c:	68b8      	ldr	r0, [r7, #8]
 800470e:	f004 fd6d 	bl	80091ec <strcat>
        for (size_t i = 0; i < count; i++) {
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	3301      	adds	r3, #1
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	429a      	cmp	r2, r3
 800471e:	d3e4      	bcc.n	80046ea <ush_utils_get_collapse_path+0x1ca>
 8004720:	46b5      	mov	sp, r6
 8004722:	e000      	b.n	8004726 <ush_utils_get_collapse_path+0x206>
                return;
 8004724:	46b5      	mov	sp, r6
        }
}
 8004726:	3744      	adds	r7, #68	@ 0x44
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	bf00      	nop
 8004730:	0800aae0 	.word	0x0800aae0
 8004734:	0800aae4 	.word	0x0800aae4
 8004738:	0800aae8 	.word	0x0800aae8

0800473c <ush_utils_get_path_level>:

void ush_utils_get_path_level(size_t level, const char *in_path, char *out_path)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
        USH_ASSERT(in_path != NULL);
        USH_ASSERT(out_path != NULL);
        
        if (level == 0) {
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <ush_utils_get_path_level+0x20>
                strcpy(out_path, "/");
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4914      	ldr	r1, [pc, #80]	@ (80047a4 <ush_utils_get_path_level+0x68>)
 8004752:	461a      	mov	r2, r3
 8004754:	460b      	mov	r3, r1
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	8013      	strh	r3, [r2, #0]
                return;
 800475a:	e01e      	b.n	800479a <ush_utils_get_path_level+0x5e>
        }

        size_t i = 1;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
        while ((i <= level) && (*in_path != '\0')) {
 8004760:	e010      	b.n	8004784 <ush_utils_get_path_level+0x48>
                *out_path = *in_path;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	701a      	strb	r2, [r3, #0]
                out_path++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3301      	adds	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
                in_path++;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3301      	adds	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
                if (*in_path == '/')
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b2f      	cmp	r3, #47	@ 0x2f
 800477c:	d102      	bne.n	8004784 <ush_utils_get_path_level+0x48>
                        i++;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3301      	adds	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
        while ((i <= level) && (*in_path != '\0')) {
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d803      	bhi.n	8004794 <ush_utils_get_path_level+0x58>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <ush_utils_get_path_level+0x26>
        }
        *out_path = '\0';
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
}
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	0800aae0 	.word	0x0800aae0

080047a8 <ush_utils_get_path_levels_count>:

size_t ush_utils_get_path_levels_count(const char *path)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
        USH_ASSERT(path != NULL);

        if (strcmp(path, "/") == 0)
 80047b0:	4912      	ldr	r1, [pc, #72]	@ (80047fc <ush_utils_get_path_levels_count+0x54>)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb fcd4 	bl	8000160 <strcmp>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <ush_utils_get_path_levels_count+0x1a>
                return 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	e017      	b.n	80047f2 <ush_utils_get_path_levels_count+0x4a>
        
        if (*path == '\0')
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <ush_utils_get_path_levels_count+0x26>
                return 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e011      	b.n	80047f2 <ush_utils_get_path_levels_count+0x4a>

        size_t count = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
        while (*path) {
 80047d2:	e009      	b.n	80047e8 <ush_utils_get_path_levels_count+0x40>
                path++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3301      	adds	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]
                if (*path == '/')
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b2f      	cmp	r3, #47	@ 0x2f
 80047e0:	d102      	bne.n	80047e8 <ush_utils_get_path_levels_count+0x40>
                        count++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
        while (*path) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <ush_utils_get_path_levels_count+0x2c>
        }

        return count;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	0800aae0 	.word	0x0800aae0

08004800 <ush_utils_path_upper>:

void ush_utils_path_upper(char *path)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
        USH_ASSERT(path != NULL);

        size_t len = strlen(path);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fb fca1 	bl	8000150 <strlen>
 800480e:	60f8      	str	r0, [r7, #12]
        
        if (len == 1) {
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d11d      	bne.n	8004852 <ush_utils_path_upper+0x52>
                path[0] = '\0';
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
                return;
 800481c:	e01c      	b.n	8004858 <ush_utils_path_upper+0x58>
        }

        while (len > 0) {
                len--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b01      	subs	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
                if (path[len] != '/')
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b2f      	cmp	r3, #47	@ 0x2f
 800482e:	d000      	beq.n	8004832 <ush_utils_path_upper+0x32>
                        continue;
 8004830:	e00f      	b.n	8004852 <ush_utils_path_upper+0x52>

                if (len == 0) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <ush_utils_path_upper+0x46>
                        path[len + 1] = '\0';
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
                } else {
                        path[len] = '\0';
                }
                break;
 8004844:	e008      	b.n	8004858 <ush_utils_path_upper+0x58>
                        path[len] = '\0';
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
                break;
 8004850:	e002      	b.n	8004858 <ush_utils_path_upper+0x58>
        while (len > 0) {
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e2      	bne.n	800481e <ush_utils_path_upper+0x1e>
        }
}
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <ush_utils_path_last>:

char* ush_utils_path_last(const char *in_path)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
        USH_ASSERT(in_path != NULL);

        size_t len = strlen(in_path);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fb fc72 	bl	8000150 <strlen>
 800486c:	60f8      	str	r0, [r7, #12]
        size_t i = len;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	617b      	str	r3, [r7, #20]

        char *out = (char*)in_path;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	613b      	str	r3, [r7, #16]

        if (len == 1) 
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d111      	bne.n	80048a0 <ush_utils_path_last+0x42>
                return out;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	e013      	b.n	80048a8 <ush_utils_path_last+0x4a>

        while (i > 0) {
                i--;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3b01      	subs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
                if (in_path[i] != '/')
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004890:	d000      	beq.n	8004894 <ush_utils_path_last+0x36>
                        continue;
 8004892:	e005      	b.n	80048a0 <ush_utils_path_last+0x42>

                out = (char*)&in_path[i + 1];
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3301      	adds	r3, #1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
                break;
 800489e:	e002      	b.n	80048a6 <ush_utils_path_last+0x48>
        while (i > 0) {
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ec      	bne.n	8004880 <ush_utils_path_last+0x22>
        }

        return out;
 80048a6:	693b      	ldr	r3, [r7, #16]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ush_utils_get_last_arg>:

char* ush_utils_get_last_arg(const char *input)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
        USH_ASSERT(input != NULL);

        size_t len = strlen(input);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fb fc49 	bl	8000150 <strlen>
 80048be:	60f8      	str	r0, [r7, #12]

        if (len == 0)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <ush_utils_get_last_arg+0x1a>
                return (char*)input;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	e021      	b.n	800490e <ush_utils_get_last_arg+0x5e>
        
        len--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
        if (input[len] == ' ')
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d114      	bne.n	8004906 <ush_utils_get_last_arg+0x56>
                return (char*)&input[len + 1];
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	e013      	b.n	800490e <ush_utils_get_last_arg+0x5e>

        while (len > 0) {
                char ch = input[len];
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	72fb      	strb	r3, [r7, #11]
                if (ch == ' ')
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d104      	bne.n	8004900 <ush_utils_get_last_arg+0x50>
                        return (char*)&input[len + 1];
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	e006      	b.n	800490e <ush_utils_get_last_arg+0x5e>
                len--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3b01      	subs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
        while (len > 0) {
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ec      	bne.n	80048e6 <ush_utils_get_last_arg+0x36>
        }

        return (char*)input;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <ush_utils_startswith>:

bool ush_utils_startswith(const char *input, char *prefix)
{       
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
        return (strncmp(prefix, input, strlen(prefix)) == 0) ? true : false;
 8004920:	6838      	ldr	r0, [r7, #0]
 8004922:	f7fb fc15 	bl	8000150 <strlen>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	6838      	ldr	r0, [r7, #0]
 800492e:	f004 fc6c 	bl	800920a <strncmp>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <ush_utils_get_status_string>:

const char* ush_utils_get_status_string(ush_status_t status)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
        USH_ASSERT(status < USH_STATUS__TOTAL_NUM);

        switch (status) {
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d837      	bhi.n	80049c8 <ush_utils_get_status_string+0x80>
 8004958:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <ush_utils_get_status_string+0x18>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004995 	.word	0x08004995
 8004964:	08004999 	.word	0x08004999
 8004968:	0800499d 	.word	0x0800499d
 800496c:	080049a1 	.word	0x080049a1
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049a9 	.word	0x080049a9
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049b9 	.word	0x080049b9
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049c5 	.word	0x080049c5
        case USH_STATUS_OK:
                return USH_CONFIG_TRANSLATION_OK;
 8004994:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <ush_utils_get_status_string+0x90>)
 8004996:	e019      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_NODE_NOT_FOUND:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_DIRECTORY_NOT_FOUND;
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <ush_utils_get_status_string+0x94>)
 800499a:	e017      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_NODE_WITH_CHILDS:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_NESTED_DIRECTORIES_EXIST;
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <ush_utils_get_status_string+0x98>)
 800499e:	e015      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_NODE_WITHOUT_PARENT:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_CANNOT_FIND_PARENT_NODE;
 80049a0:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <ush_utils_get_status_string+0x9c>)
 80049a2:	e013      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_NODE_ALREADY_MOUNTED:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_DIRECTORY_ALREADY_MOUNTED;
 80049a4:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <ush_utils_get_status_string+0xa0>)
 80049a6:	e011      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_COMMAND_SYNTAX_ERROR:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_SYNTAX_ERROR;
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <ush_utils_get_status_string+0xa4>)
 80049aa:	e00f      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_WRONG_ARGUMENTS;
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <ush_utils_get_status_string+0xa8>)
 80049ae:	e00d      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_NOT_EXECUTABLE:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_FILE_NOT_EXECUTABLE;
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <ush_utils_get_status_string+0xac>)
 80049b2:	e00b      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_NOT_WRITABLE:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_FILE_NOT_WRITABLE;
 80049b4:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <ush_utils_get_status_string+0xb0>)
 80049b6:	e009      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_NOT_READABLE:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_FILE_NOT_READABLE;
 80049b8:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <ush_utils_get_status_string+0xb4>)
 80049ba:	e007      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_NO_HELP:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_NO_HELP_AVAILABLE;
 80049bc:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <ush_utils_get_status_string+0xb8>)
 80049be:	e005      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_NOT_FOUND:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_FILE_NOT_FOUND;
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <ush_utils_get_status_string+0xbc>)
 80049c2:	e003      	b.n	80049cc <ush_utils_get_status_string+0x84>
        case USH_STATUS_ERROR_FILE_READ_ONLY:
                return USH_CONFIG_TRANSLATION_ERROR ": " USH_CONFIG_TRANSLATION_READ_ONLY_FILE;
 80049c4:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <ush_utils_get_status_string+0xc0>)
 80049c6:	e001      	b.n	80049cc <ush_utils_get_status_string+0x84>
        default:
                break;
 80049c8:	bf00      	nop
        }

        return USH_CONFIG_TRANSLATION_ERROR;
 80049ca:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <ush_utils_get_status_string+0xc4>)
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	0800aaec 	.word	0x0800aaec
 80049dc:	0800aaf0 	.word	0x0800aaf0
 80049e0:	0800ab0c 	.word	0x0800ab0c
 80049e4:	0800ab2c 	.word	0x0800ab2c
 80049e8:	0800ab4c 	.word	0x0800ab4c
 80049ec:	0800ab70 	.word	0x0800ab70
 80049f0:	0800ab84 	.word	0x0800ab84
 80049f4:	0800ab9c 	.word	0x0800ab9c
 80049f8:	0800abb8 	.word	0x0800abb8
 80049fc:	0800abd4 	.word	0x0800abd4
 8004a00:	0800abf0 	.word	0x0800abf0
 8004a04:	0800ac0c 	.word	0x0800ac0c
 8004a08:	0800ac24 	.word	0x0800ac24
 8004a0c:	0800ac3c 	.word	0x0800ac3c

08004a10 <hex_to_dec>:
{
        return ((ch >= 0x20) && (ch <= 0x7E));
}

static uint8_t hex_to_dec(char ch)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
        if (ch >= '0' && ch <= '9') {
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004a1e:	d906      	bls.n	8004a2e <hex_to_dec+0x1e>
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	2b39      	cmp	r3, #57	@ 0x39
 8004a24:	d803      	bhi.n	8004a2e <hex_to_dec+0x1e>
                return (uint8_t)(ch - '0');
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	3b30      	subs	r3, #48	@ 0x30
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e014      	b.n	8004a58 <hex_to_dec+0x48>
        } else if (ch >= 'A' && ch <= 'F') {
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d906      	bls.n	8004a42 <hex_to_dec+0x32>
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	2b46      	cmp	r3, #70	@ 0x46
 8004a38:	d803      	bhi.n	8004a42 <hex_to_dec+0x32>
                return (uint8_t)(ch - 'A') + 10;
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	3b37      	subs	r3, #55	@ 0x37
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e00a      	b.n	8004a58 <hex_to_dec+0x48>
        } else if (ch >= 'a' && ch <= 'f') {
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d906      	bls.n	8004a56 <hex_to_dec+0x46>
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b66      	cmp	r3, #102	@ 0x66
 8004a4c:	d803      	bhi.n	8004a56 <hex_to_dec+0x46>
                return (uint8_t)(ch - 'a') + 10;
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	3b57      	subs	r3, #87	@ 0x57
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e000      	b.n	8004a58 <hex_to_dec+0x48>
        }
        return 0;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <ush_utils_decode_ascii>:

size_t ush_utils_decode_ascii(char *input, uint8_t *output, size_t max_size)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
        char ch;
        int state = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
        uint8_t val;
        size_t ret_size = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

        while ((*input != '\0') && (ret_size < max_size)) {
 8004a76:	e04e      	b.n	8004b16 <ush_utils_decode_ascii+0xb4>
                ch = *input;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	74fb      	strb	r3, [r7, #19]

                if (state == 0) {
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10e      	bne.n	8004aa2 <ush_utils_decode_ascii+0x40>
                        switch (ch) {
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a88:	d102      	bne.n	8004a90 <ush_utils_decode_ascii+0x2e>
                        case '\\':
                                state = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
                                break;
 8004a8e:	e03f      	b.n	8004b10 <ush_utils_decode_ascii+0xae>
                        default:
                                *output++ = ch;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	60ba      	str	r2, [r7, #8]
 8004a96:	7cfa      	ldrb	r2, [r7, #19]
 8004a98:	701a      	strb	r2, [r3, #0]
                                ret_size++;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
                                break;
 8004aa0:	e036      	b.n	8004b10 <ush_utils_decode_ascii+0xae>
                        }
                } else if (state == 1) {
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d110      	bne.n	8004aca <ush_utils_decode_ascii+0x68>
                        switch (ch) {
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b78      	cmp	r3, #120	@ 0x78
 8004aac:	d102      	bne.n	8004ab4 <ush_utils_decode_ascii+0x52>
                        case 'x':
                                state = 2;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	61fb      	str	r3, [r7, #28]
                                break;
 8004ab2:	e02d      	b.n	8004b10 <ush_utils_decode_ascii+0xae>
                        default:
                                *output++ = ch;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	60ba      	str	r2, [r7, #8]
 8004aba:	7cfa      	ldrb	r2, [r7, #19]
 8004abc:	701a      	strb	r2, [r3, #0]
                                ret_size++;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
                                state = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
                                break;
 8004ac8:	e022      	b.n	8004b10 <ush_utils_decode_ascii+0xae>
                        }
                } else if (state == 2) {
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d109      	bne.n	8004ae4 <ush_utils_decode_ascii+0x82>
                        val = hex_to_dec(ch) << 4;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ff9c 	bl	8004a10 <hex_to_dec>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	76fb      	strb	r3, [r7, #27]
                        state = 3;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e015      	b.n	8004b10 <ush_utils_decode_ascii+0xae>
                } else if (state == 3) {
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d112      	bne.n	8004b10 <ush_utils_decode_ascii+0xae>
                        val |= hex_to_dec(ch);
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff8f 	bl	8004a10 <hex_to_dec>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	7efb      	ldrb	r3, [r7, #27]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	76fb      	strb	r3, [r7, #27]
                        *output++ = val;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	60ba      	str	r2, [r7, #8]
 8004b02:	7efa      	ldrb	r2, [r7, #27]
 8004b04:	701a      	strb	r2, [r3, #0]
                        ret_size++;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
                        state = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
                }
                
                input++;                
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
        while ((*input != '\0') && (ret_size < max_size)) {
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <ush_utils_decode_ascii+0xc4>
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3a8      	bcc.n	8004a78 <ush_utils_decode_ascii+0x16>
        }

        return ret_size;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <ush_write_pointer>:
#include "inc/ush_preconfig.h"

#include <string.h>

void ush_write_pointer(struct ush_object *self, char *text, ush_state_t write_next_state)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
        USH_ASSERT(self != NULL);
        USH_ASSERT(text != NULL);
        USH_ASSERT(write_next_state < USH_STATE__TOTAL_NUM);
        
        ush_write_pointer_bin(self, (uint8_t*)text, strlen(text), write_next_state);
 8004b3e:	68b8      	ldr	r0, [r7, #8]
 8004b40:	f7fb fb06 	bl	8000150 <strlen>
 8004b44:	4602      	mov	r2, r0
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f81a 	bl	8004b84 <ush_write_pointer_bin>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <ush_write_service>:

bool ush_write_service(struct ush_object *self)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        bool processed = true;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	791b      	ldrb	r3, [r3, #4]
 8004b68:	2b0d      	cmp	r3, #13
 8004b6a:	d103      	bne.n	8004b74 <ush_write_service+0x1c>
        case USH_STATE_WRITE_CHAR:
                ush_write_char(self);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f824 	bl	8004bba <ush_write_char>
                break;
 8004b72:	e002      	b.n	8004b7a <ush_write_service+0x22>
        default:
                processed = false;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
                break;
 8004b78:	bf00      	nop
        }

        return processed;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <ush_write_pointer_bin>:

#include "inc/ush_internal.h"
#include "inc/ush_preconfig.h"

void ush_write_pointer_bin(struct ush_object *self, uint8_t *data, size_t data_size, ush_state_t write_next_state)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	70fb      	strb	r3, [r7, #3]
        USH_ASSERT(self != NULL);
        USH_ASSERT(data != NULL);
        USH_ASSERT(write_next_state < USH_STATE__TOTAL_NUM);
        
        self->write_pos = 0;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
        self->write_size = data_size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]
        self->write_buf = (char*)data;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]

        self->state = USH_STATE_WRITE_CHAR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	220d      	movs	r2, #13
 8004ba8:	711a      	strb	r2, [r3, #4]
        self->write_next_state = write_next_state;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	715a      	strb	r2, [r3, #5]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <ush_write_char>:

void ush_write_char(struct ush_object *self)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
        USH_ASSERT(self != NULL);

        if (self->write_pos >= self->write_size) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d304      	bcc.n	8004bd8 <ush_write_char+0x1e>
                self->state = self->write_next_state;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	795a      	ldrb	r2, [r3, #5]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	711a      	strb	r2, [r3, #4]
                return;
 8004bd6:	e018      	b.n	8004c0a <ush_write_char+0x50>
        }

        char ch = self->write_buf[self->write_pos];
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	73fb      	strb	r3, [r7, #15]

        if (self->desc->io->write(self, ch) == 0)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <ush_write_char+0x4e>
                return;
        
        self->write_pos++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]
 8004c06:	e000      	b.n	8004c0a <ush_write_char+0x50>
                return;
 8004c08:	bf00      	nop
}
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <int_to_str>:
#include <stdio.h>
#include "bmp280.h"


// Helper function to convert integer to string
static void int_to_str(int32_t value, char* str) {
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
    // Handle negative numbers
    if (value < 0) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da07      	bge.n	8004c30 <int_to_str+0x20>
        *str++ = '-';
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	603a      	str	r2, [r7, #0]
 8004c26:	222d      	movs	r2, #45	@ 0x2d
 8004c28:	701a      	strb	r2, [r3, #0]
        value = -value;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	607b      	str	r3, [r7, #4]
    }

    // Find length by dividing repeatedly by 10
    int32_t temp = value;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60fb      	str	r3, [r7, #12]
    int len = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
    do {
        len++;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
        temp /= 10;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <int_to_str+0xa0>)
 8004c42:	fb82 1203 	smull	r1, r2, r2, r3
 8004c46:	1092      	asrs	r2, r2, #2
 8004c48:	17db      	asrs	r3, r3, #31
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	60fb      	str	r3, [r7, #12]
    } while (temp > 0);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dcf1      	bgt.n	8004c38 <int_to_str+0x28>

    // Add null terminator
    str[len] = '\0';
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]

    // Fill in digits from right to left
    while (len > 0) {
 8004c5e:	e01d      	b.n	8004c9c <int_to_str+0x8c>
        str[--len] = '0' + (value % 10);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <int_to_str+0xa0>)
 8004c64:	fb83 1302 	smull	r1, r3, r3, r2
 8004c68:	1099      	asrs	r1, r3, #2
 8004c6a:	17d3      	asrs	r3, r2, #31
 8004c6c:	1ac9      	subs	r1, r1, r3
 8004c6e:	460b      	mov	r3, r1
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	1ad1      	subs	r1, r2, r3
 8004c78:	b2ca      	uxtb	r2, r1
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	440b      	add	r3, r1
 8004c86:	3230      	adds	r2, #48	@ 0x30
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <int_to_str+0xa0>)
 8004c90:	fb82 1203 	smull	r1, r2, r2, r3
 8004c94:	1092      	asrs	r2, r2, #2
 8004c96:	17db      	asrs	r3, r3, #31
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	607b      	str	r3, [r7, #4]
    while (len > 0) {
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dcde      	bgt.n	8004c60 <int_to_str+0x50>
    }
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	66666667 	.word	0x66666667

08004cb4 <cmd_read_pressure_callback>:

static void cmd_read_pressure_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b09e      	sub	sp, #120	@ 0x78
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
    if (argc != 1) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d004      	beq.n	8004cd2 <cmd_read_pressure_callback+0x1e>
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8004cc8:	2106      	movs	r1, #6
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7fe f9f4 	bl	80030b8 <ush_print_status>
 8004cd0:	e078      	b.n	8004dc4 <cmd_read_pressure_callback+0x110>
        return;
    }

    float pressure = BMP280_ReadPressure();
 8004cd2:	f7fc fc8b 	bl	80015ec <BMP280_ReadPressure>
 8004cd6:	6778      	str	r0, [r7, #116]	@ 0x74
    int32_t pressure_whole = (int32_t)(pressure / 100);
 8004cd8:	493c      	ldr	r1, [pc, #240]	@ (8004dcc <cmd_read_pressure_callback+0x118>)
 8004cda:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004cdc:	f7fc f8c8 	bl	8000e70 <__aeabi_fdiv>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc f960 	bl	8000fa8 <__aeabi_f2iz>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t pressure_decimal = (int32_t)(pressure) % 100;
 8004cec:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004cee:	f7fc f95b 	bl	8000fa8 <__aeabi_f2iz>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <cmd_read_pressure_callback+0x11c>)
 8004cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8004cfa:	1151      	asrs	r1, r2, #5
 8004cfc:	17da      	asrs	r2, r3, #31
 8004cfe:	1a8a      	subs	r2, r1, r2
 8004d00:	2164      	movs	r1, #100	@ 0x64
 8004d02:	fb01 f202 	mul.w	r2, r1, r2
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	66fb      	str	r3, [r7, #108]	@ 0x6c

    char whole[16];
    char decimal[8];
    int_to_str(pressure_whole, whole);
 8004d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004d12:	f7ff ff7d 	bl	8004c10 <int_to_str>
    int_to_str(pressure_decimal, decimal);
 8004d16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d1e:	f7ff ff77 	bl	8004c10 <int_to_str>

    char buf[64];
    strcpy(buf, "Pressure: ");
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <cmd_read_pressure_callback+0x120>)
 8004d28:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d2a:	c303      	stmia	r3!, {r0, r1}
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	0c12      	lsrs	r2, r2, #16
 8004d32:	701a      	strb	r2, [r3, #0]
    strcat(buf, whole);
 8004d34:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f004 fa54 	bl	80091ec <strcat>
    strcat(buf, ".");
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fb fa01 	bl	8000150 <strlen>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	f107 0314 	add.w	r3, r7, #20
 8004d56:	4413      	add	r3, r2
 8004d58:	491f      	ldr	r1, [pc, #124]	@ (8004dd8 <cmd_read_pressure_callback+0x124>)
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	8013      	strh	r3, [r2, #0]
    // Ensure 2 digits for decimal part
    if (pressure_decimal < 10) {
 8004d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	dc0e      	bgt.n	8004d86 <cmd_read_pressure_callback+0xd2>
        strcat(buf, "0");
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb f9ef 	bl	8000150 <strlen>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	f107 0314 	add.w	r3, r7, #20
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4917      	ldr	r1, [pc, #92]	@ (8004ddc <cmd_read_pressure_callback+0x128>)
 8004d7e:	461a      	mov	r2, r3
 8004d80:	460b      	mov	r3, r1
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	8013      	strh	r3, [r2, #0]
    }
    strcat(buf, decimal);
 8004d86:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fa2b 	bl	80091ec <strcat>
    strcat(buf, " hPa\r\n");
 8004d96:	f107 0314 	add.w	r3, r7, #20
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb f9d8 	bl	8000150 <strlen>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	4413      	add	r3, r2
 8004daa:	4a0d      	ldr	r2, [pc, #52]	@ (8004de0 <cmd_read_pressure_callback+0x12c>)
 8004dac:	6810      	ldr	r0, [r2, #0]
 8004dae:	6018      	str	r0, [r3, #0]
 8004db0:	8891      	ldrh	r1, [r2, #4]
 8004db2:	7992      	ldrb	r2, [r2, #6]
 8004db4:	8099      	strh	r1, [r3, #4]
 8004db6:	719a      	strb	r2, [r3, #6]

    ush_print(self, buf);
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7fe f98e 	bl	80030e0 <ush_print>
}
 8004dc4:	3778      	adds	r7, #120	@ 0x78
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	42c80000 	.word	0x42c80000
 8004dd0:	51eb851f 	.word	0x51eb851f
 8004dd4:	0800ad10 	.word	0x0800ad10
 8004dd8:	0800ad1c 	.word	0x0800ad1c
 8004ddc:	0800ad20 	.word	0x0800ad20
 8004de0:	0800ad24 	.word	0x0800ad24

08004de4 <cmd_read_altitude_callback>:
static void cmd_read_altitude_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b09e      	sub	sp, #120	@ 0x78
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
    if (argc != 1) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d004      	beq.n	8004e02 <cmd_read_altitude_callback+0x1e>
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8004df8:	2106      	movs	r1, #6
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7fe f95c 	bl	80030b8 <ush_print_status>
 8004e00:	e066      	b.n	8004ed0 <cmd_read_altitude_callback+0xec>
        return;
    }

    float altitude = BMP280_ReadAltitude(101325.0f);
 8004e02:	4835      	ldr	r0, [pc, #212]	@ (8004ed8 <cmd_read_altitude_callback+0xf4>)
 8004e04:	f7fc febc 	bl	8001b80 <BMP280_ReadAltitude>
 8004e08:	6778      	str	r0, [r7, #116]	@ 0x74
    int32_t altitude_whole = (int32_t)altitude;
 8004e0a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004e0c:	f7fc f8cc 	bl	8000fa8 <__aeabi_f2iz>
 8004e10:	4603      	mov	r3, r0
 8004e12:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t altitude_decimal = (int32_t)(altitude * 10) % 10;
 8004e14:	4931      	ldr	r1, [pc, #196]	@ (8004edc <cmd_read_altitude_callback+0xf8>)
 8004e16:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004e18:	f7fb ff76 	bl	8000d08 <__aeabi_fmul>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc f8c2 	bl	8000fa8 <__aeabi_f2iz>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee0 <cmd_read_altitude_callback+0xfc>)
 8004e28:	fb83 1302 	smull	r1, r3, r3, r2
 8004e2c:	1099      	asrs	r1, r3, #2
 8004e2e:	17d3      	asrs	r3, r2, #31
 8004e30:	1ac9      	subs	r1, r1, r3
 8004e32:	460b      	mov	r3, r1
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    char whole[16];
    char decimal[8];
    int_to_str(altitude_whole, whole);
 8004e3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004e42:	4619      	mov	r1, r3
 8004e44:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004e46:	f7ff fee3 	bl	8004c10 <int_to_str>
    int_to_str(altitude_decimal, decimal);
 8004e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004e52:	f7ff fedd 	bl	8004c10 <int_to_str>

    char buf[64];
    strcpy(buf, "Altitude: ");
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ee4 <cmd_read_altitude_callback+0x100>)
 8004e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e5e:	c303      	stmia	r3!, {r0, r1}
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	3302      	adds	r3, #2
 8004e64:	0c12      	lsrs	r2, r2, #16
 8004e66:	701a      	strb	r2, [r3, #0]
    strcat(buf, whole);
 8004e68:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f004 f9ba 	bl	80091ec <strcat>
    strcat(buf, ".");
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb f967 	bl	8000150 <strlen>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	4413      	add	r3, r2
 8004e8c:	4916      	ldr	r1, [pc, #88]	@ (8004ee8 <cmd_read_altitude_callback+0x104>)
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	8013      	strh	r3, [r2, #0]
    strcat(buf, decimal);
 8004e96:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004e9a:	f107 0314 	add.w	r3, r7, #20
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f004 f9a3 	bl	80091ec <strcat>
    strcat(buf, " m\r\n");
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb f950 	bl	8000150 <strlen>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	4413      	add	r3, r2
 8004eba:	4a0c      	ldr	r2, [pc, #48]	@ (8004eec <cmd_read_altitude_callback+0x108>)
 8004ebc:	6810      	ldr	r0, [r2, #0]
 8004ebe:	6018      	str	r0, [r3, #0]
 8004ec0:	7912      	ldrb	r2, [r2, #4]
 8004ec2:	711a      	strb	r2, [r3, #4]

    ush_print(self, buf);
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7fe f908 	bl	80030e0 <ush_print>
}
 8004ed0:	3778      	adds	r7, #120	@ 0x78
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	47c5e680 	.word	0x47c5e680
 8004edc:	41200000 	.word	0x41200000
 8004ee0:	66666667 	.word	0x66666667
 8004ee4:	0800ad2c 	.word	0x0800ad2c
 8004ee8:	0800ad1c 	.word	0x0800ad1c
 8004eec:	0800ad38 	.word	0x0800ad38

08004ef0 <cmd_baro_init>:
};

static struct ush_node_object cmd_node_baro;

void cmd_baro_init(struct ush_object *ush)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
    ush_commands_add(ush, &cmd_node_baro, cmd_baro_files,
 8004ef8:	2302      	movs	r3, #2
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <cmd_baro_init+0x1c>)
 8004efc:	4904      	ldr	r1, [pc, #16]	@ (8004f10 <cmd_baro_init+0x20>)
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fe fc69 	bl	80037d6 <ush_commands_add>
                    sizeof(cmd_baro_files) / sizeof(cmd_baro_files[0]));
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	0800b6cc 	.word	0x0800b6cc
 8004f10:	200004f4 	.word	0x200004f4

08004f14 <ush_buildin_cmd_echo_callback>:
#if USH_CONFIG_ENABLE_FEATURE_COMMANDS == 1

#if USH_CONFIG_ENABLE_COMMAND_ECHO == 1

void ush_buildin_cmd_echo_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b08b      	sub	sp, #44	@ 0x2c
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
        (void)argv;
        (void)file;

        struct ush_file_descriptor const *f = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t *data = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	623b      	str	r3, [r7, #32]
        size_t data_size = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]

        switch (argc) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d009      	beq.n	8004f48 <ush_buildin_cmd_echo_callback+0x34>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	dc54      	bgt.n	8004fe4 <ush_buildin_cmd_echo_callback+0xd0>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d03a      	beq.n	8004fb6 <ush_buildin_cmd_echo_callback+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d028      	beq.n	8004f98 <ush_buildin_cmd_echo_callback+0x84>
 8004f46:	e04d      	b.n	8004fe4 <ush_buildin_cmd_echo_callback+0xd0>
        
        case 4:
                if (strcmp(argv[2], ">") != 0) {
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	492a      	ldr	r1, [pc, #168]	@ (8004ff8 <ush_buildin_cmd_echo_callback+0xe4>)
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fb f905 	bl	8000160 <strcmp>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <ush_buildin_cmd_echo_callback+0x52>
                        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8004f5c:	2106      	movs	r1, #6
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7fe f8aa 	bl	80030b8 <ush_print_status>
                        break;
 8004f64:	e043      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
                }
                f = ush_file_find_by_name(self, argv[3]);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7fe fc58 	bl	8003824 <ush_file_find_by_name>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24
                if (f == NULL) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <ush_buildin_cmd_echo_callback+0x72>
                        ush_print_status(self, USH_STATUS_ERROR_FILE_NOT_FOUND);
 8004f7c:	210b      	movs	r1, #11
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7fe f89a 	bl	80030b8 <ush_print_status>
                        break;
 8004f84:	e033      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
                }
                if (f->set_data == NULL) {
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <ush_buildin_cmd_echo_callback+0x84>
                        ush_print_status(self, USH_STATUS_ERROR_FILE_NOT_WRITABLE);
 8004f8e:	2108      	movs	r1, #8
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7fe f891 	bl	80030b8 <ush_print_status>
                        break;
 8004f96:	e02a      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
                }
                /* fallthrough */
        case 2: {
                char *data_in = argv[1];
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	61bb      	str	r3, [r7, #24]
                size_t max_size = strlen(data_in);
 8004f9e:	69b8      	ldr	r0, [r7, #24]
 8004fa0:	f7fb f8d6 	bl	8000150 <strlen>
 8004fa4:	6178      	str	r0, [r7, #20]
                data_size = ush_utils_decode_ascii(data_in, (uint8_t*)data_in, max_size);
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	69b8      	ldr	r0, [r7, #24]
 8004fac:	f7ff fd59 	bl	8004a62 <ush_utils_decode_ascii>
 8004fb0:	61f8      	str	r0, [r7, #28]
                data = (uint8_t*)data_in;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	623b      	str	r3, [r7, #32]
        }
                /* fallthrough */
        case 1:
                if (f != NULL) {
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <ush_buildin_cmd_echo_callback+0xb8>
                        f->set_data(self, f, data, data_size);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	695c      	ldr	r4, [r3, #20]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	47a0      	blx	r4
                                ush_print(self, (char*)data);
                        } else {
                                self->state = USH_STATE_RESET;
                        }
                }
                break;
 8004fca:	e010      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
                        if (data != NULL) {
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <ush_buildin_cmd_echo_callback+0xc8>
                                ush_print(self, (char*)data);
 8004fd2:	6a39      	ldr	r1, [r7, #32]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7fe f883 	bl	80030e0 <ush_print>
                break;
 8004fda:	e008      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
                                self->state = USH_STATE_RESET;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	711a      	strb	r2, [r3, #4]
                break;
 8004fe2:	e004      	b.n	8004fee <ush_buildin_cmd_echo_callback+0xda>
        default:
                ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8004fe4:	2106      	movs	r1, #6
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7fe f866 	bl	80030b8 <ush_print_status>
                break;
 8004fec:	bf00      	nop
        }
}
 8004fee:	bf00      	nop
 8004ff0:	372c      	adds	r7, #44	@ 0x2c
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd90      	pop	{r4, r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	0800ada0 	.word	0x0800ada0

08004ffc <cmd_gps_init_callback>:
extern I2C_HandleTypeDef hi2c1;

static bool gps_initialized = false;
static bool continuous_mode = false;

static void cmd_gps_init_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
    if (argc != 2) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d004      	beq.n	800501a <cmd_gps_init_callback+0x1e>
        ush_print(self, "Usage: gps_init <uart|i2c>\r\n");
 8005010:	4920      	ldr	r1, [pc, #128]	@ (8005094 <cmd_gps_init_callback+0x98>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7fe f864 	bl	80030e0 <ush_print>
        return;
 8005018:	e038      	b.n	800508c <cmd_gps_init_callback+0x90>
    }

    bool init_success = false;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    if (strcmp(argv[1], "uart") == 0) {
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	491c      	ldr	r1, [pc, #112]	@ (8005098 <cmd_gps_init_callback+0x9c>)
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb f89a 	bl	8000160 <strcmp>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <cmd_gps_init_callback+0x48>
        init_success = sam_m8q_init_uart(&huart1);
 8005032:	481a      	ldr	r0, [pc, #104]	@ (800509c <cmd_gps_init_callback+0xa0>)
 8005034:	f7fd fa34 	bl	80024a0 <sam_m8q_init_uart>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]
        sam_m8q_set_debug(true);
 800503c:	2001      	movs	r0, #1
 800503e:	f7fd fa1f 	bl	8002480 <sam_m8q_set_debug>
 8005042:	e014      	b.n	800506e <cmd_gps_init_callback+0x72>
    } else if (strcmp(argv[1], "i2c") == 0) {
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4915      	ldr	r1, [pc, #84]	@ (80050a0 <cmd_gps_init_callback+0xa4>)
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb f887 	bl	8000160 <strcmp>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <cmd_gps_init_callback+0x68>
        init_success = sam_m8q_init_i2c(&hi2c1);
 8005058:	4812      	ldr	r0, [pc, #72]	@ (80050a4 <cmd_gps_init_callback+0xa8>)
 800505a:	f7fd fa43 	bl	80024e4 <sam_m8q_init_i2c>
 800505e:	4603      	mov	r3, r0
 8005060:	75fb      	strb	r3, [r7, #23]
 8005062:	e004      	b.n	800506e <cmd_gps_init_callback+0x72>
    } else {
        ush_print(self, "Invalid interface. Use 'uart' or 'i2c'\r\n");
 8005064:	4910      	ldr	r1, [pc, #64]	@ (80050a8 <cmd_gps_init_callback+0xac>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7fe f83a 	bl	80030e0 <ush_print>
        return;
 800506c:	e00e      	b.n	800508c <cmd_gps_init_callback+0x90>
    }

    if (init_success) {
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <cmd_gps_init_callback+0x88>
        gps_initialized = true;
 8005074:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <cmd_gps_init_callback+0xb0>)
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
        ush_print(self, "GPS initialized successfully\r\n");
 800507a:	490d      	ldr	r1, [pc, #52]	@ (80050b0 <cmd_gps_init_callback+0xb4>)
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7fe f82f 	bl	80030e0 <ush_print>
 8005082:	e003      	b.n	800508c <cmd_gps_init_callback+0x90>
    } else {
        ush_print(self, "GPS initialization failed\r\n");
 8005084:	490b      	ldr	r1, [pc, #44]	@ (80050b4 <cmd_gps_init_callback+0xb8>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7fe f82a 	bl	80030e0 <ush_print>
    }
}
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	0800ada4 	.word	0x0800ada4
 8005098:	0800adc4 	.word	0x0800adc4
 800509c:	20000168 	.word	0x20000168
 80050a0:	0800adcc 	.word	0x0800adcc
 80050a4:	200000bc 	.word	0x200000bc
 80050a8:	0800add0 	.word	0x0800add0
 80050ac:	2000050c 	.word	0x2000050c
 80050b0:	0800adfc 	.word	0x0800adfc
 80050b4:	0800ae1c 	.word	0x0800ae1c

080050b8 <cmd_gps_status_callback>:




static void cmd_gps_status_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 80050b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ba:	b0f5      	sub	sp, #468	@ 0x1d4
 80050bc:	af14      	add	r7, sp, #80	@ 0x50
 80050be:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 80050c2:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 80050c6:	6020      	str	r0, [r4, #0]
 80050c8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80050cc:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 80050d0:	6001      	str	r1, [r0, #0]
 80050d2:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80050d6:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 80050da:	600a      	str	r2, [r1, #0]
 80050dc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80050e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80050e4:	6013      	str	r3, [r2, #0]
    if (!gps_initialized) {
 80050e6:	4b93      	ldr	r3, [pc, #588]	@ (8005334 <cmd_gps_status_callback+0x27c>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f083 0301 	eor.w	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <cmd_gps_status_callback+0x4e>
        ush_print(self, "GPS not initialized. Use 'gps_init' first.\r\n");
 80050f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80050f8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80050fc:	498e      	ldr	r1, [pc, #568]	@ (8005338 <cmd_gps_status_callback+0x280>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	f7fd ffee 	bl	80030e0 <ush_print>
 8005104:	e112      	b.n	800532c <cmd_gps_status_callback+0x274>


    sam_m8q_data_t gps_data;
    char buf[256];

    if (sam_m8q_get_data(&gps_data, false)) {
 8005106:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f7fd f9fd 	bl	800250c <sam_m8q_get_data>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80f7 	beq.w	8005308 <cmd_gps_status_callback+0x250>
        // Convert floating point values to fixed-point integers
        int32_t lat_deg = (int32_t)gps_data.latitude;
 800511a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb ff42 	bl	8000fa8 <__aeabi_f2iz>
 8005124:	4603      	mov	r3, r0
 8005126:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
        int32_t lat_min = (int32_t)((gps_data.latitude - lat_deg) * 60000.0f);  // 3 decimal places for minutes
 800512a:	f8d7 413c 	ldr.w	r4, [r7, #316]	@ 0x13c
 800512e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005132:	f7fb fd95 	bl	8000c60 <__aeabi_i2f>
 8005136:	4603      	mov	r3, r0
 8005138:	4619      	mov	r1, r3
 800513a:	4620      	mov	r0, r4
 800513c:	f7fb fcda 	bl	8000af4 <__aeabi_fsub>
 8005140:	4603      	mov	r3, r0
 8005142:	497e      	ldr	r1, [pc, #504]	@ (800533c <cmd_gps_status_callback+0x284>)
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fddf 	bl	8000d08 <__aeabi_fmul>
 800514a:	4603      	mov	r3, r0
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb ff2b 	bl	8000fa8 <__aeabi_f2iz>
 8005152:	4603      	mov	r3, r0
 8005154:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

        int32_t lon_deg = (int32_t)gps_data.longitude;
 8005158:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800515c:	4618      	mov	r0, r3
 800515e:	f7fb ff23 	bl	8000fa8 <__aeabi_f2iz>
 8005162:	4603      	mov	r3, r0
 8005164:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
        int32_t lon_min = (int32_t)((gps_data.longitude - lon_deg) * 60000.0f);
 8005168:	f8d7 4144 	ldr.w	r4, [r7, #324]	@ 0x144
 800516c:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8005170:	f7fb fd76 	bl	8000c60 <__aeabi_i2f>
 8005174:	4603      	mov	r3, r0
 8005176:	4619      	mov	r1, r3
 8005178:	4620      	mov	r0, r4
 800517a:	f7fb fcbb 	bl	8000af4 <__aeabi_fsub>
 800517e:	4603      	mov	r3, r0
 8005180:	496e      	ldr	r1, [pc, #440]	@ (800533c <cmd_gps_status_callback+0x284>)
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb fdc0 	bl	8000d08 <__aeabi_fmul>
 8005188:	4603      	mov	r3, r0
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb ff0c 	bl	8000fa8 <__aeabi_f2iz>
 8005190:	4603      	mov	r3, r0
 8005192:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

        int32_t alt_meters = (int32_t)gps_data.altitude;
 8005196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb ff04 	bl	8000fa8 <__aeabi_f2iz>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
        int32_t alt_cm = (int32_t)((gps_data.altitude - alt_meters) * 100.0f);
 80051a6:	f8d7 414c 	ldr.w	r4, [r7, #332]	@ 0x14c
 80051aa:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80051ae:	f7fb fd57 	bl	8000c60 <__aeabi_i2f>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4619      	mov	r1, r3
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7fb fc9c 	bl	8000af4 <__aeabi_fsub>
 80051bc:	4603      	mov	r3, r0
 80051be:	4960      	ldr	r1, [pc, #384]	@ (8005340 <cmd_gps_status_callback+0x288>)
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb fda1 	bl	8000d08 <__aeabi_fmul>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb feed 	bl	8000fa8 <__aeabi_f2iz>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

        int32_t speed_whole = (int32_t)gps_data.speed;
 80051d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb fee5 	bl	8000fa8 <__aeabi_f2iz>
 80051de:	4603      	mov	r3, r0
 80051e0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        int32_t speed_frac = (int32_t)((gps_data.speed - speed_whole) * 10.0f);
 80051e4:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 80051e8:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 80051ec:	f7fb fd38 	bl	8000c60 <__aeabi_i2f>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4619      	mov	r1, r3
 80051f4:	4620      	mov	r0, r4
 80051f6:	f7fb fc7d 	bl	8000af4 <__aeabi_fsub>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4951      	ldr	r1, [pc, #324]	@ (8005344 <cmd_gps_status_callback+0x28c>)
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb fd82 	bl	8000d08 <__aeabi_fmul>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb fece 	bl	8000fa8 <__aeabi_f2iz>
 800520c:	4603      	mov	r3, r0
 800520e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            "Position: %d deg %d.%03d min %c, %d deg %d.%03d min %c\r\n"
            "Altitude: %d.%02d m\r\n"
            "Speed: %d.%d knots\r\n"
            "Satellites: %d\r\n"
            "Fix Valid: %s\r\n",
            gps_data.hours, gps_data.minutes, gps_data.seconds,
 8005212:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
        snprintf(buf, sizeof(buf),
 8005216:	469c      	mov	ip, r3
            gps_data.hours, gps_data.minutes, gps_data.seconds,
 8005218:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
        snprintf(buf, sizeof(buf),
 800521c:	61fb      	str	r3, [r7, #28]
            gps_data.hours, gps_data.minutes, gps_data.seconds,
 800521e:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
        snprintf(buf, sizeof(buf),
 8005222:	61bb      	str	r3, [r7, #24]
            gps_data.day, gps_data.month, gps_data.year,
 8005224:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
        snprintf(buf, sizeof(buf),
 8005228:	617b      	str	r3, [r7, #20]
            gps_data.day, gps_data.month, gps_data.year,
 800522a:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
        snprintf(buf, sizeof(buf),
 800522e:	613b      	str	r3, [r7, #16]
            gps_data.day, gps_data.month, gps_data.year,
 8005230:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
        snprintf(buf, sizeof(buf),
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800523a:	4a43      	ldr	r2, [pc, #268]	@ (8005348 <cmd_gps_status_callback+0x290>)
 800523c:	fb82 1203 	smull	r1, r2, r2, r3
 8005240:	1192      	asrs	r2, r2, #6
 8005242:	17db      	asrs	r3, r3, #31
 8005244:	1ad5      	subs	r5, r2, r3
 8005246:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800524a:	4a3f      	ldr	r2, [pc, #252]	@ (8005348 <cmd_gps_status_callback+0x290>)
 800524c:	fb82 1203 	smull	r1, r2, r2, r3
 8005250:	1191      	asrs	r1, r2, #6
 8005252:	17da      	asrs	r2, r3, #31
 8005254:	1a88      	subs	r0, r1, r2
 8005256:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800525a:	fb00 f202 	mul.w	r2, r0, r2
 800525e:	1a98      	subs	r0, r3, r2
            lat_deg, lat_min/1000, lat_min%1000, gps_data.lat_direction,
 8005260:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
        snprintf(buf, sizeof(buf),
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800526a:	4a37      	ldr	r2, [pc, #220]	@ (8005348 <cmd_gps_status_callback+0x290>)
 800526c:	fb82 1203 	smull	r1, r2, r2, r3
 8005270:	1192      	asrs	r2, r2, #6
 8005272:	17db      	asrs	r3, r3, #31
 8005274:	1ad6      	subs	r6, r2, r3
 8005276:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800527a:	4a33      	ldr	r2, [pc, #204]	@ (8005348 <cmd_gps_status_callback+0x290>)
 800527c:	fb82 1203 	smull	r1, r2, r2, r3
 8005280:	1191      	asrs	r1, r2, #6
 8005282:	17da      	asrs	r2, r3, #31
 8005284:	1a89      	subs	r1, r1, r2
 8005286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800528a:	fb01 f202 	mul.w	r2, r1, r2
 800528e:	1a99      	subs	r1, r3, r2
            lon_deg, lon_min/1000, lon_min%1000, gps_data.lon_direction,
 8005290:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
        snprintf(buf, sizeof(buf),
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
            alt_meters, alt_cm,
            speed_whole, speed_frac,
            gps_data.satellites,
            gps_data.fix_valid ? "Yes" : "No");
 800529a:	f897 3158 	ldrb.w	r3, [r7, #344]	@ 0x158
        snprintf(buf, sizeof(buf),
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <cmd_gps_status_callback+0x1ee>
 80052a2:	4b2a      	ldr	r3, [pc, #168]	@ (800534c <cmd_gps_status_callback+0x294>)
 80052a4:	e000      	b.n	80052a8 <cmd_gps_status_callback+0x1f0>
 80052a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005350 <cmd_gps_status_callback+0x298>)
 80052a8:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80052ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80052ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80052b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80052b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80052b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80052ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80052c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80052c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80052c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80052cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80052ce:	960a      	str	r6, [sp, #40]	@ 0x28
 80052d0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80052d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	9308      	str	r3, [sp, #32]
 80052da:	9007      	str	r0, [sp, #28]
 80052dc:	9506      	str	r5, [sp, #24]
 80052de:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4663      	mov	r3, ip
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <cmd_gps_status_callback+0x29c>)
 80052fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005300:	4620      	mov	r0, r4
 8005302:	f003 fe9b 	bl	800903c <sniprintf>
 8005306:	e007      	b.n	8005318 <cmd_gps_status_callback+0x260>
    } else {
        snprintf(buf, sizeof(buf), "No new GPS data available\r\n");
 8005308:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800530c:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <cmd_gps_status_callback+0x2a0>)
 800530e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005312:	4618      	mov	r0, r3
 8005314:	f003 fe92 	bl	800903c <sniprintf>
    }

    ush_print(self, buf);
 8005318:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800531c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005320:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005324:	4611      	mov	r1, r2
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	f7fd feda 	bl	80030e0 <ush_print>
}
 800532c:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8005330:	46bd      	mov	sp, r7
 8005332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005334:	2000050c 	.word	0x2000050c
 8005338:	0800ae38 	.word	0x0800ae38
 800533c:	476a6000 	.word	0x476a6000
 8005340:	42c80000 	.word	0x42c80000
 8005344:	41200000 	.word	0x41200000
 8005348:	10624dd3 	.word	0x10624dd3
 800534c:	0800ae68 	.word	0x0800ae68
 8005350:	0800ae6c 	.word	0x0800ae6c
 8005354:	0800ae70 	.word	0x0800ae70
 8005358:	0800af2c 	.word	0x0800af2c

0800535c <cmd_gps_sleep_callback>:

static void cmd_gps_sleep_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
    if (!gps_initialized) {
 800536a:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <cmd_gps_sleep_callback+0x48>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f083 0301 	eor.w	r3, r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <cmd_gps_sleep_callback+0x26>
        ush_print(self, "GPS not initialized. Use 'gps_init' first.\r\n");
 8005378:	490b      	ldr	r1, [pc, #44]	@ (80053a8 <cmd_gps_sleep_callback+0x4c>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7fd feb0 	bl	80030e0 <ush_print>
        return;
 8005380:	e00d      	b.n	800539e <cmd_gps_sleep_callback+0x42>
    }

    if (sam_m8q_sleep()) {
 8005382:	f7fd f8e9 	bl	8002558 <sam_m8q_sleep>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <cmd_gps_sleep_callback+0x3a>
        ush_print(self, "GPS entered sleep mode\r\n");
 800538c:	4907      	ldr	r1, [pc, #28]	@ (80053ac <cmd_gps_sleep_callback+0x50>)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7fd fea6 	bl	80030e0 <ush_print>
 8005394:	e003      	b.n	800539e <cmd_gps_sleep_callback+0x42>
    } else {
        ush_print(self, "Failed to put GPS into sleep mode\r\n");
 8005396:	4906      	ldr	r1, [pc, #24]	@ (80053b0 <cmd_gps_sleep_callback+0x54>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fd fea1 	bl	80030e0 <ush_print>
    }
}
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000050c 	.word	0x2000050c
 80053a8:	0800ae38 	.word	0x0800ae38
 80053ac:	0800af48 	.word	0x0800af48
 80053b0:	0800af64 	.word	0x0800af64

080053b4 <cmd_gps_wake_callback>:

static void cmd_gps_wake_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    if (!gps_initialized) {
 80053c2:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <cmd_gps_wake_callback+0x48>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f083 0301 	eor.w	r3, r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <cmd_gps_wake_callback+0x26>
        ush_print(self, "GPS not initialized. Use 'gps_init' first.\r\n");
 80053d0:	490b      	ldr	r1, [pc, #44]	@ (8005400 <cmd_gps_wake_callback+0x4c>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7fd fe84 	bl	80030e0 <ush_print>
        return;
 80053d8:	e00d      	b.n	80053f6 <cmd_gps_wake_callback+0x42>
    }

    if (sam_m8q_wake()) {
 80053da:	f7fd f8e5 	bl	80025a8 <sam_m8q_wake>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <cmd_gps_wake_callback+0x3a>
        ush_print(self, "GPS woken from sleep mode\r\n");
 80053e4:	4907      	ldr	r1, [pc, #28]	@ (8005404 <cmd_gps_wake_callback+0x50>)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7fd fe7a 	bl	80030e0 <ush_print>
 80053ec:	e003      	b.n	80053f6 <cmd_gps_wake_callback+0x42>
    } else {
        ush_print(self, "Failed to wake GPS from sleep mode\r\n");
 80053ee:	4906      	ldr	r1, [pc, #24]	@ (8005408 <cmd_gps_wake_callback+0x54>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7fd fe75 	bl	80030e0 <ush_print>
    }
}
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	2000050c 	.word	0x2000050c
 8005400:	0800ae38 	.word	0x0800ae38
 8005404:	0800af88 	.word	0x0800af88
 8005408:	0800afa4 	.word	0x0800afa4

0800540c <cmd_gps_monitor_callback>:

static void cmd_gps_monitor_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
    if (!gps_initialized) {
 800541a:	4b1f      	ldr	r3, [pc, #124]	@ (8005498 <cmd_gps_monitor_callback+0x8c>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f083 0301 	eor.w	r3, r3, #1
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <cmd_gps_monitor_callback+0x26>
        ush_print(self, "GPS not initialized. Use 'gps_init' first.\r\n");
 8005428:	491c      	ldr	r1, [pc, #112]	@ (800549c <cmd_gps_monitor_callback+0x90>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7fd fe58 	bl	80030e0 <ush_print>
        return;
 8005430:	e02f      	b.n	8005492 <cmd_gps_monitor_callback+0x86>
    }

    if (argc != 2) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d004      	beq.n	8005442 <cmd_gps_monitor_callback+0x36>
        ush_print(self, "Usage: gps_monitor <on|off>\r\n");
 8005438:	4919      	ldr	r1, [pc, #100]	@ (80054a0 <cmd_gps_monitor_callback+0x94>)
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7fd fe50 	bl	80030e0 <ush_print>
        return;
 8005440:	e027      	b.n	8005492 <cmd_gps_monitor_callback+0x86>
    }

    if (strcmp(argv[1], "on") == 0) {
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4916      	ldr	r1, [pc, #88]	@ (80054a4 <cmd_gps_monitor_callback+0x98>)
 800544a:	4618      	mov	r0, r3
 800544c:	f7fa fe88 	bl	8000160 <strcmp>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d107      	bne.n	8005466 <cmd_gps_monitor_callback+0x5a>
        continuous_mode = true;
 8005456:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <cmd_gps_monitor_callback+0x9c>)
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
        ush_print(self, "GPS monitoring enabled. Use 'gps_monitor off' to stop.\r\n");
 800545c:	4913      	ldr	r1, [pc, #76]	@ (80054ac <cmd_gps_monitor_callback+0xa0>)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7fd fe3e 	bl	80030e0 <ush_print>
 8005464:	e015      	b.n	8005492 <cmd_gps_monitor_callback+0x86>
    } else if (strcmp(argv[1], "off") == 0) {
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	3304      	adds	r3, #4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4910      	ldr	r1, [pc, #64]	@ (80054b0 <cmd_gps_monitor_callback+0xa4>)
 800546e:	4618      	mov	r0, r3
 8005470:	f7fa fe76 	bl	8000160 <strcmp>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <cmd_gps_monitor_callback+0x7e>
        continuous_mode = false;
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <cmd_gps_monitor_callback+0x9c>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
        ush_print(self, "GPS monitoring disabled.\r\n");
 8005480:	490c      	ldr	r1, [pc, #48]	@ (80054b4 <cmd_gps_monitor_callback+0xa8>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7fd fe2c 	bl	80030e0 <ush_print>
 8005488:	e003      	b.n	8005492 <cmd_gps_monitor_callback+0x86>
    } else {
        ush_print(self, "Invalid argument. Use 'on' or 'off'\r\n");
 800548a:	490b      	ldr	r1, [pc, #44]	@ (80054b8 <cmd_gps_monitor_callback+0xac>)
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7fd fe27 	bl	80030e0 <ush_print>
    }
}
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	2000050c 	.word	0x2000050c
 800549c:	0800ae38 	.word	0x0800ae38
 80054a0:	0800afcc 	.word	0x0800afcc
 80054a4:	0800afec 	.word	0x0800afec
 80054a8:	2000050d 	.word	0x2000050d
 80054ac:	0800aff0 	.word	0x0800aff0
 80054b0:	0800b02c 	.word	0x0800b02c
 80054b4:	0800b030 	.word	0x0800b030
 80054b8:	0800b04c 	.word	0x0800b04c

080054bc <gps_monitor_service>:

// This function should be called periodically from the main loop
void gps_monitor_service(struct ush_object *self) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    if (continuous_mode && sam_m8q_data_ready()) {
 80054c4:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <gps_monitor_service+0x30>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <gps_monitor_service+0x26>
 80054cc:	f7fd f894 	bl	80025f8 <sam_m8q_data_ready>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <gps_monitor_service+0x26>
        cmd_gps_status_callback(self, NULL, 1, NULL);
 80054d6:	2300      	movs	r3, #0
 80054d8:	2201      	movs	r2, #1
 80054da:	2100      	movs	r1, #0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fdeb 	bl	80050b8 <cmd_gps_status_callback>
    }
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000050d 	.word	0x2000050d

080054f0 <cmd_gps_raw_callback>:

static void cmd_gps_raw_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	b0f5      	sub	sp, #468	@ 0x1d4
 80054f4:	af14      	add	r7, sp, #80	@ 0x50
 80054f6:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 80054fa:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 80054fe:	6020      	str	r0, [r4, #0]
 8005500:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8005504:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 8005508:	6001      	str	r1, [r0, #0]
 800550a:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800550e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8005512:	600a      	str	r2, [r1, #0]
 8005514:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8005518:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800551c:	6013      	str	r3, [r2, #0]
    sam_m8q_data_t gps_data;
    sam_m8q_get_data(&gps_data, true);  // Force copy regardless of new data flag
 800551e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8005522:	2101      	movs	r1, #1
 8005524:	4618      	mov	r0, r3
 8005526:	f7fc fff1 	bl	800250c <sam_m8q_get_data>

        char buf[256];


            // Convert floating point values to fixed-point integers
            int32_t lat_deg = (int32_t)gps_data.latitude;
 800552a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800552e:	4618      	mov	r0, r3
 8005530:	f7fb fd3a 	bl	8000fa8 <__aeabi_f2iz>
 8005534:	4603      	mov	r3, r0
 8005536:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
            int32_t lat_min = (int32_t)((gps_data.latitude - lat_deg) * 60000.0f);  // 3 decimal places for minutes
 800553a:	f8d7 413c 	ldr.w	r4, [r7, #316]	@ 0x13c
 800553e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005542:	f7fb fb8d 	bl	8000c60 <__aeabi_i2f>
 8005546:	4603      	mov	r3, r0
 8005548:	4619      	mov	r1, r3
 800554a:	4620      	mov	r0, r4
 800554c:	f7fb fad2 	bl	8000af4 <__aeabi_fsub>
 8005550:	4603      	mov	r3, r0
 8005552:	4978      	ldr	r1, [pc, #480]	@ (8005734 <cmd_gps_raw_callback+0x244>)
 8005554:	4618      	mov	r0, r3
 8005556:	f7fb fbd7 	bl	8000d08 <__aeabi_fmul>
 800555a:	4603      	mov	r3, r0
 800555c:	4618      	mov	r0, r3
 800555e:	f7fb fd23 	bl	8000fa8 <__aeabi_f2iz>
 8005562:	4603      	mov	r3, r0
 8005564:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

            int32_t lon_deg = (int32_t)gps_data.longitude;
 8005568:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb fd1b 	bl	8000fa8 <__aeabi_f2iz>
 8005572:	4603      	mov	r3, r0
 8005574:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
            int32_t lon_min = (int32_t)((gps_data.longitude - lon_deg) * 60000.0f);
 8005578:	f8d7 4144 	ldr.w	r4, [r7, #324]	@ 0x144
 800557c:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8005580:	f7fb fb6e 	bl	8000c60 <__aeabi_i2f>
 8005584:	4603      	mov	r3, r0
 8005586:	4619      	mov	r1, r3
 8005588:	4620      	mov	r0, r4
 800558a:	f7fb fab3 	bl	8000af4 <__aeabi_fsub>
 800558e:	4603      	mov	r3, r0
 8005590:	4968      	ldr	r1, [pc, #416]	@ (8005734 <cmd_gps_raw_callback+0x244>)
 8005592:	4618      	mov	r0, r3
 8005594:	f7fb fbb8 	bl	8000d08 <__aeabi_fmul>
 8005598:	4603      	mov	r3, r0
 800559a:	4618      	mov	r0, r3
 800559c:	f7fb fd04 	bl	8000fa8 <__aeabi_f2iz>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

            int32_t alt_meters = (int32_t)gps_data.altitude;
 80055a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fcfc 	bl	8000fa8 <__aeabi_f2iz>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
            int32_t alt_cm = (int32_t)((gps_data.altitude - alt_meters) * 100.0f);
 80055b6:	f8d7 414c 	ldr.w	r4, [r7, #332]	@ 0x14c
 80055ba:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80055be:	f7fb fb4f 	bl	8000c60 <__aeabi_i2f>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4619      	mov	r1, r3
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fb fa94 	bl	8000af4 <__aeabi_fsub>
 80055cc:	4603      	mov	r3, r0
 80055ce:	495a      	ldr	r1, [pc, #360]	@ (8005738 <cmd_gps_raw_callback+0x248>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb fb99 	bl	8000d08 <__aeabi_fmul>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fb fce5 	bl	8000fa8 <__aeabi_f2iz>
 80055de:	4603      	mov	r3, r0
 80055e0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

            int32_t speed_whole = (int32_t)gps_data.speed;
 80055e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fb fcdd 	bl	8000fa8 <__aeabi_f2iz>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
            int32_t speed_frac = (int32_t)((gps_data.speed - speed_whole) * 10.0f);
 80055f4:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 80055f8:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 80055fc:	f7fb fb30 	bl	8000c60 <__aeabi_i2f>
 8005600:	4603      	mov	r3, r0
 8005602:	4619      	mov	r1, r3
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb fa75 	bl	8000af4 <__aeabi_fsub>
 800560a:	4603      	mov	r3, r0
 800560c:	494b      	ldr	r1, [pc, #300]	@ (800573c <cmd_gps_raw_callback+0x24c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7fb fb7a 	bl	8000d08 <__aeabi_fmul>
 8005614:	4603      	mov	r3, r0
 8005616:	4618      	mov	r0, r3
 8005618:	f7fb fcc6 	bl	8000fa8 <__aeabi_f2iz>
 800561c:	4603      	mov	r3, r0
 800561e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
                "Position: %d deg %d.%03d min %c, %d deg %d.%03d min %c\r\n"
                "Altitude: %d.%02d m\r\n"
                "Speed: %d.%d knots\r\n"
                "Satellites: %d\r\n"
                "Fix Valid: %s\r\n",
                gps_data.hours, gps_data.minutes, gps_data.seconds,
 8005622:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
            snprintf(buf, sizeof(buf),
 8005626:	469c      	mov	ip, r3
                gps_data.hours, gps_data.minutes, gps_data.seconds,
 8005628:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
            snprintf(buf, sizeof(buf),
 800562c:	61fb      	str	r3, [r7, #28]
                gps_data.hours, gps_data.minutes, gps_data.seconds,
 800562e:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
            snprintf(buf, sizeof(buf),
 8005632:	61bb      	str	r3, [r7, #24]
                gps_data.day, gps_data.month, gps_data.year,
 8005634:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
            snprintf(buf, sizeof(buf),
 8005638:	617b      	str	r3, [r7, #20]
                gps_data.day, gps_data.month, gps_data.year,
 800563a:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
            snprintf(buf, sizeof(buf),
 800563e:	613b      	str	r3, [r7, #16]
                gps_data.day, gps_data.month, gps_data.year,
 8005640:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
            snprintf(buf, sizeof(buf),
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800564a:	4a3d      	ldr	r2, [pc, #244]	@ (8005740 <cmd_gps_raw_callback+0x250>)
 800564c:	fb82 1203 	smull	r1, r2, r2, r3
 8005650:	1192      	asrs	r2, r2, #6
 8005652:	17db      	asrs	r3, r3, #31
 8005654:	1ad5      	subs	r5, r2, r3
 8005656:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800565a:	4a39      	ldr	r2, [pc, #228]	@ (8005740 <cmd_gps_raw_callback+0x250>)
 800565c:	fb82 1203 	smull	r1, r2, r2, r3
 8005660:	1191      	asrs	r1, r2, #6
 8005662:	17da      	asrs	r2, r3, #31
 8005664:	1a88      	subs	r0, r1, r2
 8005666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800566a:	fb00 f202 	mul.w	r2, r0, r2
 800566e:	1a98      	subs	r0, r3, r2
                lat_deg, lat_min/1000, lat_min%1000, gps_data.lat_direction,
 8005670:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
            snprintf(buf, sizeof(buf),
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800567a:	4a31      	ldr	r2, [pc, #196]	@ (8005740 <cmd_gps_raw_callback+0x250>)
 800567c:	fb82 1203 	smull	r1, r2, r2, r3
 8005680:	1192      	asrs	r2, r2, #6
 8005682:	17db      	asrs	r3, r3, #31
 8005684:	1ad6      	subs	r6, r2, r3
 8005686:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800568a:	4a2d      	ldr	r2, [pc, #180]	@ (8005740 <cmd_gps_raw_callback+0x250>)
 800568c:	fb82 1203 	smull	r1, r2, r2, r3
 8005690:	1191      	asrs	r1, r2, #6
 8005692:	17da      	asrs	r2, r3, #31
 8005694:	1a89      	subs	r1, r1, r2
 8005696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800569a:	fb01 f202 	mul.w	r2, r1, r2
 800569e:	1a99      	subs	r1, r3, r2
                lon_deg, lon_min/1000, lon_min%1000, gps_data.lon_direction,
 80056a0:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
            snprintf(buf, sizeof(buf),
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
                alt_meters, alt_cm,
                speed_whole, speed_frac,
                gps_data.satellites,
                gps_data.fix_valid ? "Yes" : "No");
 80056aa:	f897 3158 	ldrb.w	r3, [r7, #344]	@ 0x158
            snprintf(buf, sizeof(buf),
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <cmd_gps_raw_callback+0x1c6>
 80056b2:	4b24      	ldr	r3, [pc, #144]	@ (8005744 <cmd_gps_raw_callback+0x254>)
 80056b4:	e000      	b.n	80056b8 <cmd_gps_raw_callback+0x1c8>
 80056b6:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <cmd_gps_raw_callback+0x258>)
 80056b8:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80056bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80056be:	9211      	str	r2, [sp, #68]	@ 0x44
 80056c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80056c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80056c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80056ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80056d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80056d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80056d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	930c      	str	r3, [sp, #48]	@ 0x30
 80056dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80056de:	960a      	str	r6, [sp, #40]	@ 0x28
 80056e0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80056e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	9308      	str	r3, [sp, #32]
 80056ea:	9007      	str	r0, [sp, #28]
 80056ec:	9506      	str	r5, [sp, #24]
 80056ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4663      	mov	r3, ip
 800570a:	4a10      	ldr	r2, [pc, #64]	@ (800574c <cmd_gps_raw_callback+0x25c>)
 800570c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005710:	4620      	mov	r0, r4
 8005712:	f003 fc93 	bl	800903c <sniprintf>


        ush_print(self, buf);
 8005716:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800571a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800571e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005722:	4611      	mov	r1, r2
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	f7fd fcdb 	bl	80030e0 <ush_print>
}
 800572a:	bf00      	nop
 800572c:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8005730:	46bd      	mov	sp, r7
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005734:	476a6000 	.word	0x476a6000
 8005738:	42c80000 	.word	0x42c80000
 800573c:	41200000 	.word	0x41200000
 8005740:	10624dd3 	.word	0x10624dd3
 8005744:	0800ae68 	.word	0x0800ae68
 8005748:	0800ae6c 	.word	0x0800ae6c
 800574c:	0800ae70 	.word	0x0800ae70

08005750 <cmd_gps_init>:
};


static struct ush_node_object cmd_node_gps;

void cmd_gps_init(struct ush_object *ush) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
    ush_commands_add(ush, &cmd_node_gps, cmd_gps_files,
 8005758:	2306      	movs	r3, #6
 800575a:	4a04      	ldr	r2, [pc, #16]	@ (800576c <cmd_gps_init+0x1c>)
 800575c:	4904      	ldr	r1, [pc, #16]	@ (8005770 <cmd_gps_init+0x20>)
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fe f839 	bl	80037d6 <ush_commands_add>
                    sizeof(cmd_gps_files) / sizeof(cmd_gps_files[0]));
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	0800b704 	.word	0x0800b704
 8005770:	20000510 	.word	0x20000510

08005774 <ush_buildin_cmd_help_callback>:
#if USH_CONFIG_ENABLE_FEATURE_COMMANDS == 1

#if USH_CONFIG_ENABLE_COMMAND_HELP == 1

void ush_buildin_cmd_help_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
        (void)file;

        switch (argc) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <ush_buildin_cmd_help_callback+0x1c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d00f      	beq.n	80057ae <ush_buildin_cmd_help_callback+0x3a>
 800578e:	e02e      	b.n	80057ee <ush_buildin_cmd_help_callback+0x7a>
        case 1:
                self->process_node = self->commands;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c
                self->process_index = 0;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	659a      	str	r2, [r3, #88]	@ 0x58
                self->process_index_item = 0;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                ush_process_start(self, file);
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7fe fc47 	bl	800403a <ush_process_start>
                break;
 80057ac:	e024      	b.n	80057f8 <ush_buildin_cmd_help_callback+0x84>
        case 2: {
                struct ush_file_descriptor const *f = ush_file_find_by_name(self, argv[1]);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	3304      	adds	r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fe f834 	bl	8003824 <ush_file_find_by_name>
 80057bc:	6178      	str	r0, [r7, #20]
                if (f == NULL) {
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <ush_buildin_cmd_help_callback+0x5a>
                        ush_print_status(self, USH_STATUS_ERROR_FILE_NOT_FOUND);
 80057c4:	210b      	movs	r1, #11
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7fd fc76 	bl	80030b8 <ush_print_status>
                        return;
 80057cc:	e014      	b.n	80057f8 <ush_buildin_cmd_help_callback+0x84>
                }
                if (f->help == NULL) {
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <ush_buildin_cmd_help_callback+0x6c>
                        ush_print_status(self, USH_STATUS_ERROR_FILE_NO_HELP);
 80057d6:	210a      	movs	r1, #10
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7fd fc6d 	bl	80030b8 <ush_print_status>
                        return;
 80057de:	e00b      	b.n	80057f8 <ush_buildin_cmd_help_callback+0x84>
                }
                ush_print_no_newline(self, (char*)f->help);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4619      	mov	r1, r3
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7fd fc88 	bl	80030fc <ush_print_no_newline>
                break;
 80057ec:	e004      	b.n	80057f8 <ush_buildin_cmd_help_callback+0x84>
        }
        default:
                ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 80057ee:	2106      	movs	r1, #6
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7fd fc61 	bl	80030b8 <ush_print_status>
                break;
 80057f6:	bf00      	nop
        }
}
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <ush_buildin_cmd_help_service>:

bool ush_buildin_cmd_help_service(struct ush_object *self, struct ush_file_descriptor const *file)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
        (void)file;

        USH_ASSERT(self != NULL);
        USH_ASSERT(file != NULL);

        bool processed = true;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]

        switch (self->state) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	791b      	ldrb	r3, [r3, #4]
 8005812:	2b0e      	cmp	r3, #14
 8005814:	f040 8082 	bne.w	800591c <ush_buildin_cmd_help_service+0x11c>
        case USH_STATE_PROCESS_START:
                if (self->process_node == NULL) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <ush_buildin_cmd_help_service+0x28>
                        self->state = USH_STATE_RESET_PROMPT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	711a      	strb	r2, [r3, #4]
                        break;
 8005826:	e07c      	b.n	8005922 <ush_buildin_cmd_help_service+0x122>
                }

                if (self->process_index_item >= self->process_node->file_list_size) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d30b      	bcc.n	800584e <ush_buildin_cmd_help_service+0x4e>
                        self->process_index = 0;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	659a      	str	r2, [r3, #88]	@ 0x58
                        self->process_index_item = 0;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	65da      	str	r2, [r3, #92]	@ 0x5c
                        self->process_node = self->process_node->next;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	64da      	str	r2, [r3, #76]	@ 0x4c
                        break;
 800584c:	e069      	b.n	8005922 <ush_buildin_cmd_help_service+0x122>
                }

                struct ush_file_descriptor const *f = &self->process_node->file_list[self->process_index_item];
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	60bb      	str	r3, [r7, #8]
                switch (self->process_index) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005868:	2b02      	cmp	r3, #2
 800586a:	d039      	beq.n	80058e0 <ush_buildin_cmd_help_service+0xe0>
 800586c:	2b02      	cmp	r3, #2
 800586e:	d853      	bhi.n	8005918 <ush_buildin_cmd_help_service+0x118>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <ush_buildin_cmd_help_service+0x7a>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d027      	beq.n	80058c8 <ush_buildin_cmd_help_service+0xc8>
                        self->process_index = 0;
                        self->process_index_item++;
                        break;
                default:
                        USH_ASSERT(false);
                        break;
 8005878:	e04e      	b.n	8005918 <ush_buildin_cmd_help_service+0x118>
                        if (f->description != NULL) {
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <ush_buildin_cmd_help_service+0x9c>
                                sprintf(self->desc->output_buffer, "%-" USH_STRING(USH_CONFIG_FILENAME_ALIGN_SPACE) "s " USH_SHELL_FONT_COLOR_YELLOW "- " , (char*)f->name);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68d8      	ldr	r0, [r3, #12]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	4927      	ldr	r1, [pc, #156]	@ (800592c <ush_buildin_cmd_help_service+0x12c>)
 8005890:	f003 fc08 	bl	80090a4 <siprintf>
                                self->process_index = 1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	659a      	str	r2, [r3, #88]	@ 0x58
 800589a:	e00b      	b.n	80058b4 <ush_buildin_cmd_help_service+0xb4>
                                sprintf(self->desc->output_buffer, "%s", (char*)f->name);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68d8      	ldr	r0, [r3, #12]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	4921      	ldr	r1, [pc, #132]	@ (8005930 <ush_buildin_cmd_help_service+0x130>)
 80058aa:	f003 fbfb 	bl	80090a4 <siprintf>
                                self->process_index = 2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        ush_write_pointer(self, self->desc->output_buffer, self->state);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68d9      	ldr	r1, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	461a      	mov	r2, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff f935 	bl	8004b30 <ush_write_pointer>
                        break;
 80058c6:	e028      	b.n	800591a <ush_buildin_cmd_help_service+0x11a>
                        ush_write_pointer(self, (char*)f->description, self->state);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	791b      	ldrb	r3, [r3, #4]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff f92c 	bl	8004b30 <ush_write_pointer>
                        self->process_index = 2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	659a      	str	r2, [r3, #88]	@ 0x58
                        break;
 80058de:	e01c      	b.n	800591a <ush_buildin_cmd_help_service+0x11a>
                        if (f->description != NULL) {
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <ush_buildin_cmd_help_service+0xf8>
                                ush_write_pointer(self, USH_SHELL_FONT_STYLE_RESET "\r\n", self->state);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4911      	ldr	r1, [pc, #68]	@ (8005934 <ush_buildin_cmd_help_service+0x134>)
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff f91d 	bl	8004b30 <ush_write_pointer>
 80058f6:	e006      	b.n	8005906 <ush_buildin_cmd_help_service+0x106>
                                ush_write_pointer(self, "\r\n", self->state);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	791b      	ldrb	r3, [r3, #4]
 80058fc:	461a      	mov	r2, r3
 80058fe:	490e      	ldr	r1, [pc, #56]	@ (8005938 <ush_buildin_cmd_help_service+0x138>)
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff f915 	bl	8004b30 <ush_write_pointer>
                        self->process_index = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	659a      	str	r2, [r3, #88]	@ 0x58
                        self->process_index_item++;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	65da      	str	r2, [r3, #92]	@ 0x5c
                        break;
 8005916:	e000      	b.n	800591a <ush_buildin_cmd_help_service+0x11a>
                        break;
 8005918:	bf00      	nop
                }
                break;
 800591a:	e002      	b.n	8005922 <ush_buildin_cmd_help_service+0x122>
        default:
                processed = false;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
                break;
 8005920:	bf00      	nop
        }

        return processed;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	0800b1b4 	.word	0x0800b1b4
 8005930:	0800b1c4 	.word	0x0800b1c4
 8005934:	0800b1c8 	.word	0x0800b1c8
 8005938:	0800b1d0 	.word	0x0800b1d0

0800593c <hex_to_str>:
#include "rfm95.h"
#include "main.h"

extern SPI_HandleTypeDef hspi1;

static void hex_to_str(uint8_t value, char* str) {
 800593c:	b4b0      	push	{r4, r5, r7}
 800593e:	b089      	sub	sp, #36	@ 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8005948:	4b16      	ldr	r3, [pc, #88]	@ (80059a4 <hex_to_str+0x68>)
 800594a:	f107 040c 	add.w	r4, r7, #12
 800594e:	461d      	mov	r5, r3
 8005950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	7023      	strb	r3, [r4, #0]
    str[0] = '0';
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2230      	movs	r2, #48	@ 0x30
 800595c:	701a      	strb	r2, [r3, #0]
    str[1] = 'x';
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	2278      	movs	r2, #120	@ 0x78
 8005964:	701a      	strb	r2, [r3, #0]
    str[2] = hex_chars[(value >> 4) & 0xF];
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	3302      	adds	r3, #2
 8005974:	3220      	adds	r2, #32
 8005976:	443a      	add	r2, r7
 8005978:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800597c:	701a      	strb	r2, [r3, #0]
    str[3] = hex_chars[value & 0xF];
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3303      	adds	r3, #3
 8005988:	3220      	adds	r2, #32
 800598a:	443a      	add	r2, r7
 800598c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005990:	701a      	strb	r2, [r3, #0]
    str[4] = '\0';
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	3304      	adds	r3, #4
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	3724      	adds	r7, #36	@ 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bcb0      	pop	{r4, r5, r7}
 80059a2:	4770      	bx	lr
 80059a4:	0800b1d4 	.word	0x0800b1d4

080059a8 <cmd_rfm95_status_callback>:
    char buf[64];
    snprintf(buf, sizeof(buf), "%s: 0x%02X\r\n", reg_name, value);
    ush_print(self, buf);
}

static void cmd_rfm95_status_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 80059b4:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 80059b8:	6020      	str	r0, [r4, #0]
 80059ba:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 80059be:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 80059c2:	6001      	str	r1, [r0, #0]
 80059c4:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 80059c8:	f5a1 7109 	sub.w	r1, r1, #548	@ 0x224
 80059cc:	600a      	str	r2, [r1, #0]
 80059ce:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80059d2:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80059d6:	6013      	str	r3, [r2, #0]
    if (argc != 1) {
 80059d8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80059dc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d008      	beq.n	80059f8 <cmd_rfm95_status_callback+0x50>
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 80059e6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80059ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80059ee:	2106      	movs	r1, #6
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	f7fd fb61 	bl	80030b8 <ush_print_status>
 80059f6:	e307      	b.n	8006008 <cmd_rfm95_status_callback+0x660>
        return;
    }

    // Use a single large buffer for all output
    char output[512] = "";  // Start with empty string
 80059f8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80059fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	3304      	adds	r3, #4
 8005a06:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f003 fc1e 	bl	800924e <memset>
    char hex[8];

    // Version check
    uint8_t version = rfm95_read_reg(RFM95_REG_VERSION);
 8005a12:	2042      	movs	r0, #66	@ 0x42
 8005a14:	f7fc fae8 	bl	8001fe8 <rfm95_read_reg>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
    strcat(output, "Version: ");
 8005a1e:	f107 031c 	add.w	r3, r7, #28
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fa fb94 	bl	8000150 <strlen>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f107 031c 	add.w	r3, r7, #28
 8005a30:	4413      	add	r3, r2
 8005a32:	4971      	ldr	r1, [pc, #452]	@ (8005bf8 <cmd_rfm95_status_callback+0x250>)
 8005a34:	461a      	mov	r2, r3
 8005a36:	460b      	mov	r3, r1
 8005a38:	cb03      	ldmia	r3!, {r0, r1}
 8005a3a:	6010      	str	r0, [r2, #0]
 8005a3c:	6051      	str	r1, [r2, #4]
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	8113      	strh	r3, [r2, #8]
    hex_to_str(version, hex);
 8005a42:	f107 0214 	add.w	r2, r7, #20
 8005a46:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff75 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005a52:	f107 0214 	add.w	r2, r7, #20
 8005a56:	f107 031c 	add.w	r3, r7, #28
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f003 fbc5 	bl	80091ec <strcat>
    strcat(output, " (should be 0x12)\r\n");
 8005a62:	f107 031c 	add.w	r3, r7, #28
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fa fb72 	bl	8000150 <strlen>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	4413      	add	r3, r2
 8005a76:	4a61      	ldr	r2, [pc, #388]	@ (8005bfc <cmd_rfm95_status_callback+0x254>)
 8005a78:	461d      	mov	r5, r3
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7e:	6028      	str	r0, [r5, #0]
 8005a80:	6069      	str	r1, [r5, #4]
 8005a82:	60aa      	str	r2, [r5, #8]
 8005a84:	60eb      	str	r3, [r5, #12]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	6128      	str	r0, [r5, #16]

    // Operation Mode
    uint8_t op_mode = rfm95_read_reg(RFM95_REG_OP_MODE);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7fc faac 	bl	8001fe8 <rfm95_read_reg>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
    strcat(output, "Op Mode: ");
 8005a96:	f107 031c 	add.w	r3, r7, #28
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fa fb58 	bl	8000150 <strlen>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f107 031c 	add.w	r3, r7, #28
 8005aa8:	4413      	add	r3, r2
 8005aaa:	4955      	ldr	r1, [pc, #340]	@ (8005c00 <cmd_rfm95_status_callback+0x258>)
 8005aac:	461a      	mov	r2, r3
 8005aae:	460b      	mov	r3, r1
 8005ab0:	cb03      	ldmia	r3!, {r0, r1}
 8005ab2:	6010      	str	r0, [r2, #0]
 8005ab4:	6051      	str	r1, [r2, #4]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	8113      	strh	r3, [r2, #8]
    hex_to_str(op_mode, hex);
 8005aba:	f107 0214 	add.w	r2, r7, #20
 8005abe:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ff39 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005aca:	f107 0214 	add.w	r2, r7, #20
 8005ace:	f107 031c 	add.w	r3, r7, #28
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f003 fb89 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005ada:	f107 031c 	add.w	r3, r7, #28
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb36 	bl	8000150 <strlen>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	4413      	add	r3, r2
 8005aee:	4a45      	ldr	r2, [pc, #276]	@ (8005c04 <cmd_rfm95_status_callback+0x25c>)
 8005af0:	8811      	ldrh	r1, [r2, #0]
 8005af2:	7892      	ldrb	r2, [r2, #2]
 8005af4:	8019      	strh	r1, [r3, #0]
 8005af6:	709a      	strb	r2, [r3, #2]

    // Current Mode interpretation
    const char* mode_str;
    switch(op_mode & 0x07) {
 8005af8:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	2b07      	cmp	r3, #7
 8005b02:	d833      	bhi.n	8005b6c <cmd_rfm95_status_callback+0x1c4>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <cmd_rfm95_status_callback+0x164>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b55 	.word	0x08005b55
 8005b24:	08005b5d 	.word	0x08005b5d
 8005b28:	08005b65 	.word	0x08005b65
        case 0x00: mode_str = "SLEEP"; break;
 8005b2c:	4b36      	ldr	r3, [pc, #216]	@ (8005c08 <cmd_rfm95_status_callback+0x260>)
 8005b2e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b32:	e01f      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x01: mode_str = "STDBY"; break;
 8005b34:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <cmd_rfm95_status_callback+0x264>)
 8005b36:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b3a:	e01b      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x02: mode_str = "FSTX"; break;
 8005b3c:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <cmd_rfm95_status_callback+0x268>)
 8005b3e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b42:	e017      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x03: mode_str = "TX"; break;
 8005b44:	4b33      	ldr	r3, [pc, #204]	@ (8005c14 <cmd_rfm95_status_callback+0x26c>)
 8005b46:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b4a:	e013      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x04: mode_str = "FSRX"; break;
 8005b4c:	4b32      	ldr	r3, [pc, #200]	@ (8005c18 <cmd_rfm95_status_callback+0x270>)
 8005b4e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b52:	e00f      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x05: mode_str = "RXCONTINUOUS"; break;
 8005b54:	4b31      	ldr	r3, [pc, #196]	@ (8005c1c <cmd_rfm95_status_callback+0x274>)
 8005b56:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b5a:	e00b      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x06: mode_str = "RXSINGLE"; break;
 8005b5c:	4b30      	ldr	r3, [pc, #192]	@ (8005c20 <cmd_rfm95_status_callback+0x278>)
 8005b5e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b62:	e007      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        case 0x07: mode_str = "CAD"; break;
 8005b64:	4b2f      	ldr	r3, [pc, #188]	@ (8005c24 <cmd_rfm95_status_callback+0x27c>)
 8005b66:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b6a:	e003      	b.n	8005b74 <cmd_rfm95_status_callback+0x1cc>
        default: mode_str = "UNKNOWN"; break;
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <cmd_rfm95_status_callback+0x280>)
 8005b6e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005b72:	bf00      	nop
    }
    strcat(output, "Current Mode: ");
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fae9 	bl	8000150 <strlen>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	f107 031c 	add.w	r3, r7, #28
 8005b86:	4413      	add	r3, r2
 8005b88:	4a28      	ldr	r2, [pc, #160]	@ (8005c2c <cmd_rfm95_status_callback+0x284>)
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b90:	6020      	str	r0, [r4, #0]
 8005b92:	6061      	str	r1, [r4, #4]
 8005b94:	60a2      	str	r2, [r4, #8]
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	81a2      	strh	r2, [r4, #12]
 8005b9c:	73a3      	strb	r3, [r4, #14]
    strcat(output, mode_str);
 8005b9e:	f107 031c 	add.w	r3, r7, #28
 8005ba2:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f003 fb20 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005bac:	f107 031c 	add.w	r3, r7, #28
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fa facd 	bl	8000150 <strlen>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f107 031c 	add.w	r3, r7, #28
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a10      	ldr	r2, [pc, #64]	@ (8005c04 <cmd_rfm95_status_callback+0x25c>)
 8005bc2:	8811      	ldrh	r1, [r2, #0]
 8005bc4:	7892      	ldrb	r2, [r2, #2]
 8005bc6:	8019      	strh	r1, [r3, #0]
 8005bc8:	709a      	strb	r2, [r3, #2]

    // LoRa Mode status
    strcat(output, "LoRa Mode: ");
 8005bca:	f107 031c 	add.w	r3, r7, #28
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fa fabe 	bl	8000150 <strlen>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f107 031c 	add.w	r3, r7, #28
 8005bdc:	4413      	add	r3, r2
 8005bde:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <cmd_rfm95_status_callback+0x288>)
 8005be0:	461c      	mov	r4, r3
 8005be2:	4613      	mov	r3, r2
 8005be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005be6:	6020      	str	r0, [r4, #0]
 8005be8:	6061      	str	r1, [r4, #4]
 8005bea:	60a2      	str	r2, [r4, #8]
    strcat(output, (op_mode & 0x80) ? "Yes" : "No");
 8005bec:	f997 3222 	ldrsb.w	r3, [r7, #546]	@ 0x222
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da21      	bge.n	8005c38 <cmd_rfm95_status_callback+0x290>
 8005bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c34 <cmd_rfm95_status_callback+0x28c>)
 8005bf6:	e020      	b.n	8005c3a <cmd_rfm95_status_callback+0x292>
 8005bf8:	0800b1f8 	.word	0x0800b1f8
 8005bfc:	0800b204 	.word	0x0800b204
 8005c00:	0800b218 	.word	0x0800b218
 8005c04:	0800b224 	.word	0x0800b224
 8005c08:	0800b228 	.word	0x0800b228
 8005c0c:	0800b230 	.word	0x0800b230
 8005c10:	0800b238 	.word	0x0800b238
 8005c14:	0800b240 	.word	0x0800b240
 8005c18:	0800b244 	.word	0x0800b244
 8005c1c:	0800b24c 	.word	0x0800b24c
 8005c20:	0800b25c 	.word	0x0800b25c
 8005c24:	0800b268 	.word	0x0800b268
 8005c28:	0800b26c 	.word	0x0800b26c
 8005c2c:	0800b274 	.word	0x0800b274
 8005c30:	0800b284 	.word	0x0800b284
 8005c34:	0800b290 	.word	0x0800b290
 8005c38:	4ae4      	ldr	r2, [pc, #912]	@ (8005fcc <cmd_rfm95_status_callback+0x624>)
 8005c3a:	f107 031c 	add.w	r3, r7, #28
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f003 fad3 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005c46:	f107 031c 	add.w	r3, r7, #28
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fa fa80 	bl	8000150 <strlen>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	f107 031c 	add.w	r3, r7, #28
 8005c58:	4413      	add	r3, r2
 8005c5a:	4add      	ldr	r2, [pc, #884]	@ (8005fd0 <cmd_rfm95_status_callback+0x628>)
 8005c5c:	8811      	ldrh	r1, [r2, #0]
 8005c5e:	7892      	ldrb	r2, [r2, #2]
 8005c60:	8019      	strh	r1, [r3, #0]
 8005c62:	709a      	strb	r2, [r3, #2]

    // Modem configuration
    uint8_t modem_conf1 = rfm95_read_reg(RFM95_REG_MODEM_CONFIG_1);
 8005c64:	201d      	movs	r0, #29
 8005c66:	f7fc f9bf 	bl	8001fe8 <rfm95_read_reg>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
    strcat(output, "Modem Config 1: ");
 8005c70:	f107 031c 	add.w	r3, r7, #28
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fa fa6b 	bl	8000150 <strlen>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f107 031c 	add.w	r3, r7, #28
 8005c82:	4413      	add	r3, r2
 8005c84:	4ad3      	ldr	r2, [pc, #844]	@ (8005fd4 <cmd_rfm95_status_callback+0x62c>)
 8005c86:	461d      	mov	r5, r3
 8005c88:	4614      	mov	r4, r2
 8005c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c8c:	6028      	str	r0, [r5, #0]
 8005c8e:	6069      	str	r1, [r5, #4]
 8005c90:	60aa      	str	r2, [r5, #8]
 8005c92:	60eb      	str	r3, [r5, #12]
 8005c94:	7823      	ldrb	r3, [r4, #0]
 8005c96:	742b      	strb	r3, [r5, #16]
    hex_to_str(modem_conf1, hex);
 8005c98:	f107 0214 	add.w	r2, r7, #20
 8005c9c:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fe4a 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005ca8:	f107 0214 	add.w	r2, r7, #20
 8005cac:	f107 031c 	add.w	r3, r7, #28
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f003 fa9a 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005cb8:	f107 031c 	add.w	r3, r7, #28
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fa fa47 	bl	8000150 <strlen>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f107 031c 	add.w	r3, r7, #28
 8005cca:	4413      	add	r3, r2
 8005ccc:	4ac0      	ldr	r2, [pc, #768]	@ (8005fd0 <cmd_rfm95_status_callback+0x628>)
 8005cce:	8811      	ldrh	r1, [r2, #0]
 8005cd0:	7892      	ldrb	r2, [r2, #2]
 8005cd2:	8019      	strh	r1, [r3, #0]
 8005cd4:	709a      	strb	r2, [r3, #2]

    uint8_t modem_conf2 = rfm95_read_reg(RFM95_REG_MODEM_CONFIG_2);
 8005cd6:	201e      	movs	r0, #30
 8005cd8:	f7fc f986 	bl	8001fe8 <rfm95_read_reg>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
    strcat(output, "Modem Config 2: ");
 8005ce2:	f107 031c 	add.w	r3, r7, #28
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fa fa32 	bl	8000150 <strlen>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f107 031c 	add.w	r3, r7, #28
 8005cf4:	4413      	add	r3, r2
 8005cf6:	4ab8      	ldr	r2, [pc, #736]	@ (8005fd8 <cmd_rfm95_status_callback+0x630>)
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	6069      	str	r1, [r5, #4]
 8005d02:	60aa      	str	r2, [r5, #8]
 8005d04:	60eb      	str	r3, [r5, #12]
 8005d06:	7823      	ldrb	r3, [r4, #0]
 8005d08:	742b      	strb	r3, [r5, #16]
    hex_to_str(modem_conf2, hex);
 8005d0a:	f107 0214 	add.w	r2, r7, #20
 8005d0e:	f897 3220 	ldrb.w	r3, [r7, #544]	@ 0x220
 8005d12:	4611      	mov	r1, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fe11 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005d1a:	f107 0214 	add.w	r2, r7, #20
 8005d1e:	f107 031c 	add.w	r3, r7, #28
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f003 fa61 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005d2a:	f107 031c 	add.w	r3, r7, #28
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fa fa0e 	bl	8000150 <strlen>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	f107 031c 	add.w	r3, r7, #28
 8005d3c:	4413      	add	r3, r2
 8005d3e:	4aa4      	ldr	r2, [pc, #656]	@ (8005fd0 <cmd_rfm95_status_callback+0x628>)
 8005d40:	8811      	ldrh	r1, [r2, #0]
 8005d42:	7892      	ldrb	r2, [r2, #2]
 8005d44:	8019      	strh	r1, [r3, #0]
 8005d46:	709a      	strb	r2, [r3, #2]

    // IRQ Flags
    uint8_t irq_flags = rfm95_read_reg(RFM95_REG_IRQ_FLAGS);
 8005d48:	2012      	movs	r0, #18
 8005d4a:	f7fc f94d 	bl	8001fe8 <rfm95_read_reg>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
    strcat(output, "IRQ Flags: ");
 8005d54:	f107 031c 	add.w	r3, r7, #28
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fa f9f9 	bl	8000150 <strlen>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	f107 031c 	add.w	r3, r7, #28
 8005d66:	4413      	add	r3, r2
 8005d68:	4a9c      	ldr	r2, [pc, #624]	@ (8005fdc <cmd_rfm95_status_callback+0x634>)
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d70:	6020      	str	r0, [r4, #0]
 8005d72:	6061      	str	r1, [r4, #4]
 8005d74:	60a2      	str	r2, [r4, #8]
    hex_to_str(irq_flags, hex);
 8005d76:	f107 0214 	add.w	r2, r7, #20
 8005d7a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fddb 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005d86:	f107 0214 	add.w	r2, r7, #20
 8005d8a:	f107 031c 	add.w	r3, r7, #28
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f003 fa2b 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005d96:	f107 031c 	add.w	r3, r7, #28
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fa f9d8 	bl	8000150 <strlen>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	f107 031c 	add.w	r3, r7, #28
 8005da8:	4413      	add	r3, r2
 8005daa:	4a89      	ldr	r2, [pc, #548]	@ (8005fd0 <cmd_rfm95_status_callback+0x628>)
 8005dac:	8811      	ldrh	r1, [r2, #0]
 8005dae:	7892      	ldrb	r2, [r2, #2]
 8005db0:	8019      	strh	r1, [r3, #0]
 8005db2:	709a      	strb	r2, [r3, #2]

    // Only add active flags
    if(irq_flags) {
 8005db4:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80c8 	beq.w	8005f4e <cmd_rfm95_status_callback+0x5a6>
        if(irq_flags & 0x80) strcat(output, "  RxTimeout\r\n");
 8005dbe:	f997 321f 	ldrsb.w	r3, [r7, #543]	@ 0x21f
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da12      	bge.n	8005dec <cmd_rfm95_status_callback+0x444>
 8005dc6:	f107 031c 	add.w	r3, r7, #28
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa f9c0 	bl	8000150 <strlen>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f107 031c 	add.w	r3, r7, #28
 8005dd8:	4413      	add	r3, r2
 8005dda:	4a81      	ldr	r2, [pc, #516]	@ (8005fe0 <cmd_rfm95_status_callback+0x638>)
 8005ddc:	461c      	mov	r4, r3
 8005dde:	4613      	mov	r3, r2
 8005de0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005de2:	6020      	str	r0, [r4, #0]
 8005de4:	6061      	str	r1, [r4, #4]
 8005de6:	60a2      	str	r2, [r4, #8]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	81a3      	strh	r3, [r4, #12]
        if(irq_flags & 0x40) strcat(output, "  RxDone\r\n");
 8005dec:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <cmd_rfm95_status_callback+0x478>
 8005df8:	f107 031c 	add.w	r3, r7, #28
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa f9a7 	bl	8000150 <strlen>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	f107 031c 	add.w	r3, r7, #28
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4975      	ldr	r1, [pc, #468]	@ (8005fe4 <cmd_rfm95_status_callback+0x63c>)
 8005e0e:	461a      	mov	r2, r3
 8005e10:	460b      	mov	r3, r1
 8005e12:	cb03      	ldmia	r3!, {r0, r1}
 8005e14:	6010      	str	r0, [r2, #0]
 8005e16:	6051      	str	r1, [r2, #4]
 8005e18:	8819      	ldrh	r1, [r3, #0]
 8005e1a:	789b      	ldrb	r3, [r3, #2]
 8005e1c:	8111      	strh	r1, [r2, #8]
 8005e1e:	7293      	strb	r3, [r2, #10]
        if(irq_flags & 0x20) strcat(output, "  PayloadCrcError\r\n");
 8005e20:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <cmd_rfm95_status_callback+0x4ac>
 8005e2c:	f107 031c 	add.w	r3, r7, #28
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa f98d 	bl	8000150 <strlen>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f107 031c 	add.w	r3, r7, #28
 8005e3e:	4413      	add	r3, r2
 8005e40:	4a69      	ldr	r2, [pc, #420]	@ (8005fe8 <cmd_rfm95_status_callback+0x640>)
 8005e42:	461d      	mov	r5, r3
 8005e44:	4614      	mov	r4, r2
 8005e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e48:	6028      	str	r0, [r5, #0]
 8005e4a:	6069      	str	r1, [r5, #4]
 8005e4c:	60aa      	str	r2, [r5, #8]
 8005e4e:	60eb      	str	r3, [r5, #12]
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	6128      	str	r0, [r5, #16]
        if(irq_flags & 0x10) strcat(output, "  ValidHeader\r\n");
 8005e54:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d011      	beq.n	8005e84 <cmd_rfm95_status_callback+0x4dc>
 8005e60:	f107 031c 	add.w	r3, r7, #28
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fa f973 	bl	8000150 <strlen>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f107 031c 	add.w	r3, r7, #28
 8005e72:	4413      	add	r3, r2
 8005e74:	4a5d      	ldr	r2, [pc, #372]	@ (8005fec <cmd_rfm95_status_callback+0x644>)
 8005e76:	461c      	mov	r4, r3
 8005e78:	4615      	mov	r5, r2
 8005e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7c:	6020      	str	r0, [r4, #0]
 8005e7e:	6061      	str	r1, [r4, #4]
 8005e80:	60a2      	str	r2, [r4, #8]
 8005e82:	60e3      	str	r3, [r4, #12]
        if(irq_flags & 0x08) strcat(output, "  TxDone\r\n");
 8005e84:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <cmd_rfm95_status_callback+0x510>
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa f95b 	bl	8000150 <strlen>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f107 031c 	add.w	r3, r7, #28
 8005ea2:	4413      	add	r3, r2
 8005ea4:	4952      	ldr	r1, [pc, #328]	@ (8005ff0 <cmd_rfm95_status_callback+0x648>)
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	cb03      	ldmia	r3!, {r0, r1}
 8005eac:	6010      	str	r0, [r2, #0]
 8005eae:	6051      	str	r1, [r2, #4]
 8005eb0:	8819      	ldrh	r1, [r3, #0]
 8005eb2:	789b      	ldrb	r3, [r3, #2]
 8005eb4:	8111      	strh	r1, [r2, #8]
 8005eb6:	7293      	strb	r3, [r2, #10]
        if(irq_flags & 0x04) strcat(output, "  CadDone\r\n");
 8005eb8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <cmd_rfm95_status_callback+0x53e>
 8005ec4:	f107 031c 	add.w	r3, r7, #28
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa f941 	bl	8000150 <strlen>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f107 031c 	add.w	r3, r7, #28
 8005ed6:	4413      	add	r3, r2
 8005ed8:	4a46      	ldr	r2, [pc, #280]	@ (8005ff4 <cmd_rfm95_status_callback+0x64c>)
 8005eda:	461c      	mov	r4, r3
 8005edc:	4613      	mov	r3, r2
 8005ede:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ee0:	6020      	str	r0, [r4, #0]
 8005ee2:	6061      	str	r1, [r4, #4]
 8005ee4:	60a2      	str	r2, [r4, #8]
        if(irq_flags & 0x02) strcat(output, "  FhssChangeChannel\r\n");
 8005ee6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <cmd_rfm95_status_callback+0x576>
 8005ef2:	f107 031c 	add.w	r3, r7, #28
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa f92a 	bl	8000150 <strlen>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	f107 031c 	add.w	r3, r7, #28
 8005f04:	4413      	add	r3, r2
 8005f06:	4a3c      	ldr	r2, [pc, #240]	@ (8005ff8 <cmd_rfm95_status_callback+0x650>)
 8005f08:	461d      	mov	r5, r3
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f0e:	6028      	str	r0, [r5, #0]
 8005f10:	6069      	str	r1, [r5, #4]
 8005f12:	60aa      	str	r2, [r5, #8]
 8005f14:	60eb      	str	r3, [r5, #12]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	6128      	str	r0, [r5, #16]
 8005f1a:	88a3      	ldrh	r3, [r4, #4]
 8005f1c:	82ab      	strh	r3, [r5, #20]
        if(irq_flags & 0x01) strcat(output, "  CadDetected\r\n");
 8005f1e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d011      	beq.n	8005f4e <cmd_rfm95_status_callback+0x5a6>
 8005f2a:	f107 031c 	add.w	r3, r7, #28
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa f90e 	bl	8000150 <strlen>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	f107 031c 	add.w	r3, r7, #28
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005ffc <cmd_rfm95_status_callback+0x654>)
 8005f40:	461c      	mov	r4, r3
 8005f42:	4615      	mov	r5, r2
 8005f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	6061      	str	r1, [r4, #4]
 8005f4a:	60a2      	str	r2, [r4, #8]
 8005f4c:	60e3      	str	r3, [r4, #12]
    }

    // PA settings
    uint8_t pa_config = rfm95_read_reg(RFM95_REG_PA_CONFIG);
 8005f4e:	2009      	movs	r0, #9
 8005f50:	f7fc f84a 	bl	8001fe8 <rfm95_read_reg>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
    strcat(output, "PA Config: ");
 8005f5a:	f107 031c 	add.w	r3, r7, #28
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fa f8f6 	bl	8000150 <strlen>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4a24      	ldr	r2, [pc, #144]	@ (8006000 <cmd_rfm95_status_callback+0x658>)
 8005f70:	461c      	mov	r4, r3
 8005f72:	4613      	mov	r3, r2
 8005f74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f76:	6020      	str	r0, [r4, #0]
 8005f78:	6061      	str	r1, [r4, #4]
 8005f7a:	60a2      	str	r2, [r4, #8]
    hex_to_str(pa_config, hex);
 8005f7c:	f107 0214 	add.w	r2, r7, #20
 8005f80:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fcd8 	bl	800593c <hex_to_str>
    strcat(output, hex);
 8005f8c:	f107 0214 	add.w	r2, r7, #20
 8005f90:	f107 031c 	add.w	r3, r7, #28
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f003 f928 	bl	80091ec <strcat>
    strcat(output, "\r\n");
 8005f9c:	f107 031c 	add.w	r3, r7, #28
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fa f8d5 	bl	8000150 <strlen>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4413      	add	r3, r2
 8005fb0:	4a07      	ldr	r2, [pc, #28]	@ (8005fd0 <cmd_rfm95_status_callback+0x628>)
 8005fb2:	8811      	ldrh	r1, [r2, #0]
 8005fb4:	7892      	ldrb	r2, [r2, #2]
 8005fb6:	8019      	strh	r1, [r3, #0]
 8005fb8:	709a      	strb	r2, [r3, #2]

    // Send all output at once
    ush_print(self, output);
 8005fba:	f107 021c 	add.w	r2, r7, #28
 8005fbe:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005fc2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	e01b      	b.n	8006004 <cmd_rfm95_status_callback+0x65c>
 8005fcc:	0800b294 	.word	0x0800b294
 8005fd0:	0800b224 	.word	0x0800b224
 8005fd4:	0800b298 	.word	0x0800b298
 8005fd8:	0800b2ac 	.word	0x0800b2ac
 8005fdc:	0800b2c0 	.word	0x0800b2c0
 8005fe0:	0800b2cc 	.word	0x0800b2cc
 8005fe4:	0800b2dc 	.word	0x0800b2dc
 8005fe8:	0800b2e8 	.word	0x0800b2e8
 8005fec:	0800b2fc 	.word	0x0800b2fc
 8005ff0:	0800b30c 	.word	0x0800b30c
 8005ff4:	0800b318 	.word	0x0800b318
 8005ff8:	0800b324 	.word	0x0800b324
 8005ffc:	0800b33c 	.word	0x0800b33c
 8006000:	0800b34c 	.word	0x0800b34c
 8006004:	f7fd f86c 	bl	80030e0 <ush_print>
}
 8006008:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 800600c:	46bd      	mov	sp, r7
 800600e:	bdb0      	pop	{r4, r5, r7, pc}

08006010 <cmd_lora_rx>:
//    ush_print(self, "RFM95 initialized successfully\r\n");
//}

bool lora_rx_mode = false;

void cmd_lora_rx(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
    if (argc != 2) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d004      	beq.n	800602e <cmd_lora_rx+0x1e>
        ush_print(self, "Usage: lora_rx <on|off>");
 8006024:	4921      	ldr	r1, [pc, #132]	@ (80060ac <cmd_lora_rx+0x9c>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7fd f85a 	bl	80030e0 <ush_print>
        return;
 800602c:	e03b      	b.n	80060a6 <cmd_lora_rx+0x96>
    }

    if (strcmp(argv[1], "on") == 0) {
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3304      	adds	r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	491e      	ldr	r1, [pc, #120]	@ (80060b0 <cmd_lora_rx+0xa0>)
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa f892 	bl	8000160 <strcmp>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d117      	bne.n	8006072 <cmd_lora_rx+0x62>
        // Initialize RX mode
        rfm95_write_reg(RFM95_REG_DIO_MAPPING_1, 0x00);
 8006042:	2100      	movs	r1, #0
 8006044:	2040      	movs	r0, #64	@ 0x40
 8006046:	f7fb fff7 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_FIFO_RX_BASE, 0);
 800604a:	2100      	movs	r1, #0
 800604c:	200f      	movs	r0, #15
 800604e:	f7fb fff3 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_FIFO_ADDR_PTR, 0);
 8006052:	2100      	movs	r1, #0
 8006054:	200d      	movs	r0, #13
 8006056:	f7fb ffef 	bl	8002038 <rfm95_write_reg>
        rfm95_write_reg(RFM95_REG_OP_MODE, RFM95_MODE_RX_SINGLE);
 800605a:	2106      	movs	r1, #6
 800605c:	2001      	movs	r0, #1
 800605e:	f7fb ffeb 	bl	8002038 <rfm95_write_reg>

        lora_rx_mode = true;
 8006062:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <cmd_lora_rx+0xa4>)
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
        ush_print(self, "LoRa receive mode enabled");
 8006068:	4913      	ldr	r1, [pc, #76]	@ (80060b8 <cmd_lora_rx+0xa8>)
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7fd f838 	bl	80030e0 <ush_print>
 8006070:	e019      	b.n	80060a6 <cmd_lora_rx+0x96>
    }
    else if (strcmp(argv[1], "off") == 0) {
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4910      	ldr	r1, [pc, #64]	@ (80060bc <cmd_lora_rx+0xac>)
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa f870 	bl	8000160 <strcmp>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10b      	bne.n	800609e <cmd_lora_rx+0x8e>
        // Clean exit from RX mode
        rfm95_clear_flags();  // Clear any pending interrupts
 8006086:	f7fc f9f3 	bl	8002470 <rfm95_clear_flags>
        rfm95_standby();      // Return to standby mode
 800608a:	f7fc f9c3 	bl	8002414 <rfm95_standby>

        lora_rx_mode = false;
 800608e:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <cmd_lora_rx+0xa4>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
        ush_print(self, "LoRa receive mode disabled");
 8006094:	490a      	ldr	r1, [pc, #40]	@ (80060c0 <cmd_lora_rx+0xb0>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7fd f822 	bl	80030e0 <ush_print>
 800609c:	e003      	b.n	80060a6 <cmd_lora_rx+0x96>
    }
    else {
        ush_print(self, "Invalid argument. Use 'on' or 'off'");
 800609e:	4909      	ldr	r1, [pc, #36]	@ (80060c4 <cmd_lora_rx+0xb4>)
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7fd f81d 	bl	80030e0 <ush_print>
    }
}
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	0800b358 	.word	0x0800b358
 80060b0:	0800b370 	.word	0x0800b370
 80060b4:	20000528 	.word	0x20000528
 80060b8:	0800b374 	.word	0x0800b374
 80060bc:	0800b390 	.word	0x0800b390
 80060c0:	0800b394 	.word	0x0800b394
 80060c4:	0800b3b0 	.word	0x0800b3b0

080060c8 <cmd_rfm95_send_callback>:

static void cmd_rfm95_send_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b0ca      	sub	sp, #296	@ 0x128
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80060d2:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80060d6:	6020      	str	r0, [r4, #0]
 80060d8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80060dc:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 80060e0:	6001      	str	r1, [r0, #0]
 80060e2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80060e6:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80060ea:	600a      	str	r2, [r1, #0]
 80060ec:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80060f0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80060f4:	6013      	str	r3, [r2, #0]
    if (argc != 2) {
 80060f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80060fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d008      	beq.n	8006116 <cmd_rfm95_send_callback+0x4e>
        ush_print(self, "Usage: send <message>\r\n");
 8006104:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006108:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800610c:	4948      	ldr	r1, [pc, #288]	@ (8006230 <cmd_rfm95_send_callback+0x168>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	f7fc ffe6 	bl	80030e0 <ush_print>
 8006114:	e087      	b.n	8006226 <cmd_rfm95_send_callback+0x15e>
        return;
    }

    const char *message = argv[1];
 8006116:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800611a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t len = strlen(message);
 8006126:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800612a:	f7fa f811 	bl	8000150 <strlen>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    char buf[256];
    int offset = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    if (len > FIXED_PACKET_LENGTH) {
 800613a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613e:	2b20      	cmp	r3, #32
 8006140:	d912      	bls.n	8006168 <cmd_rfm95_send_callback+0xa0>
        offset += snprintf(buf + offset, sizeof(buf) - offset,
 8006142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006146:	f107 0214 	add.w	r2, r7, #20
 800614a:	18d0      	adds	r0, r2, r3
 800614c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006150:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8006154:	2320      	movs	r3, #32
 8006156:	4a37      	ldr	r2, [pc, #220]	@ (8006234 <cmd_rfm95_send_callback+0x16c>)
 8006158:	f002 ff70 	bl	800903c <sniprintf>
 800615c:	4602      	mov	r2, r0
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	4413      	add	r3, r2
 8006164:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            "Warning: Message too long - will be truncated to %d bytes\r\n",
            FIXED_PACKET_LENGTH);
    }

    offset += snprintf(buf + offset, sizeof(buf) - offset, "Sending %d bytes: %s\r\n",
 8006168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616c:	f107 0214 	add.w	r2, r7, #20
 8006170:	18d0      	adds	r0, r2, r3
 8006172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006176:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
        len > FIXED_PACKET_LENGTH ? FIXED_PACKET_LENGTH : len, message);
 800617a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800617e:	2b20      	cmp	r3, #32
 8006180:	bf28      	it	cs
 8006182:	2320      	movcs	r3, #32
 8006184:	b2db      	uxtb	r3, r3
    offset += snprintf(buf + offset, sizeof(buf) - offset, "Sending %d bytes: %s\r\n",
 8006186:	461a      	mov	r2, r3
 8006188:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	4a29      	ldr	r2, [pc, #164]	@ (8006238 <cmd_rfm95_send_callback+0x170>)
 8006192:	f002 ff53 	bl	800903c <sniprintf>
 8006196:	4602      	mov	r2, r0
 8006198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619c:	4413      	add	r3, r2
 800619e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    if (!rfm95_send((uint8_t*)message, len)) {
 80061a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a6:	4619      	mov	r1, r3
 80061a8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80061ac:	f7fc f83e 	bl	800222c <rfm95_send>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f083 0301 	eor.w	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <cmd_rfm95_send_callback+0x11c>
        offset += snprintf(buf + offset, sizeof(buf) - offset, "Failed to send message\r\n");
 80061bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c0:	f107 0214 	add.w	r2, r7, #20
 80061c4:	18d0      	adds	r0, r2, r3
 80061c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ca:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80061ce:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <cmd_rfm95_send_callback+0x174>)
 80061d0:	4619      	mov	r1, r3
 80061d2:	f002 ff33 	bl	800903c <sniprintf>
 80061d6:	4602      	mov	r2, r0
 80061d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061dc:	4413      	add	r3, r2
 80061de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80061e2:	e016      	b.n	8006212 <cmd_rfm95_send_callback+0x14a>
    } else {
        offset += snprintf(buf + offset, sizeof(buf) - offset,
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	f107 0214 	add.w	r2, r7, #20
 80061ec:	18d4      	adds	r4, r2, r3
 80061ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f2:	f5c3 7580 	rsb	r5, r3, #256	@ 0x100
            "Message sent successfully (RSSI: %ddBm)\r\n", rfm95_get_rssi());
 80061f6:	f7fc f915 	bl	8002424 <rfm95_get_rssi>
 80061fa:	4603      	mov	r3, r0
        offset += snprintf(buf + offset, sizeof(buf) - offset,
 80061fc:	4a10      	ldr	r2, [pc, #64]	@ (8006240 <cmd_rfm95_send_callback+0x178>)
 80061fe:	4629      	mov	r1, r5
 8006200:	4620      	mov	r0, r4
 8006202:	f002 ff1b 	bl	800903c <sniprintf>
 8006206:	4602      	mov	r2, r0
 8006208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620c:	4413      	add	r3, r2
 800620e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    }

    ush_print(self, buf);
 8006212:	f107 0214 	add.w	r2, r7, #20
 8006216:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800621a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800621e:	4611      	mov	r1, r2
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f7fc ff5d 	bl	80030e0 <ush_print>
}
 8006226:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800622a:	46bd      	mov	sp, r7
 800622c:	bdb0      	pop	{r4, r5, r7, pc}
 800622e:	bf00      	nop
 8006230:	0800b3d4 	.word	0x0800b3d4
 8006234:	0800b3ec 	.word	0x0800b3ec
 8006238:	0800b428 	.word	0x0800b428
 800623c:	0800b440 	.word	0x0800b440
 8006240:	0800b45c 	.word	0x0800b45c

08006244 <cmd_rfm95_receive_callback>:



static void cmd_rfm95_receive_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[]) {
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800624a:	af02      	add	r7, sp, #8
 800624c:	f507 7418 	add.w	r4, r7, #608	@ 0x260
 8006250:	f5a4 7415 	sub.w	r4, r4, #596	@ 0x254
 8006254:	6020      	str	r0, [r4, #0]
 8006256:	f507 7018 	add.w	r0, r7, #608	@ 0x260
 800625a:	f5a0 7016 	sub.w	r0, r0, #600	@ 0x258
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8006264:	f5a1 7117 	sub.w	r1, r1, #604	@ 0x25c
 8006268:	600a      	str	r2, [r1, #0]
 800626a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800626e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8006272:	6013      	str	r3, [r2, #0]
   if (argc != 1) {
 8006274:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8006278:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d008      	beq.n	8006294 <cmd_rfm95_receive_callback+0x50>
       ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8006282:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8006286:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800628a:	2106      	movs	r1, #6
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f7fc ff13 	bl	80030b8 <ush_print_status>
       return;
 8006292:	e0af      	b.n	80063f4 <cmd_rfm95_receive_callback+0x1b0>
   }

   uint8_t rx_data[64];
   uint8_t rx_len = FIXED_PACKET_LENGTH;
 8006294:	2320      	movs	r3, #32
 8006296:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
   uint32_t start = HAL_GetTick();
 800629a:	f000 f9ad 	bl	80065f8 <HAL_GetTick>
 800629e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
   char buf[512] = {0};
 80062a2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80062a6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f002 ffc9 	bl	800924e <memset>
   int offset = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

   while (HAL_GetTick() - start < 5000) {
 80062c2:	e076      	b.n	80063b2 <cmd_rfm95_receive_callback+0x16e>
       if (rfm95_receive(rx_data, &rx_len, 500)) {
 80062c4:	f207 2113 	addw	r1, r7, #531	@ 0x213
 80062c8:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80062cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fc f80f 	bl	80022f4 <rfm95_receive>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d06a      	beq.n	80063b2 <cmd_rfm95_receive_callback+0x16e>
           offset += snprintf(buf + offset, sizeof(buf) - offset,
 80062dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80062e0:	f107 0210 	add.w	r2, r7, #16
 80062e4:	18d4      	adds	r4, r2, r3
 80062e6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80062ea:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
 80062ee:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80062f2:	461e      	mov	r6, r3
               "Received %d bytes (RSSI: %ddBm)\r\nHEX: ",
               rx_len, rfm95_get_rssi());
 80062f4:	f7fc f896 	bl	8002424 <rfm95_get_rssi>
 80062f8:	4603      	mov	r3, r0
           offset += snprintf(buf + offset, sizeof(buf) - offset,
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4633      	mov	r3, r6
 80062fe:	4a3f      	ldr	r2, [pc, #252]	@ (80063fc <cmd_rfm95_receive_callback+0x1b8>)
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f002 fe9a 	bl	800903c <sniprintf>
 8006308:	4602      	mov	r2, r0
 800630a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800630e:	4413      	add	r3, r2
 8006310:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

           for (int i = 0; i < rx_len; i++) {
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800631a:	e01c      	b.n	8006356 <cmd_rfm95_receive_callback+0x112>
               offset += snprintf(buf + offset, sizeof(buf) - offset, "%02X ", rx_data[i]);
 800631c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8006320:	f107 0210 	add.w	r2, r7, #16
 8006324:	18d0      	adds	r0, r2, r3
 8006326:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800632a:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800632e:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8006332:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	4a31      	ldr	r2, [pc, #196]	@ (8006400 <cmd_rfm95_receive_callback+0x1bc>)
 800633c:	f002 fe7e 	bl	800903c <sniprintf>
 8006340:	4602      	mov	r2, r0
 8006342:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8006346:	4413      	add	r3, r2
 8006348:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
           for (int i = 0; i < rx_len; i++) {
 800634c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8006350:	3301      	adds	r3, #1
 8006352:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8006356:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8006360:	4293      	cmp	r3, r2
 8006362:	dbdb      	blt.n	800631c <cmd_rfm95_receive_callback+0xd8>
           }

           rx_data[rx_len] = 0;
 8006364:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8006368:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800636c:	443b      	add	r3, r7
 800636e:	2200      	movs	r2, #0
 8006370:	f803 2c4c 	strb.w	r2, [r3, #-76]
           offset += snprintf(buf + offset, sizeof(buf) - offset, "\r\nASCII: %s\r\n", rx_data);
 8006374:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8006378:	f107 0210 	add.w	r2, r7, #16
 800637c:	18d0      	adds	r0, r2, r3
 800637e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8006382:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8006386:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800638a:	4a1e      	ldr	r2, [pc, #120]	@ (8006404 <cmd_rfm95_receive_callback+0x1c0>)
 800638c:	f002 fe56 	bl	800903c <sniprintf>
 8006390:	4602      	mov	r2, r0
 8006392:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8006396:	4413      	add	r3, r2
 8006398:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
           ush_print(self, buf);
 800639c:	f107 0210 	add.w	r2, r7, #16
 80063a0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80063a4:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80063a8:	4611      	mov	r1, r2
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	f7fc fe98 	bl	80030e0 <ush_print>
           return;
 80063b0:	e020      	b.n	80063f4 <cmd_rfm95_receive_callback+0x1b0>
   while (HAL_GetTick() - start < 5000) {
 80063b2:	f000 f921 	bl	80065f8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3287 	movw	r2, #4999	@ 0x1387
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f67f af7e 	bls.w	80062c4 <cmd_rfm95_receive_callback+0x80>
       }
   }

   rfm95_standby();
 80063c8:	f7fc f824 	bl	8002414 <rfm95_standby>
   snprintf(buf, sizeof(buf), "Timeout - no data received (RSSI: %ddBm)\r\n", rfm95_get_rssi());
 80063cc:	f7fc f82a 	bl	8002424 <rfm95_get_rssi>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f107 0010 	add.w	r0, r7, #16
 80063d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006408 <cmd_rfm95_receive_callback+0x1c4>)
 80063d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063dc:	f002 fe2e 	bl	800903c <sniprintf>
   ush_print(self, buf);
 80063e0:	f107 0210 	add.w	r2, r7, #16
 80063e4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80063e8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80063ec:	4611      	mov	r1, r2
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	f7fc fe76 	bl	80030e0 <ush_print>
}
 80063f4:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063fc:	0800b488 	.word	0x0800b488
 8006400:	0800b4b0 	.word	0x0800b4b0
 8006404:	0800b4b8 	.word	0x0800b4b8
 8006408:	0800b4c8 	.word	0x0800b4c8

0800640c <cmd_rfm95_init>:
    },
};

static struct ush_node_object cmd_node_rfm95;

void cmd_rfm95_init(struct ush_object *ush) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
    ush_commands_add(ush, &cmd_node_rfm95, cmd_rfm95_files,
 8006414:	2304      	movs	r3, #4
 8006416:	4a04      	ldr	r2, [pc, #16]	@ (8006428 <cmd_rfm95_init+0x1c>)
 8006418:	4904      	ldr	r1, [pc, #16]	@ (800642c <cmd_rfm95_init+0x20>)
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fd f9db 	bl	80037d6 <ush_commands_add>
                    sizeof(cmd_rfm95_files) / sizeof(cmd_rfm95_files[0]));
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	0800b7ac 	.word	0x0800b7ac
 800642c:	2000052c 	.word	0x2000052c

08006430 <cmd_set_servo_callback>:
    SERVO_2 = 1,
    SERVO_COUNT
} servo_channel_t;

static void cmd_set_servo_callback(struct ush_object *self, struct ush_file_descriptor const *file, int argc, char *argv[])
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
    if (argc != 3) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d004      	beq.n	800644e <cmd_set_servo_callback+0x1e>
        ush_print_status(self, USH_STATUS_ERROR_COMMAND_WRONG_ARGUMENTS);
 8006444:	2106      	movs	r1, #6
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7fc fe36 	bl	80030b8 <ush_print_status>
        return;
 800644c:	e03a      	b.n	80064c4 <cmd_set_servo_callback+0x94>
    }

    int channel = atoi(argv[1]);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	3304      	adds	r3, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f002 fded 	bl	8009034 <atoi>
 800645a:	61f8      	str	r0, [r7, #28]
    int angle = atoi(argv[2]);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f002 fde6 	bl	8009034 <atoi>
 8006468:	61b8      	str	r0, [r7, #24]

    if (channel < 0 || channel >= SERVO_COUNT) {
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2b00      	cmp	r3, #0
 800646e:	db02      	blt.n	8006476 <cmd_set_servo_callback+0x46>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b01      	cmp	r3, #1
 8006474:	dd04      	ble.n	8006480 <cmd_set_servo_callback+0x50>
        ush_print(self, "Error: Invalid channel\r\n");
 8006476:	4915      	ldr	r1, [pc, #84]	@ (80064cc <cmd_set_servo_callback+0x9c>)
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7fc fe31 	bl	80030e0 <ush_print>
        return;
 800647e:	e021      	b.n	80064c4 <cmd_set_servo_callback+0x94>
    }

    if (angle < 0 || angle > 180) {
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	db02      	blt.n	800648c <cmd_set_servo_callback+0x5c>
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2bb4      	cmp	r3, #180	@ 0xb4
 800648a:	dd04      	ble.n	8006496 <cmd_set_servo_callback+0x66>
        ush_print(self, "Error: Angle must be 0-180\r\n");
 800648c:	4910      	ldr	r1, [pc, #64]	@ (80064d0 <cmd_set_servo_callback+0xa0>)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7fc fe26 	bl	80030e0 <ush_print>
        return;
 8006494:	e016      	b.n	80064c4 <cmd_set_servo_callback+0x94>
    }

    TIM_HandleTypeDef* timers[] = {&htim2, &htim3};
 8006496:	4a0f      	ldr	r2, [pc, #60]	@ (80064d4 <cmd_set_servo_callback+0xa4>)
 8006498:	f107 0310 	add.w	r3, r7, #16
 800649c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064a0:	e883 0003 	stmia.w	r3, {r0, r1}
    servo_set_angle(timers[channel], angle);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	3320      	adds	r3, #32
 80064aa:	443b      	add	r3, r7
 80064ac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc f98a 	bl	80027d0 <servo_set_angle>

    ush_print_status(self, USH_STATUS_OK);
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7fc fdfa 	bl	80030b8 <ush_print_status>
}
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800b5ac 	.word	0x0800b5ac
 80064d0:	0800b5c8 	.word	0x0800b5c8
 80064d4:	0800b5e8 	.word	0x0800b5e8

080064d8 <cmd_servo_init>:
// Node object for this module
static struct ush_node_object cmd_node_servo;

// Public init function
void cmd_servo_init(struct ush_object *ush)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
    ush_commands_add(ush, &cmd_node_servo, cmd_servo_files,
 80064e0:	2301      	movs	r3, #1
 80064e2:	4a04      	ldr	r2, [pc, #16]	@ (80064f4 <cmd_servo_init+0x1c>)
 80064e4:	4904      	ldr	r1, [pc, #16]	@ (80064f8 <cmd_servo_init+0x20>)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fd f975 	bl	80037d6 <ush_commands_add>
                    sizeof(cmd_servo_files) / sizeof(cmd_servo_files[0]));
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	0800b81c 	.word	0x0800b81c
 80064f8:	20000544 	.word	0x20000544

080064fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80064fc:	f7fc fd6e 	bl	8002fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006500:	480b      	ldr	r0, [pc, #44]	@ (8006530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006502:	490c      	ldr	r1, [pc, #48]	@ (8006534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006504:	4a0c      	ldr	r2, [pc, #48]	@ (8006538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006508:	e002      	b.n	8006510 <LoopCopyDataInit>

0800650a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800650a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800650c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800650e:	3304      	adds	r3, #4

08006510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006514:	d3f9      	bcc.n	800650a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006516:	4a09      	ldr	r2, [pc, #36]	@ (800653c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006518:	4c09      	ldr	r4, [pc, #36]	@ (8006540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800651a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800651c:	e001      	b.n	8006522 <LoopFillZerobss>

0800651e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800651e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006520:	3204      	adds	r2, #4

08006522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006524:	d3fb      	bcc.n	800651e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006526:	f002 fea1 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800652a:	f7fb fb63 	bl	8001bf4 <main>
  bx lr
 800652e:	4770      	bx	lr
  ldr r0, =_sdata
 8006530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006534:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8006538:	0800b9c0 	.word	0x0800b9c0
  ldr r2, =_sbss
 800653c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8006540:	200006a8 	.word	0x200006a8

08006544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006544:	e7fe      	b.n	8006544 <ADC1_2_IRQHandler>
	...

08006548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800654c:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <HAL_Init+0x28>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a07      	ldr	r2, [pc, #28]	@ (8006570 <HAL_Init+0x28>)
 8006552:	f043 0310 	orr.w	r3, r3, #16
 8006556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006558:	2003      	movs	r0, #3
 800655a:	f000 f947 	bl	80067ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800655e:	200f      	movs	r0, #15
 8006560:	f000 f808 	bl	8006574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006564:	f7fc faea 	bl	8002b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40022000 	.word	0x40022000

08006574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800657c:	4b12      	ldr	r3, [pc, #72]	@ (80065c8 <HAL_InitTick+0x54>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <HAL_InitTick+0x58>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800658a:	fbb3 f3f1 	udiv	r3, r3, r1
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f95f 	bl	8006856 <HAL_SYSTICK_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e00e      	b.n	80065c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b0f      	cmp	r3, #15
 80065a6:	d80a      	bhi.n	80065be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065a8:	2200      	movs	r2, #0
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065b0:	f000 f927 	bl	8006802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065b4:	4a06      	ldr	r2, [pc, #24]	@ (80065d0 <HAL_InitTick+0x5c>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000010 	.word	0x20000010
 80065cc:	20000018 	.word	0x20000018
 80065d0:	20000014 	.word	0x20000014

080065d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_IncTick+0x1c>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <HAL_IncTick+0x20>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	4a03      	ldr	r2, [pc, #12]	@ (80065f4 <HAL_IncTick+0x20>)
 80065e6:	6013      	str	r3, [r2, #0]
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	20000018 	.word	0x20000018
 80065f4:	2000055c 	.word	0x2000055c

080065f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return uwTick;
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <HAL_GetTick+0x10>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	2000055c 	.word	0x2000055c

0800660c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006614:	f7ff fff0 	bl	80065f8 <HAL_GetTick>
 8006618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006624:	d005      	beq.n	8006632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006626:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <HAL_Delay+0x44>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006632:	bf00      	nop
 8006634:	f7ff ffe0 	bl	80065f8 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	429a      	cmp	r2, r3
 8006642:	d8f7      	bhi.n	8006634 <HAL_Delay+0x28>
  {
  }
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000018 	.word	0x20000018

08006654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006664:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <__NVIC_SetPriorityGrouping+0x44>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006670:	4013      	ands	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800667c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006686:	4a04      	ldr	r2, [pc, #16]	@ (8006698 <__NVIC_SetPriorityGrouping+0x44>)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	60d3      	str	r3, [r2, #12]
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	e000ed00 	.word	0xe000ed00

0800669c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066a0:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <__NVIC_GetPriorityGrouping+0x18>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	0a1b      	lsrs	r3, r3, #8
 80066a6:	f003 0307 	and.w	r3, r3, #7
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	e000ed00 	.word	0xe000ed00

080066b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db0b      	blt.n	80066e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	f003 021f 	and.w	r2, r3, #31
 80066d0:	4906      	ldr	r1, [pc, #24]	@ (80066ec <__NVIC_EnableIRQ+0x34>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2001      	movs	r0, #1
 80066da:	fa00 f202 	lsl.w	r2, r0, r2
 80066de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr
 80066ec:	e000e100 	.word	0xe000e100

080066f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006700:	2b00      	cmp	r3, #0
 8006702:	db0a      	blt.n	800671a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	490c      	ldr	r1, [pc, #48]	@ (800673c <__NVIC_SetPriority+0x4c>)
 800670a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670e:	0112      	lsls	r2, r2, #4
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	440b      	add	r3, r1
 8006714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006718:	e00a      	b.n	8006730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4908      	ldr	r1, [pc, #32]	@ (8006740 <__NVIC_SetPriority+0x50>)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	3b04      	subs	r3, #4
 8006728:	0112      	lsls	r2, r2, #4
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	440b      	add	r3, r1
 800672e:	761a      	strb	r2, [r3, #24]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	e000e100 	.word	0xe000e100
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	@ 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f1c3 0307 	rsb	r3, r3, #7
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf28      	it	cs
 8006762:	2304      	movcs	r3, #4
 8006764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3304      	adds	r3, #4
 800676a:	2b06      	cmp	r3, #6
 800676c:	d902      	bls.n	8006774 <NVIC_EncodePriority+0x30>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3b03      	subs	r3, #3
 8006772:	e000      	b.n	8006776 <NVIC_EncodePriority+0x32>
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	401a      	ands	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800678c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	43d9      	mvns	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800679c:	4313      	orrs	r3, r2
         );
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	@ 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067b8:	d301      	bcc.n	80067be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ba:	2301      	movs	r3, #1
 80067bc:	e00f      	b.n	80067de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067be:	4a0a      	ldr	r2, [pc, #40]	@ (80067e8 <SysTick_Config+0x40>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067c6:	210f      	movs	r1, #15
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067cc:	f7ff ff90 	bl	80066f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <SysTick_Config+0x40>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067d6:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <SysTick_Config+0x40>)
 80067d8:	2207      	movs	r2, #7
 80067da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	e000e010 	.word	0xe000e010

080067ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff2d 	bl	8006654 <__NVIC_SetPriorityGrouping>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006814:	f7ff ff42 	bl	800669c <__NVIC_GetPriorityGrouping>
 8006818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7ff ff90 	bl	8006744 <NVIC_EncodePriority>
 8006824:	4602      	mov	r2, r0
 8006826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ff5f 	bl	80066f0 <__NVIC_SetPriority>
}
 8006832:	bf00      	nop
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	4603      	mov	r3, r0
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff ff35 	bl	80066b8 <__NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ffa2 	bl	80067a8 <SysTick_Config>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006870:	b480      	push	{r7}
 8006872:	b08b      	sub	sp, #44	@ 0x2c
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006882:	e169      	b.n	8006b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006884:	2201      	movs	r2, #1
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	4013      	ands	r3, r2
 8006896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	429a      	cmp	r2, r3
 800689e:	f040 8158 	bne.w	8006b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a9a      	ldr	r2, [pc, #616]	@ (8006b10 <HAL_GPIO_Init+0x2a0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d05e      	beq.n	800696a <HAL_GPIO_Init+0xfa>
 80068ac:	4a98      	ldr	r2, [pc, #608]	@ (8006b10 <HAL_GPIO_Init+0x2a0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d875      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068b2:	4a98      	ldr	r2, [pc, #608]	@ (8006b14 <HAL_GPIO_Init+0x2a4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d058      	beq.n	800696a <HAL_GPIO_Init+0xfa>
 80068b8:	4a96      	ldr	r2, [pc, #600]	@ (8006b14 <HAL_GPIO_Init+0x2a4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d86f      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068be:	4a96      	ldr	r2, [pc, #600]	@ (8006b18 <HAL_GPIO_Init+0x2a8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d052      	beq.n	800696a <HAL_GPIO_Init+0xfa>
 80068c4:	4a94      	ldr	r2, [pc, #592]	@ (8006b18 <HAL_GPIO_Init+0x2a8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d869      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068ca:	4a94      	ldr	r2, [pc, #592]	@ (8006b1c <HAL_GPIO_Init+0x2ac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d04c      	beq.n	800696a <HAL_GPIO_Init+0xfa>
 80068d0:	4a92      	ldr	r2, [pc, #584]	@ (8006b1c <HAL_GPIO_Init+0x2ac>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d863      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068d6:	4a92      	ldr	r2, [pc, #584]	@ (8006b20 <HAL_GPIO_Init+0x2b0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d046      	beq.n	800696a <HAL_GPIO_Init+0xfa>
 80068dc:	4a90      	ldr	r2, [pc, #576]	@ (8006b20 <HAL_GPIO_Init+0x2b0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d85d      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068e2:	2b12      	cmp	r3, #18
 80068e4:	d82a      	bhi.n	800693c <HAL_GPIO_Init+0xcc>
 80068e6:	2b12      	cmp	r3, #18
 80068e8:	d859      	bhi.n	800699e <HAL_GPIO_Init+0x12e>
 80068ea:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <HAL_GPIO_Init+0x80>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	0800696b 	.word	0x0800696b
 80068f4:	08006945 	.word	0x08006945
 80068f8:	08006957 	.word	0x08006957
 80068fc:	08006999 	.word	0x08006999
 8006900:	0800699f 	.word	0x0800699f
 8006904:	0800699f 	.word	0x0800699f
 8006908:	0800699f 	.word	0x0800699f
 800690c:	0800699f 	.word	0x0800699f
 8006910:	0800699f 	.word	0x0800699f
 8006914:	0800699f 	.word	0x0800699f
 8006918:	0800699f 	.word	0x0800699f
 800691c:	0800699f 	.word	0x0800699f
 8006920:	0800699f 	.word	0x0800699f
 8006924:	0800699f 	.word	0x0800699f
 8006928:	0800699f 	.word	0x0800699f
 800692c:	0800699f 	.word	0x0800699f
 8006930:	0800699f 	.word	0x0800699f
 8006934:	0800694d 	.word	0x0800694d
 8006938:	08006961 	.word	0x08006961
 800693c:	4a79      	ldr	r2, [pc, #484]	@ (8006b24 <HAL_GPIO_Init+0x2b4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006942:	e02c      	b.n	800699e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	623b      	str	r3, [r7, #32]
          break;
 800694a:	e029      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	623b      	str	r3, [r7, #32]
          break;
 8006954:	e024      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	3308      	adds	r3, #8
 800695c:	623b      	str	r3, [r7, #32]
          break;
 800695e:	e01f      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	330c      	adds	r3, #12
 8006966:	623b      	str	r3, [r7, #32]
          break;
 8006968:	e01a      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006972:	2304      	movs	r3, #4
 8006974:	623b      	str	r3, [r7, #32]
          break;
 8006976:	e013      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d105      	bne.n	800698c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006980:	2308      	movs	r3, #8
 8006982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	611a      	str	r2, [r3, #16]
          break;
 800698a:	e009      	b.n	80069a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800698c:	2308      	movs	r3, #8
 800698e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	615a      	str	r2, [r3, #20]
          break;
 8006996:	e003      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
          break;
 800699c:	e000      	b.n	80069a0 <HAL_GPIO_Init+0x130>
          break;
 800699e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2bff      	cmp	r3, #255	@ 0xff
 80069a4:	d801      	bhi.n	80069aa <HAL_GPIO_Init+0x13a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	e001      	b.n	80069ae <HAL_GPIO_Init+0x13e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2bff      	cmp	r3, #255	@ 0xff
 80069b4:	d802      	bhi.n	80069bc <HAL_GPIO_Init+0x14c>
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	e002      	b.n	80069c2 <HAL_GPIO_Init+0x152>
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	3b08      	subs	r3, #8
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	210f      	movs	r1, #15
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	fa01 f303 	lsl.w	r3, r1, r3
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	6a39      	ldr	r1, [r7, #32]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80b1 	beq.w	8006b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80069f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006b28 <HAL_GPIO_Init+0x2b8>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006b28 <HAL_GPIO_Init+0x2b8>)
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	6193      	str	r3, [r2, #24]
 80069fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006b28 <HAL_GPIO_Init+0x2b8>)
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a08:	4a48      	ldr	r2, [pc, #288]	@ (8006b2c <HAL_GPIO_Init+0x2bc>)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	089b      	lsrs	r3, r3, #2
 8006a0e:	3302      	adds	r3, #2
 8006a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	220f      	movs	r2, #15
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	43db      	mvns	r3, r3
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a40      	ldr	r2, [pc, #256]	@ (8006b30 <HAL_GPIO_Init+0x2c0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_GPIO_Init+0x1ec>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3f      	ldr	r2, [pc, #252]	@ (8006b34 <HAL_GPIO_Init+0x2c4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00d      	beq.n	8006a58 <HAL_GPIO_Init+0x1e8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8006b38 <HAL_GPIO_Init+0x2c8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <HAL_GPIO_Init+0x1e4>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3d      	ldr	r2, [pc, #244]	@ (8006b3c <HAL_GPIO_Init+0x2cc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_GPIO_Init+0x1e0>
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <HAL_GPIO_Init+0x1ee>
 8006a50:	2304      	movs	r3, #4
 8006a52:	e004      	b.n	8006a5e <HAL_GPIO_Init+0x1ee>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e002      	b.n	8006a5e <HAL_GPIO_Init+0x1ee>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_GPIO_Init+0x1ee>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a60:	f002 0203 	and.w	r2, r2, #3
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	4093      	lsls	r3, r2
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a6e:	492f      	ldr	r1, [pc, #188]	@ (8006b2c <HAL_GPIO_Init+0x2bc>)
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	3302      	adds	r3, #2
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006a88:	4b2d      	ldr	r3, [pc, #180]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	492c      	ldr	r1, [pc, #176]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	608b      	str	r3, [r1, #8]
 8006a94:	e006      	b.n	8006aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006a96:	4b2a      	ldr	r3, [pc, #168]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	4928      	ldr	r1, [pc, #160]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006ab0:	4b23      	ldr	r3, [pc, #140]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	4922      	ldr	r1, [pc, #136]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60cb      	str	r3, [r1, #12]
 8006abc:	e006      	b.n	8006acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006abe:	4b20      	ldr	r3, [pc, #128]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	491e      	ldr	r1, [pc, #120]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d006      	beq.n	8006ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ad8:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	4918      	ldr	r1, [pc, #96]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	e006      	b.n	8006af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006ae6:	4b16      	ldr	r3, [pc, #88]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	4914      	ldr	r1, [pc, #80]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d021      	beq.n	8006b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	490e      	ldr	r1, [pc, #56]	@ (8006b40 <HAL_GPIO_Init+0x2d0>)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]
 8006b0c:	e021      	b.n	8006b52 <HAL_GPIO_Init+0x2e2>
 8006b0e:	bf00      	nop
 8006b10:	10320000 	.word	0x10320000
 8006b14:	10310000 	.word	0x10310000
 8006b18:	10220000 	.word	0x10220000
 8006b1c:	10210000 	.word	0x10210000
 8006b20:	10120000 	.word	0x10120000
 8006b24:	10110000 	.word	0x10110000
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010800 	.word	0x40010800
 8006b34:	40010c00 	.word	0x40010c00
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	40011400 	.word	0x40011400
 8006b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <HAL_GPIO_Init+0x304>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	4909      	ldr	r1, [pc, #36]	@ (8006b74 <HAL_GPIO_Init+0x304>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	3301      	adds	r3, #1
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f ae8e 	bne.w	8006884 <HAL_GPIO_Init+0x14>
  }
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	372c      	adds	r7, #44	@ 0x2c
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	40010400 	.word	0x40010400

08006b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	807b      	strh	r3, [r7, #2]
 8006b84:	4613      	mov	r3, r2
 8006b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b88:	787b      	ldrb	r3, [r7, #1]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b8e:	887a      	ldrh	r2, [r7, #2]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006b94:	e003      	b.n	8006b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006b96:	887b      	ldrh	r3, [r7, #2]
 8006b98:	041a      	lsls	r2, r3, #16
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	611a      	str	r2, [r3, #16]
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bb2:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bbe:	4a05      	ldr	r2, [pc, #20]	@ (8006bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fb fa76 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40010400 	.word	0x40010400

08006bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e12b      	b.n	8006e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fb ffce 	bl	8002ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	@ 0x24
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c3c:	f000 fcda 	bl	80075f4 <HAL_RCC_GetPCLK1Freq>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4a81      	ldr	r2, [pc, #516]	@ (8006e4c <HAL_I2C_Init+0x274>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d807      	bhi.n	8006c5c <HAL_I2C_Init+0x84>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a80      	ldr	r2, [pc, #512]	@ (8006e50 <HAL_I2C_Init+0x278>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	bf94      	ite	ls
 8006c54:	2301      	movls	r3, #1
 8006c56:	2300      	movhi	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e006      	b.n	8006c6a <HAL_I2C_Init+0x92>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8006e54 <HAL_I2C_Init+0x27c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bf94      	ite	ls
 8006c64:	2301      	movls	r3, #1
 8006c66:	2300      	movhi	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e0e7      	b.n	8006e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a78      	ldr	r2, [pc, #480]	@ (8006e58 <HAL_I2C_Init+0x280>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	0c9b      	lsrs	r3, r3, #18
 8006c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e4c <HAL_I2C_Init+0x274>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d802      	bhi.n	8006cac <HAL_I2C_Init+0xd4>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	e009      	b.n	8006cc0 <HAL_I2C_Init+0xe8>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	4a69      	ldr	r2, [pc, #420]	@ (8006e5c <HAL_I2C_Init+0x284>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	099b      	lsrs	r3, r3, #6
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006cd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	495c      	ldr	r1, [pc, #368]	@ (8006e4c <HAL_I2C_Init+0x274>)
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	d819      	bhi.n	8006d14 <HAL_I2C_Init+0x13c>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1e59      	subs	r1, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cee:	1c59      	adds	r1, r3, #1
 8006cf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_I2C_Init+0x138>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1e59      	subs	r1, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d08:	3301      	adds	r3, #1
 8006d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d0e:	e051      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d10:	2304      	movs	r3, #4
 8006d12:	e04f      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d111      	bne.n	8006d40 <HAL_I2C_Init+0x168>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1e58      	subs	r0, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6859      	ldr	r1, [r3, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	440b      	add	r3, r1
 8006d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	e012      	b.n	8006d66 <HAL_I2C_Init+0x18e>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1e58      	subs	r0, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6859      	ldr	r1, [r3, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	0099      	lsls	r1, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d56:	3301      	adds	r3, #1
 8006d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_I2C_Init+0x196>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e022      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10e      	bne.n	8006d94 <HAL_I2C_Init+0x1bc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1e58      	subs	r0, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6859      	ldr	r1, [r3, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	440b      	add	r3, r1
 8006d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d92:	e00f      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	1e58      	subs	r0, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	0099      	lsls	r1, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	6809      	ldr	r1, [r1, #0]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006de2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6911      	ldr	r1, [r2, #16]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68d2      	ldr	r2, [r2, #12]
 8006dee:	4311      	orrs	r1, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	000186a0 	.word	0x000186a0
 8006e50:	001e847f 	.word	0x001e847f
 8006e54:	003d08ff 	.word	0x003d08ff
 8006e58:	431bde83 	.word	0x431bde83
 8006e5c:	10624dd3 	.word	0x10624dd3

08006e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e272      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8087 	beq.w	8006f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e80:	4b92      	ldr	r3, [pc, #584]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d00c      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 030c 	and.w	r3, r3, #12
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d112      	bne.n	8006ebe <HAL_RCC_OscConfig+0x5e>
 8006e98:	4b8c      	ldr	r3, [pc, #560]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea4:	d10b      	bne.n	8006ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea6:	4b89      	ldr	r3, [pc, #548]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d06c      	beq.n	8006f8c <HAL_RCC_OscConfig+0x12c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d168      	bne.n	8006f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e24c      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec6:	d106      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x76>
 8006ec8:	4b80      	ldr	r3, [pc, #512]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e02e      	b.n	8006f34 <HAL_RCC_OscConfig+0xd4>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x98>
 8006ede:	4b7b      	ldr	r3, [pc, #492]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	4b78      	ldr	r3, [pc, #480]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a77      	ldr	r2, [pc, #476]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e01d      	b.n	8006f34 <HAL_RCC_OscConfig+0xd4>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f00:	d10c      	bne.n	8006f1c <HAL_RCC_OscConfig+0xbc>
 8006f02:	4b72      	ldr	r3, [pc, #456]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a71      	ldr	r2, [pc, #452]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6e      	ldr	r2, [pc, #440]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e00b      	b.n	8006f34 <HAL_RCC_OscConfig+0xd4>
 8006f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6a      	ldr	r2, [pc, #424]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	4b68      	ldr	r3, [pc, #416]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a67      	ldr	r2, [pc, #412]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d013      	beq.n	8006f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3c:	f7ff fb5c 	bl	80065f8 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f44:	f7ff fb58 	bl	80065f8 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b64      	cmp	r3, #100	@ 0x64
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e200      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f56:	4b5d      	ldr	r3, [pc, #372]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0xe4>
 8006f62:	e014      	b.n	8006f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7ff fb48 	bl	80065f8 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f6c:	f7ff fb44 	bl	80065f8 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b64      	cmp	r3, #100	@ 0x64
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e1ec      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f7e:	4b53      	ldr	r3, [pc, #332]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x10c>
 8006f8a:	e000      	b.n	8006f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d063      	beq.n	8007062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006fa6:	4b49      	ldr	r3, [pc, #292]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f003 030c 	and.w	r3, r3, #12
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d11c      	bne.n	8006fec <HAL_RCC_OscConfig+0x18c>
 8006fb2:	4b46      	ldr	r3, [pc, #280]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d116      	bne.n	8006fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fbe:	4b43      	ldr	r3, [pc, #268]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x176>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d001      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e1c0      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4939      	ldr	r1, [pc, #228]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fea:	e03a      	b.n	8007062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff4:	4b36      	ldr	r3, [pc, #216]	@ (80070d0 <HAL_RCC_OscConfig+0x270>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffa:	f7ff fafd 	bl	80065f8 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007002:	f7ff faf9 	bl	80065f8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e1a1      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007014:	4b2d      	ldr	r3, [pc, #180]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007020:	4b2a      	ldr	r3, [pc, #168]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4927      	ldr	r1, [pc, #156]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	600b      	str	r3, [r1, #0]
 8007034:	e015      	b.n	8007062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007036:	4b26      	ldr	r3, [pc, #152]	@ (80070d0 <HAL_RCC_OscConfig+0x270>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703c:	f7ff fadc 	bl	80065f8 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007044:	f7ff fad8 	bl	80065f8 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e180      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007056:	4b1d      	ldr	r3, [pc, #116]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d03a      	beq.n	80070e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d019      	beq.n	80070aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007076:	4b17      	ldr	r3, [pc, #92]	@ (80070d4 <HAL_RCC_OscConfig+0x274>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800707c:	f7ff fabc 	bl	80065f8 <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007084:	f7ff fab8 	bl	80065f8 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e160      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <HAL_RCC_OscConfig+0x26c>)
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0f0      	beq.n	8007084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80070a2:	2001      	movs	r0, #1
 80070a4:	f000 face 	bl	8007644 <RCC_Delay>
 80070a8:	e01c      	b.n	80070e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070aa:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <HAL_RCC_OscConfig+0x274>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b0:	f7ff faa2 	bl	80065f8 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b6:	e00f      	b.n	80070d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070b8:	f7ff fa9e 	bl	80065f8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d908      	bls.n	80070d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e146      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
 80070ca:	bf00      	nop
 80070cc:	40021000 	.word	0x40021000
 80070d0:	42420000 	.word	0x42420000
 80070d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d8:	4b92      	ldr	r3, [pc, #584]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e9      	bne.n	80070b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80a6 	beq.w	800723e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f6:	4b8b      	ldr	r3, [pc, #556]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007102:	4b88      	ldr	r3, [pc, #544]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4a87      	ldr	r2, [pc, #540]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800710c:	61d3      	str	r3, [r2, #28]
 800710e:	4b85      	ldr	r3, [pc, #532]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711e:	4b82      	ldr	r3, [pc, #520]	@ (8007328 <HAL_RCC_OscConfig+0x4c8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007126:	2b00      	cmp	r3, #0
 8007128:	d118      	bne.n	800715c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800712a:	4b7f      	ldr	r3, [pc, #508]	@ (8007328 <HAL_RCC_OscConfig+0x4c8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a7e      	ldr	r2, [pc, #504]	@ (8007328 <HAL_RCC_OscConfig+0x4c8>)
 8007130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007136:	f7ff fa5f 	bl	80065f8 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800713e:	f7ff fa5b 	bl	80065f8 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b64      	cmp	r3, #100	@ 0x64
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e103      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	4b75      	ldr	r3, [pc, #468]	@ (8007328 <HAL_RCC_OscConfig+0x4c8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d106      	bne.n	8007172 <HAL_RCC_OscConfig+0x312>
 8007164:	4b6f      	ldr	r3, [pc, #444]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	4a6e      	ldr	r2, [pc, #440]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	6213      	str	r3, [r2, #32]
 8007170:	e02d      	b.n	80071ce <HAL_RCC_OscConfig+0x36e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10c      	bne.n	8007194 <HAL_RCC_OscConfig+0x334>
 800717a:	4b6a      	ldr	r3, [pc, #424]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	4a69      	ldr	r2, [pc, #420]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	6213      	str	r3, [r2, #32]
 8007186:	4b67      	ldr	r3, [pc, #412]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	4a66      	ldr	r2, [pc, #408]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800718c:	f023 0304 	bic.w	r3, r3, #4
 8007190:	6213      	str	r3, [r2, #32]
 8007192:	e01c      	b.n	80071ce <HAL_RCC_OscConfig+0x36e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b05      	cmp	r3, #5
 800719a:	d10c      	bne.n	80071b6 <HAL_RCC_OscConfig+0x356>
 800719c:	4b61      	ldr	r3, [pc, #388]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	4a60      	ldr	r2, [pc, #384]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071a2:	f043 0304 	orr.w	r3, r3, #4
 80071a6:	6213      	str	r3, [r2, #32]
 80071a8:	4b5e      	ldr	r3, [pc, #376]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	4a5d      	ldr	r2, [pc, #372]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	6213      	str	r3, [r2, #32]
 80071b4:	e00b      	b.n	80071ce <HAL_RCC_OscConfig+0x36e>
 80071b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	4a5a      	ldr	r2, [pc, #360]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	6213      	str	r3, [r2, #32]
 80071c2:	4b58      	ldr	r3, [pc, #352]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4a57      	ldr	r2, [pc, #348]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d015      	beq.n	8007202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d6:	f7ff fa0f 	bl	80065f8 <HAL_GetTick>
 80071da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071dc:	e00a      	b.n	80071f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071de:	f7ff fa0b 	bl	80065f8 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e0b1      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0ee      	beq.n	80071de <HAL_RCC_OscConfig+0x37e>
 8007200:	e014      	b.n	800722c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007202:	f7ff f9f9 	bl	80065f8 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007208:	e00a      	b.n	8007220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720a:	f7ff f9f5 	bl	80065f8 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007218:	4293      	cmp	r3, r2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e09b      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007220:	4b40      	ldr	r3, [pc, #256]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1ee      	bne.n	800720a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d105      	bne.n	800723e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007232:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	4a3b      	ldr	r2, [pc, #236]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800723c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8087 	beq.w	8007356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007248:	4b36      	ldr	r3, [pc, #216]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f003 030c 	and.w	r3, r3, #12
 8007250:	2b08      	cmp	r3, #8
 8007252:	d061      	beq.n	8007318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d146      	bne.n	80072ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725c:	4b33      	ldr	r3, [pc, #204]	@ (800732c <HAL_RCC_OscConfig+0x4cc>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007262:	f7ff f9c9 	bl	80065f8 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726a:	f7ff f9c5 	bl	80065f8 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e06d      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800727c:	4b29      	ldr	r3, [pc, #164]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007290:	d108      	bne.n	80072a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007292:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4921      	ldr	r1, [pc, #132]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a19      	ldr	r1, [r3, #32]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	430b      	orrs	r3, r1
 80072b6:	491b      	ldr	r1, [pc, #108]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072bc:	4b1b      	ldr	r3, [pc, #108]	@ (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c2:	f7ff f999 	bl	80065f8 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ca:	f7ff f995 	bl	80065f8 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e03d      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072dc:	4b11      	ldr	r3, [pc, #68]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x46a>
 80072e8:	e035      	b.n	8007356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ea:	4b10      	ldr	r3, [pc, #64]	@ (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f0:	f7ff f982 	bl	80065f8 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f8:	f7ff f97e 	bl	80065f8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e026      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800730a:	4b06      	ldr	r3, [pc, #24]	@ (8007324 <HAL_RCC_OscConfig+0x4c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_OscConfig+0x498>
 8007316:	e01e      	b.n	8007356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d107      	bne.n	8007330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e019      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
 8007324:	40021000 	.word	0x40021000
 8007328:	40007000 	.word	0x40007000
 800732c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007330:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <HAL_RCC_OscConfig+0x500>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	429a      	cmp	r2, r3
 8007342:	d106      	bne.n	8007352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	429a      	cmp	r2, r3
 8007350:	d001      	beq.n	8007356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40021000 	.word	0x40021000

08007364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0d0      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007378:	4b6a      	ldr	r3, [pc, #424]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d910      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b67      	ldr	r3, [pc, #412]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 0207 	bic.w	r2, r3, #7
 800738e:	4965      	ldr	r1, [pc, #404]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b63      	ldr	r3, [pc, #396]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0b8      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d020      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073c0:	4b59      	ldr	r3, [pc, #356]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	4a58      	ldr	r2, [pc, #352]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073d8:	4b53      	ldr	r3, [pc, #332]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4a52      	ldr	r2, [pc, #328]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80073e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e4:	4b50      	ldr	r3, [pc, #320]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	494d      	ldr	r1, [pc, #308]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d040      	beq.n	8007484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d107      	bne.n	800741a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740a:	4b47      	ldr	r3, [pc, #284]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d115      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e07f      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d107      	bne.n	8007432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007422:	4b41      	ldr	r3, [pc, #260]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e073      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007432:	4b3d      	ldr	r3, [pc, #244]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e06b      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007442:	4b39      	ldr	r3, [pc, #228]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f023 0203 	bic.w	r2, r3, #3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4936      	ldr	r1, [pc, #216]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007454:	f7ff f8d0 	bl	80065f8 <HAL_GetTick>
 8007458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745a:	e00a      	b.n	8007472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745c:	f7ff f8cc 	bl	80065f8 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e053      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007472:	4b2d      	ldr	r3, [pc, #180]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 020c 	and.w	r2, r3, #12
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	429a      	cmp	r2, r3
 8007482:	d1eb      	bne.n	800745c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007484:	4b27      	ldr	r3, [pc, #156]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d210      	bcs.n	80074b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007492:	4b24      	ldr	r3, [pc, #144]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f023 0207 	bic.w	r2, r3, #7
 800749a:	4922      	ldr	r1, [pc, #136]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	4313      	orrs	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a2:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e032      	b.n	800751a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074c0:	4b19      	ldr	r3, [pc, #100]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4916      	ldr	r1, [pc, #88]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074de:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	490e      	ldr	r1, [pc, #56]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074f2:	f000 f821 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 80074f6:	4602      	mov	r2, r0
 80074f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	490a      	ldr	r1, [pc, #40]	@ (800752c <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	5ccb      	ldrb	r3, [r1, r3]
 8007506:	fa22 f303 	lsr.w	r3, r2, r3
 800750a:	4a09      	ldr	r2, [pc, #36]	@ (8007530 <HAL_RCC_ClockConfig+0x1cc>)
 800750c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800750e:	4b09      	ldr	r3, [pc, #36]	@ (8007534 <HAL_RCC_ClockConfig+0x1d0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff f82e 	bl	8006574 <HAL_InitTick>

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40022000 	.word	0x40022000
 8007528:	40021000 	.word	0x40021000
 800752c:	0800b678 	.word	0x0800b678
 8007530:	20000010 	.word	0x20000010
 8007534:	20000014 	.word	0x20000014

08007538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	2300      	movs	r3, #0
 800754c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007552:	4b1e      	ldr	r3, [pc, #120]	@ (80075cc <HAL_RCC_GetSysClockFreq+0x94>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b04      	cmp	r3, #4
 8007560:	d002      	beq.n	8007568 <HAL_RCC_GetSysClockFreq+0x30>
 8007562:	2b08      	cmp	r3, #8
 8007564:	d003      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x36>
 8007566:	e027      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007568:	4b19      	ldr	r3, [pc, #100]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800756a:	613b      	str	r3, [r7, #16]
      break;
 800756c:	e027      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	0c9b      	lsrs	r3, r3, #18
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007578:	5cd3      	ldrb	r3, [r2, r3]
 800757a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d010      	beq.n	80075a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007586:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <HAL_RCC_GetSysClockFreq+0x94>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	0c5b      	lsrs	r3, r3, #17
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	4a11      	ldr	r2, [pc, #68]	@ (80075d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007592:	5cd3      	ldrb	r3, [r2, r3]
 8007594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a0d      	ldr	r2, [pc, #52]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800759a:	fb03 f202 	mul.w	r2, r3, r2
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e004      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a0c      	ldr	r2, [pc, #48]	@ (80075dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80075ac:	fb02 f303 	mul.w	r3, r2, r3
 80075b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	613b      	str	r3, [r7, #16]
      break;
 80075b6:	e002      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80075ba:	613b      	str	r3, [r7, #16]
      break;
 80075bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075be:	693b      	ldr	r3, [r7, #16]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40021000 	.word	0x40021000
 80075d0:	007a1200 	.word	0x007a1200
 80075d4:	0800b838 	.word	0x0800b838
 80075d8:	0800b848 	.word	0x0800b848
 80075dc:	003d0900 	.word	0x003d0900

080075e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b02      	ldr	r3, [pc, #8]	@ (80075f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr
 80075f0:	20000010 	.word	0x20000010

080075f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075f8:	f7ff fff2 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b05      	ldr	r3, [pc, #20]	@ (8007614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	4903      	ldr	r1, [pc, #12]	@ (8007618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800760a:	5ccb      	ldrb	r3, [r1, r3]
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40021000 	.word	0x40021000
 8007618:	0800b688 	.word	0x0800b688

0800761c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007620:	f7ff ffde 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007624:	4602      	mov	r2, r0
 8007626:	4b05      	ldr	r3, [pc, #20]	@ (800763c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	0adb      	lsrs	r3, r3, #11
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	4903      	ldr	r1, [pc, #12]	@ (8007640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007632:	5ccb      	ldrb	r3, [r1, r3]
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	0800b688 	.word	0x0800b688

08007644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <RCC_Delay+0x34>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a0a      	ldr	r2, [pc, #40]	@ (800767c <RCC_Delay+0x38>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	0a5b      	lsrs	r3, r3, #9
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007660:	bf00      	nop
  }
  while (Delay --);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	60fa      	str	r2, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f9      	bne.n	8007660 <RCC_Delay+0x1c>
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr
 8007678:	20000010 	.word	0x20000010
 800767c:	10624dd3 	.word	0x10624dd3

08007680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e076      	b.n	8007780 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a2:	d009      	beq.n	80076b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	61da      	str	r2, [r3, #28]
 80076aa:	e005      	b.n	80076b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fb faa2 	bl	8002c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773c:	ea42 0103 	orr.w	r1, r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	0c1a      	lsrs	r2, r3, #16
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f002 0204 	and.w	r2, r2, #4
 800775e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800776e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007798:	f7fe ff2e 	bl	80065f8 <HAL_GetTick>
 800779c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d001      	beq.n	80077b2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
 80077b0:	e12a      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_SPI_Transmit+0x36>
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e122      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_SPI_Transmit+0x48>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e11b      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2203      	movs	r2, #3
 80077dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800781e:	d10f      	bne.n	8007840 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800782e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800783e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d007      	beq.n	800785e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007866:	d152      	bne.n	800790e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_Transmit+0xee>
 8007870:	8b7b      	ldrh	r3, [r7, #26]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d145      	bne.n	8007902 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	881a      	ldrh	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800789a:	e032      	b.n	8007902 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d112      	bne.n	80078d0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078ce:	e018      	b.n	8007902 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d0:	f7fe fe92 	bl	80065f8 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d803      	bhi.n	80078e8 <HAL_SPI_Transmit+0x160>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078e6:	d102      	bne.n	80078ee <HAL_SPI_Transmit+0x166>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d109      	bne.n	8007902 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e082      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1c7      	bne.n	800789c <HAL_SPI_Transmit+0x114>
 800790c:	e053      	b.n	80079b6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_SPI_Transmit+0x194>
 8007916:	8b7b      	ldrh	r3, [r7, #26]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d147      	bne.n	80079ac <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	7812      	ldrb	r2, [r2, #0]
 8007928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007942:	e033      	b.n	80079ac <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d113      	bne.n	800797a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	7812      	ldrb	r2, [r2, #0]
 800795e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007978:	e018      	b.n	80079ac <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797a:	f7fe fe3d 	bl	80065f8 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d803      	bhi.n	8007992 <HAL_SPI_Transmit+0x20a>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Transmit+0x210>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e02d      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1c6      	bne.n	8007944 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fbc4 	bl	8008148 <SPI_EndRxTxTransaction>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
  }
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d001      	beq.n	8007a30 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e104      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a38:	d112      	bne.n	8007a60 <HAL_SPI_Receive+0x50>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2204      	movs	r2, #4
 8007a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f8f3 	bl	8007c42 <HAL_SPI_TransmitReceive>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	e0ec      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a60:	f7fe fdca 	bl	80065f8 <HAL_GetTick>
 8007a64:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <HAL_SPI_Receive+0x62>
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e0e1      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_SPI_Receive+0x74>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e0da      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2204      	movs	r2, #4
 8007a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ad2:	d10f      	bne.n	8007af4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d007      	beq.n	8007b12 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d170      	bne.n	8007bfc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b1a:	e035      	b.n	8007b88 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d115      	bne.n	8007b56 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f103 020c 	add.w	r2, r3, #12
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b54:	e018      	b.n	8007b88 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b56:	f7fe fd4f 	bl	80065f8 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d803      	bhi.n	8007b6e <HAL_SPI_Receive+0x15e>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b6c:	d102      	bne.n	8007b74 <HAL_SPI_Receive+0x164>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e058      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1c4      	bne.n	8007b1c <HAL_SPI_Receive+0x10c>
 8007b92:	e038      	b.n	8007c06 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d113      	bne.n	8007bca <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	b292      	uxth	r2, r2
 8007bae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb4:	1c9a      	adds	r2, r3, #2
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bc8:	e018      	b.n	8007bfc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bca:	f7fe fd15 	bl	80065f8 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d803      	bhi.n	8007be2 <HAL_SPI_Receive+0x1d2>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be0:	d102      	bne.n	8007be8 <HAL_SPI_Receive+0x1d8>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e01e      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1c6      	bne.n	8007b94 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fa4a 	bl	80080a4 <SPI_EndRxTransaction>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b08a      	sub	sp, #40	@ 0x28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c50:	2301      	movs	r3, #1
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c54:	f7fe fcd0 	bl	80065f8 <HAL_GetTick>
 8007c58:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c60:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c68:	887b      	ldrh	r3, [r7, #2]
 8007c6a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c6c:	7ffb      	ldrb	r3, [r7, #31]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d00c      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x4a>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c78:	d106      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x46>
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d001      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e17f      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x5c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x5c>
 8007c98:	887b      	ldrh	r3, [r7, #2]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e174      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x6e>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e16d      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d003      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	887a      	ldrh	r2, [r7, #2]
 8007cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	887a      	ldrh	r2, [r7, #2]
 8007ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	887a      	ldrh	r2, [r7, #2]
 8007cee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b40      	cmp	r3, #64	@ 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d28:	d17e      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0xf6>
 8007d32:	8afb      	ldrh	r3, [r7, #22]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d16c      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d5c:	e059      	b.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d11b      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d113      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d119      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x1a4>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d014      	beq.n	8007de6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007de2:	2301      	movs	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007de6:	f7fe fc07 	bl	80065f8 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d80d      	bhi.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dfc:	d009      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e0bc      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1a0      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x11c>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d19b      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x11c>
 8007e26:	e082      	b.n	8007f2e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_SPI_TransmitReceive+0x1f4>
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d171      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e5c:	e05d      	b.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d11c      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d114      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d119      	bne.n	8007ee8 <HAL_SPI_TransmitReceive+0x2a6>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d014      	beq.n	8007ee8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ee8:	f7fe fb86 	bl	80065f8 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d803      	bhi.n	8007f00 <HAL_SPI_TransmitReceive+0x2be>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007efe:	d102      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x2c4>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e038      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d19c      	bne.n	8007e5e <HAL_SPI_TransmitReceive+0x21c>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d197      	bne.n	8007e5e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f2e:	6a3a      	ldr	r2, [r7, #32]
 8007f30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f908 	bl	8008148 <SPI_EndRxTxTransaction>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e01d      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3728      	adds	r7, #40	@ 0x28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fa4:	f7fe fb28 	bl	80065f8 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fb4:	f7fe fb20 	bl	80065f8 <HAL_GetTick>
 8007fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fba:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	015b      	lsls	r3, r3, #5
 8007fc0:	0d1b      	lsrs	r3, r3, #20
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	fb02 f303 	mul.w	r3, r2, r3
 8007fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fca:	e054      	b.n	8008076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fd2:	d050      	beq.n	8008076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fd4:	f7fe fb10 	bl	80065f8 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d902      	bls.n	8007fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d13d      	bne.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008002:	d111      	bne.n	8008028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800c:	d004      	beq.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008016:	d107      	bne.n	8008028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008030:	d10f      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e017      	b.n	8008096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	3b01      	subs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4013      	ands	r3, r2
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	429a      	cmp	r2, r3
 8008092:	d19b      	bne.n	8007fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000010 	.word	0x20000010

080080a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080b8:	d111      	bne.n	80080de <SPI_EndRxTransaction+0x3a>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c2:	d004      	beq.n	80080ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080cc:	d107      	bne.n	80080de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080e6:	d117      	bne.n	8008118 <SPI_EndRxTransaction+0x74>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080f0:	d112      	bne.n	8008118 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2200      	movs	r2, #0
 80080fa:	2101      	movs	r1, #1
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7ff ff49 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01a      	beq.n	800813e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e013      	b.n	8008140 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2200      	movs	r2, #0
 8008120:	2180      	movs	r1, #128	@ 0x80
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff ff36 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008132:	f043 0220 	orr.w	r2, r3, #32
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e000      	b.n	8008140 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2201      	movs	r2, #1
 800815c:	2102      	movs	r1, #2
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff ff18 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e013      	b.n	80081a2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	2180      	movs	r1, #128	@ 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff ff05 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008194:	f043 0220 	orr.w	r2, r3, #32
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e000      	b.n	80081a2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e041      	b.n	8008240 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fa fd6d 	bl	8002cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f000 f991 	bl	8008510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <HAL_TIM_PWM_Start+0x24>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e022      	b.n	80082b2 <HAL_TIM_PWM_Start+0x6a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b04      	cmp	r3, #4
 8008270:	d109      	bne.n	8008286 <HAL_TIM_PWM_Start+0x3e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b01      	cmp	r3, #1
 800827c:	bf14      	ite	ne
 800827e:	2301      	movne	r3, #1
 8008280:	2300      	moveq	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	e015      	b.n	80082b2 <HAL_TIM_PWM_Start+0x6a>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d109      	bne.n	80082a0 <HAL_TIM_PWM_Start+0x58>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	bf14      	ite	ne
 8008298:	2301      	movne	r3, #1
 800829a:	2300      	moveq	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e008      	b.n	80082b2 <HAL_TIM_PWM_Start+0x6a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e05e      	b.n	8008378 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <HAL_TIM_PWM_Start+0x82>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082c8:	e013      	b.n	80082f2 <HAL_TIM_PWM_Start+0xaa>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d104      	bne.n	80082da <HAL_TIM_PWM_Start+0x92>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082d8:	e00b      	b.n	80082f2 <HAL_TIM_PWM_Start+0xaa>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d104      	bne.n	80082ea <HAL_TIM_PWM_Start+0xa2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082e8:	e003      	b.n	80082f2 <HAL_TIM_PWM_Start+0xaa>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2202      	movs	r2, #2
 80082ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2201      	movs	r2, #1
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fafe 	bl	80088fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1e      	ldr	r2, [pc, #120]	@ (8008380 <HAL_TIM_PWM_Start+0x138>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d107      	bne.n	800831a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008318:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <HAL_TIM_PWM_Start+0x138>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_TIM_PWM_Start+0xfa>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800832c:	d009      	beq.n	8008342 <HAL_TIM_PWM_Start+0xfa>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <HAL_TIM_PWM_Start+0x13c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIM_PWM_Start+0xfa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a12      	ldr	r2, [pc, #72]	@ (8008388 <HAL_TIM_PWM_Start+0x140>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d111      	bne.n	8008366 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b06      	cmp	r3, #6
 8008352:	d010      	beq.n	8008376 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008364:	e007      	b.n	8008376 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0201 	orr.w	r2, r2, #1
 8008374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40000400 	.word	0x40000400
 8008388:	40000800 	.word	0x40000800

0800838c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e0ae      	b.n	8008508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	f200 809f 	bhi.w	80084f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	080083f5 	.word	0x080083f5
 80083c4:	080084f9 	.word	0x080084f9
 80083c8:	080084f9 	.word	0x080084f9
 80083cc:	080084f9 	.word	0x080084f9
 80083d0:	08008435 	.word	0x08008435
 80083d4:	080084f9 	.word	0x080084f9
 80083d8:	080084f9 	.word	0x080084f9
 80083dc:	080084f9 	.word	0x080084f9
 80083e0:	08008477 	.word	0x08008477
 80083e4:	080084f9 	.word	0x080084f9
 80083e8:	080084f9 	.word	0x080084f9
 80083ec:	080084f9 	.word	0x080084f9
 80083f0:	080084b7 	.word	0x080084b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f8f6 	bl	80085ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0208 	orr.w	r2, r2, #8
 800840e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0204 	bic.w	r2, r2, #4
 800841e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6999      	ldr	r1, [r3, #24]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	619a      	str	r2, [r3, #24]
      break;
 8008432:	e064      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f93c 	bl	80086b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800844e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800845e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6999      	ldr	r1, [r3, #24]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	021a      	lsls	r2, r3, #8
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	619a      	str	r2, [r3, #24]
      break;
 8008474:	e043      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f985 	bl	800878c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0208 	orr.w	r2, r2, #8
 8008490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0204 	bic.w	r2, r2, #4
 80084a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69d9      	ldr	r1, [r3, #28]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	61da      	str	r2, [r3, #28]
      break;
 80084b4:	e023      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f9cf 	bl	8008860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69da      	ldr	r2, [r3, #28]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69d9      	ldr	r1, [r3, #28]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	021a      	lsls	r2, r3, #8
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	61da      	str	r2, [r3, #28]
      break;
 80084f6:	e002      	b.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	75fb      	strb	r3, [r7, #23]
      break;
 80084fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a2f      	ldr	r2, [pc, #188]	@ (80085e0 <TIM_Base_SetConfig+0xd0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00b      	beq.n	8008540 <TIM_Base_SetConfig+0x30>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852e:	d007      	beq.n	8008540 <TIM_Base_SetConfig+0x30>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2c      	ldr	r2, [pc, #176]	@ (80085e4 <TIM_Base_SetConfig+0xd4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_Base_SetConfig+0x30>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2b      	ldr	r2, [pc, #172]	@ (80085e8 <TIM_Base_SetConfig+0xd8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d108      	bne.n	8008552 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a22      	ldr	r2, [pc, #136]	@ (80085e0 <TIM_Base_SetConfig+0xd0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00b      	beq.n	8008572 <TIM_Base_SetConfig+0x62>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008560:	d007      	beq.n	8008572 <TIM_Base_SetConfig+0x62>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1f      	ldr	r2, [pc, #124]	@ (80085e4 <TIM_Base_SetConfig+0xd4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_Base_SetConfig+0x62>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1e      	ldr	r2, [pc, #120]	@ (80085e8 <TIM_Base_SetConfig+0xd8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d108      	bne.n	8008584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a0d      	ldr	r2, [pc, #52]	@ (80085e0 <TIM_Base_SetConfig+0xd0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d103      	bne.n	80085b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f023 0201 	bic.w	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	611a      	str	r2, [r3, #16]
  }
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800

080085ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f023 0201 	bic.w	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f023 0302 	bic.w	r3, r3, #2
 8008634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1c      	ldr	r2, [pc, #112]	@ (80086b4 <TIM_OC1_SetConfig+0xc8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d10c      	bne.n	8008662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0308 	bic.w	r3, r3, #8
 800864e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 0304 	bic.w	r3, r3, #4
 8008660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a13      	ldr	r2, [pc, #76]	@ (80086b4 <TIM_OC1_SetConfig+0xc8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d111      	bne.n	800868e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	621a      	str	r2, [r3, #32]
}
 80086a8:	bf00      	nop
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40012c00 	.word	0x40012c00

080086b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	f023 0210 	bic.w	r2, r3, #16
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	021b      	lsls	r3, r3, #8
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f023 0320 	bic.w	r3, r3, #32
 8008702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <TIM_OC2_SetConfig+0xd0>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d10d      	bne.n	8008734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800871e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <TIM_OC2_SetConfig+0xd0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d113      	bne.n	8008764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800874a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	621a      	str	r2, [r3, #32]
}
 800877e:	bf00      	nop
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	40012c00 	.word	0x40012c00

0800878c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a1d      	ldr	r2, [pc, #116]	@ (800885c <TIM_OC3_SetConfig+0xd0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d10d      	bne.n	8008806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a14      	ldr	r2, [pc, #80]	@ (800885c <TIM_OC3_SetConfig+0xd0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d113      	bne.n	8008836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800881c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	621a      	str	r2, [r3, #32]
}
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	40012c00 	.word	0x40012c00

08008860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800888e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	031b      	lsls	r3, r3, #12
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a0f      	ldr	r2, [pc, #60]	@ (80088f8 <TIM_OC4_SetConfig+0x98>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d109      	bne.n	80088d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	019b      	lsls	r3, r3, #6
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr
 80088f8:	40012c00 	.word	0x40012c00

080088fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	2201      	movs	r2, #1
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a1a      	ldr	r2, [r3, #32]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	43db      	mvns	r3, r3
 800891e:	401a      	ands	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f003 031f 	and.w	r3, r3, #31
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008958:	2302      	movs	r3, #2
 800895a:	e046      	b.n	80089ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a16      	ldr	r2, [pc, #88]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d00e      	beq.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a8:	d009      	beq.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a12      	ldr	r2, [pc, #72]	@ (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d004      	beq.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a10      	ldr	r2, [pc, #64]	@ (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d10c      	bne.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40000400 	.word	0x40000400
 80089fc:	40000800 	.word	0x40000800

08008a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e042      	b.n	8008a98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fa f9d8 	bl	8002ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2224      	movs	r2, #36	@ 0x24
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa67 	bl	8008f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	695a      	ldr	r2, [r3, #20]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	@ 0x28
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d175      	bne.n	8008bac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_UART_Transmit+0x2c>
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e06e      	b.n	8008bae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2221      	movs	r2, #33	@ 0x21
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ade:	f7fd fd8b 	bl	80065f8 <HAL_GetTick>
 8008ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	88fa      	ldrh	r2, [r7, #6]
 8008aee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af8:	d108      	bne.n	8008b0c <HAL_UART_Transmit+0x6c>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d104      	bne.n	8008b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e003      	b.n	8008b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b14:	e02e      	b.n	8008b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f904 	bl	8008d2e <UART_WaitOnFlagUntilTimeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e03a      	b.n	8008bae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10b      	bne.n	8008b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	3302      	adds	r3, #2
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	e007      	b.n	8008b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1cb      	bne.n	8008b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	2140      	movs	r1, #64	@ 0x40
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f8d0 	bl	8008d2e <UART_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e006      	b.n	8008bae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e000      	b.n	8008bae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b08a      	sub	sp, #40	@ 0x28
 8008bba:	af02      	add	r7, sp, #8
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	f040 8081 	bne.w	8008cda <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <HAL_UART_Receive+0x2e>
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e079      	b.n	8008cdc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2222      	movs	r2, #34	@ 0x22
 8008bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bfc:	f7fd fcfc 	bl	80065f8 <HAL_GetTick>
 8008c00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c16:	d108      	bne.n	8008c2a <HAL_UART_Receive+0x74>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	61bb      	str	r3, [r7, #24]
 8008c28:	e003      	b.n	8008c32 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008c32:	e047      	b.n	8008cc4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2120      	movs	r1, #32
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f875 	bl	8008d2e <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e042      	b.n	8008cdc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10c      	bne.n	8008c76 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	3302      	adds	r3, #2
 8008c72:	61bb      	str	r3, [r7, #24]
 8008c74:	e01f      	b.n	8008cb6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7e:	d007      	beq.n	8008c90 <HAL_UART_Receive+0xda>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <HAL_UART_Receive+0xe8>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e008      	b.n	8008cb0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1b2      	bne.n	8008c34 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e000      	b.n	8008cdc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008cda:	2302      	movs	r3, #2
  }
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d112      	bne.n	8008d24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_UART_Receive_IT+0x26>
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e00b      	b.n	8008d26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	461a      	mov	r2, r3
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f860 	bl	8008de0 <UART_Start_Receive_IT>
 8008d20:	4603      	mov	r3, r0
 8008d22:	e000      	b.n	8008d26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d3e:	e03b      	b.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d46:	d037      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d48:	f7fd fc56 	bl	80065f8 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d302      	bcc.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e03a      	b.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d023      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b80      	cmp	r3, #128	@ 0x80
 8008d74:	d020      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b40      	cmp	r3, #64	@ 0x40
 8008d7a:	d01d      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d116      	bne.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f856 	bl	8008e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2208      	movs	r2, #8
 8008daa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e00f      	b.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2301      	moveq	r3, #1
 8008dca:	2300      	movne	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	461a      	mov	r2, r3
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d0b4      	beq.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2222      	movs	r2, #34	@ 0x22
 8008e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695a      	ldr	r2, [r3, #20]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0201 	orr.w	r2, r2, #1
 8008e34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f042 0220 	orr.w	r2, r2, #32
 8008e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr

08008e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b095      	sub	sp, #84	@ 0x54
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	330c      	adds	r3, #12
 8008e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e5      	bne.n	8008e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3314      	adds	r3, #20
 8008e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3314      	adds	r3, #20
 8008eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d119      	bne.n	8008efe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f023 0310 	bic.w	r3, r3, #16
 8008ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eea:	61ba      	str	r2, [r7, #24]
 8008eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6979      	ldr	r1, [r7, #20]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e5      	bne.n	8008eca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f0c:	bf00      	nop
 8008f0e:	3754      	adds	r7, #84	@ 0x54
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr
	...

08008f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008f52:	f023 030c 	bic.w	r3, r3, #12
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800902c <UART_SetConfig+0x114>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d103      	bne.n	8008f88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f80:	f7fe fb4c 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	e002      	b.n	8008f8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f88:	f7fe fb34 	bl	80075f4 <HAL_RCC_GetPCLK1Freq>
 8008f8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009a      	lsls	r2, r3, #2
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa4:	4a22      	ldr	r2, [pc, #136]	@ (8009030 <UART_SetConfig+0x118>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	0119      	lsls	r1, r3, #4
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009a      	lsls	r2, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8009030 <UART_SetConfig+0x118>)
 8008fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2064      	movs	r0, #100	@ 0x64
 8008fce:	fb00 f303 	mul.w	r3, r0, r3
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	3332      	adds	r3, #50	@ 0x32
 8008fd8:	4a15      	ldr	r2, [pc, #84]	@ (8009030 <UART_SetConfig+0x118>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fe4:	4419      	add	r1, r3
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009a      	lsls	r2, r3, #2
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8009030 <UART_SetConfig+0x118>)
 8008ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	2064      	movs	r0, #100	@ 0x64
 8009006:	fb00 f303 	mul.w	r3, r0, r3
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	3332      	adds	r3, #50	@ 0x32
 8009010:	4a07      	ldr	r2, [pc, #28]	@ (8009030 <UART_SetConfig+0x118>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	440a      	add	r2, r1
 8009022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40013800 	.word	0x40013800
 8009030:	51eb851f 	.word	0x51eb851f

08009034 <atoi>:
 8009034:	220a      	movs	r2, #10
 8009036:	2100      	movs	r1, #0
 8009038:	f000 b8ce 	b.w	80091d8 <strtol>

0800903c <sniprintf>:
 800903c:	b40c      	push	{r2, r3}
 800903e:	b530      	push	{r4, r5, lr}
 8009040:	4b17      	ldr	r3, [pc, #92]	@ (80090a0 <sniprintf+0x64>)
 8009042:	1e0c      	subs	r4, r1, #0
 8009044:	681d      	ldr	r5, [r3, #0]
 8009046:	b09d      	sub	sp, #116	@ 0x74
 8009048:	da08      	bge.n	800905c <sniprintf+0x20>
 800904a:	238b      	movs	r3, #139	@ 0x8b
 800904c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	b01d      	add	sp, #116	@ 0x74
 8009054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009058:	b002      	add	sp, #8
 800905a:	4770      	bx	lr
 800905c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009064:	bf0c      	ite	eq
 8009066:	4623      	moveq	r3, r4
 8009068:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009074:	9002      	str	r0, [sp, #8]
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800907c:	4628      	mov	r0, r5
 800907e:	ab21      	add	r3, sp, #132	@ 0x84
 8009080:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009082:	a902      	add	r1, sp, #8
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f000 f989 	bl	800939c <_svfiprintf_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	bfbc      	itt	lt
 800908e:	238b      	movlt	r3, #139	@ 0x8b
 8009090:	602b      	strlt	r3, [r5, #0]
 8009092:	2c00      	cmp	r4, #0
 8009094:	d0dd      	beq.n	8009052 <sniprintf+0x16>
 8009096:	2200      	movs	r2, #0
 8009098:	9b02      	ldr	r3, [sp, #8]
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e7d9      	b.n	8009052 <sniprintf+0x16>
 800909e:	bf00      	nop
 80090a0:	2000001c 	.word	0x2000001c

080090a4 <siprintf>:
 80090a4:	b40e      	push	{r1, r2, r3}
 80090a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090aa:	b500      	push	{lr}
 80090ac:	b09c      	sub	sp, #112	@ 0x70
 80090ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80090b0:	9002      	str	r0, [sp, #8]
 80090b2:	9006      	str	r0, [sp, #24]
 80090b4:	9107      	str	r1, [sp, #28]
 80090b6:	9104      	str	r1, [sp, #16]
 80090b8:	4808      	ldr	r0, [pc, #32]	@ (80090dc <siprintf+0x38>)
 80090ba:	4909      	ldr	r1, [pc, #36]	@ (80090e0 <siprintf+0x3c>)
 80090bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	a902      	add	r1, sp, #8
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	f000 f968 	bl	800939c <_svfiprintf_r>
 80090cc:	2200      	movs	r2, #0
 80090ce:	9b02      	ldr	r3, [sp, #8]
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	b01c      	add	sp, #112	@ 0x70
 80090d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d8:	b003      	add	sp, #12
 80090da:	4770      	bx	lr
 80090dc:	2000001c 	.word	0x2000001c
 80090e0:	ffff0208 	.word	0xffff0208

080090e4 <_strtol_l.constprop.0>:
 80090e4:	2b24      	cmp	r3, #36	@ 0x24
 80090e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ea:	4686      	mov	lr, r0
 80090ec:	4690      	mov	r8, r2
 80090ee:	d801      	bhi.n	80090f4 <_strtol_l.constprop.0+0x10>
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <_strtol_l.constprop.0+0x1e>
 80090f4:	f000 f8b4 	bl	8009260 <__errno>
 80090f8:	2316      	movs	r3, #22
 80090fa:	6003      	str	r3, [r0, #0]
 80090fc:	2000      	movs	r0, #0
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	460d      	mov	r5, r1
 8009104:	4833      	ldr	r0, [pc, #204]	@ (80091d4 <_strtol_l.constprop.0+0xf0>)
 8009106:	462a      	mov	r2, r5
 8009108:	f815 4b01 	ldrb.w	r4, [r5], #1
 800910c:	5d06      	ldrb	r6, [r0, r4]
 800910e:	f016 0608 	ands.w	r6, r6, #8
 8009112:	d1f8      	bne.n	8009106 <_strtol_l.constprop.0+0x22>
 8009114:	2c2d      	cmp	r4, #45	@ 0x2d
 8009116:	d12d      	bne.n	8009174 <_strtol_l.constprop.0+0x90>
 8009118:	2601      	movs	r6, #1
 800911a:	782c      	ldrb	r4, [r5, #0]
 800911c:	1c95      	adds	r5, r2, #2
 800911e:	f033 0210 	bics.w	r2, r3, #16
 8009122:	d109      	bne.n	8009138 <_strtol_l.constprop.0+0x54>
 8009124:	2c30      	cmp	r4, #48	@ 0x30
 8009126:	d12a      	bne.n	800917e <_strtol_l.constprop.0+0x9a>
 8009128:	782a      	ldrb	r2, [r5, #0]
 800912a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800912e:	2a58      	cmp	r2, #88	@ 0x58
 8009130:	d125      	bne.n	800917e <_strtol_l.constprop.0+0x9a>
 8009132:	2310      	movs	r3, #16
 8009134:	786c      	ldrb	r4, [r5, #1]
 8009136:	3502      	adds	r5, #2
 8009138:	2200      	movs	r2, #0
 800913a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800913e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009142:	fbbc f9f3 	udiv	r9, ip, r3
 8009146:	4610      	mov	r0, r2
 8009148:	fb03 ca19 	mls	sl, r3, r9, ip
 800914c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009150:	2f09      	cmp	r7, #9
 8009152:	d81b      	bhi.n	800918c <_strtol_l.constprop.0+0xa8>
 8009154:	463c      	mov	r4, r7
 8009156:	42a3      	cmp	r3, r4
 8009158:	dd27      	ble.n	80091aa <_strtol_l.constprop.0+0xc6>
 800915a:	1c57      	adds	r7, r2, #1
 800915c:	d007      	beq.n	800916e <_strtol_l.constprop.0+0x8a>
 800915e:	4581      	cmp	r9, r0
 8009160:	d320      	bcc.n	80091a4 <_strtol_l.constprop.0+0xc0>
 8009162:	d101      	bne.n	8009168 <_strtol_l.constprop.0+0x84>
 8009164:	45a2      	cmp	sl, r4
 8009166:	db1d      	blt.n	80091a4 <_strtol_l.constprop.0+0xc0>
 8009168:	2201      	movs	r2, #1
 800916a:	fb00 4003 	mla	r0, r0, r3, r4
 800916e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009172:	e7eb      	b.n	800914c <_strtol_l.constprop.0+0x68>
 8009174:	2c2b      	cmp	r4, #43	@ 0x2b
 8009176:	bf04      	itt	eq
 8009178:	782c      	ldrbeq	r4, [r5, #0]
 800917a:	1c95      	addeq	r5, r2, #2
 800917c:	e7cf      	b.n	800911e <_strtol_l.constprop.0+0x3a>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1da      	bne.n	8009138 <_strtol_l.constprop.0+0x54>
 8009182:	2c30      	cmp	r4, #48	@ 0x30
 8009184:	bf0c      	ite	eq
 8009186:	2308      	moveq	r3, #8
 8009188:	230a      	movne	r3, #10
 800918a:	e7d5      	b.n	8009138 <_strtol_l.constprop.0+0x54>
 800918c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009190:	2f19      	cmp	r7, #25
 8009192:	d801      	bhi.n	8009198 <_strtol_l.constprop.0+0xb4>
 8009194:	3c37      	subs	r4, #55	@ 0x37
 8009196:	e7de      	b.n	8009156 <_strtol_l.constprop.0+0x72>
 8009198:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800919c:	2f19      	cmp	r7, #25
 800919e:	d804      	bhi.n	80091aa <_strtol_l.constprop.0+0xc6>
 80091a0:	3c57      	subs	r4, #87	@ 0x57
 80091a2:	e7d8      	b.n	8009156 <_strtol_l.constprop.0+0x72>
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a8:	e7e1      	b.n	800916e <_strtol_l.constprop.0+0x8a>
 80091aa:	1c53      	adds	r3, r2, #1
 80091ac:	d108      	bne.n	80091c0 <_strtol_l.constprop.0+0xdc>
 80091ae:	2322      	movs	r3, #34	@ 0x22
 80091b0:	4660      	mov	r0, ip
 80091b2:	f8ce 3000 	str.w	r3, [lr]
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	d0a0      	beq.n	80090fe <_strtol_l.constprop.0+0x1a>
 80091bc:	1e69      	subs	r1, r5, #1
 80091be:	e006      	b.n	80091ce <_strtol_l.constprop.0+0xea>
 80091c0:	b106      	cbz	r6, 80091c4 <_strtol_l.constprop.0+0xe0>
 80091c2:	4240      	negs	r0, r0
 80091c4:	f1b8 0f00 	cmp.w	r8, #0
 80091c8:	d099      	beq.n	80090fe <_strtol_l.constprop.0+0x1a>
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	d1f6      	bne.n	80091bc <_strtol_l.constprop.0+0xd8>
 80091ce:	f8c8 1000 	str.w	r1, [r8]
 80091d2:	e794      	b.n	80090fe <_strtol_l.constprop.0+0x1a>
 80091d4:	0800b84b 	.word	0x0800b84b

080091d8 <strtol>:
 80091d8:	4613      	mov	r3, r2
 80091da:	460a      	mov	r2, r1
 80091dc:	4601      	mov	r1, r0
 80091de:	4802      	ldr	r0, [pc, #8]	@ (80091e8 <strtol+0x10>)
 80091e0:	6800      	ldr	r0, [r0, #0]
 80091e2:	f7ff bf7f 	b.w	80090e4 <_strtol_l.constprop.0>
 80091e6:	bf00      	nop
 80091e8:	2000001c 	.word	0x2000001c

080091ec <strcat>:
 80091ec:	4602      	mov	r2, r0
 80091ee:	b510      	push	{r4, lr}
 80091f0:	7814      	ldrb	r4, [r2, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	3201      	adds	r2, #1
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d1fa      	bne.n	80091f0 <strcat+0x4>
 80091fa:	3b01      	subs	r3, #1
 80091fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009200:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009204:	2a00      	cmp	r2, #0
 8009206:	d1f9      	bne.n	80091fc <strcat+0x10>
 8009208:	bd10      	pop	{r4, pc}

0800920a <strncmp>:
 800920a:	b510      	push	{r4, lr}
 800920c:	b16a      	cbz	r2, 800922a <strncmp+0x20>
 800920e:	3901      	subs	r1, #1
 8009210:	1884      	adds	r4, r0, r2
 8009212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009216:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800921a:	429a      	cmp	r2, r3
 800921c:	d103      	bne.n	8009226 <strncmp+0x1c>
 800921e:	42a0      	cmp	r0, r4
 8009220:	d001      	beq.n	8009226 <strncmp+0x1c>
 8009222:	2a00      	cmp	r2, #0
 8009224:	d1f5      	bne.n	8009212 <strncmp+0x8>
 8009226:	1ad0      	subs	r0, r2, r3
 8009228:	bd10      	pop	{r4, pc}
 800922a:	4610      	mov	r0, r2
 800922c:	e7fc      	b.n	8009228 <strncmp+0x1e>

0800922e <memcmp>:
 800922e:	b510      	push	{r4, lr}
 8009230:	3901      	subs	r1, #1
 8009232:	4402      	add	r2, r0
 8009234:	4290      	cmp	r0, r2
 8009236:	d101      	bne.n	800923c <memcmp+0xe>
 8009238:	2000      	movs	r0, #0
 800923a:	e005      	b.n	8009248 <memcmp+0x1a>
 800923c:	7803      	ldrb	r3, [r0, #0]
 800923e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009242:	42a3      	cmp	r3, r4
 8009244:	d001      	beq.n	800924a <memcmp+0x1c>
 8009246:	1b18      	subs	r0, r3, r4
 8009248:	bd10      	pop	{r4, pc}
 800924a:	3001      	adds	r0, #1
 800924c:	e7f2      	b.n	8009234 <memcmp+0x6>

0800924e <memset>:
 800924e:	4603      	mov	r3, r0
 8009250:	4402      	add	r2, r0
 8009252:	4293      	cmp	r3, r2
 8009254:	d100      	bne.n	8009258 <memset+0xa>
 8009256:	4770      	bx	lr
 8009258:	f803 1b01 	strb.w	r1, [r3], #1
 800925c:	e7f9      	b.n	8009252 <memset+0x4>
	...

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	@ (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000001c 	.word	0x2000001c

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	2600      	movs	r6, #0
 8009270:	4d0c      	ldr	r5, [pc, #48]	@ (80092a4 <__libc_init_array+0x38>)
 8009272:	4c0d      	ldr	r4, [pc, #52]	@ (80092a8 <__libc_init_array+0x3c>)
 8009274:	1b64      	subs	r4, r4, r5
 8009276:	10a4      	asrs	r4, r4, #2
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	f001 fb90 	bl	800a9a0 <_init>
 8009280:	2600      	movs	r6, #0
 8009282:	4d0a      	ldr	r5, [pc, #40]	@ (80092ac <__libc_init_array+0x40>)
 8009284:	4c0a      	ldr	r4, [pc, #40]	@ (80092b0 <__libc_init_array+0x44>)
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	0800b9b8 	.word	0x0800b9b8
 80092a8:	0800b9b8 	.word	0x0800b9b8
 80092ac:	0800b9b8 	.word	0x0800b9b8
 80092b0:	0800b9bc 	.word	0x0800b9bc

080092b4 <__retarget_lock_acquire_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_release_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <memcpy>:
 80092b8:	440a      	add	r2, r1
 80092ba:	4291      	cmp	r1, r2
 80092bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092c0:	d100      	bne.n	80092c4 <memcpy+0xc>
 80092c2:	4770      	bx	lr
 80092c4:	b510      	push	{r4, lr}
 80092c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ca:	4291      	cmp	r1, r2
 80092cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d0:	d1f9      	bne.n	80092c6 <memcpy+0xe>
 80092d2:	bd10      	pop	{r4, pc}

080092d4 <strcpy>:
 80092d4:	4603      	mov	r3, r0
 80092d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092da:	f803 2b01 	strb.w	r2, [r3], #1
 80092de:	2a00      	cmp	r2, #0
 80092e0:	d1f9      	bne.n	80092d6 <strcpy+0x2>
 80092e2:	4770      	bx	lr

080092e4 <__ssputs_r>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	461f      	mov	r7, r3
 80092ea:	688e      	ldr	r6, [r1, #8]
 80092ec:	4682      	mov	sl, r0
 80092ee:	42be      	cmp	r6, r7
 80092f0:	460c      	mov	r4, r1
 80092f2:	4690      	mov	r8, r2
 80092f4:	680b      	ldr	r3, [r1, #0]
 80092f6:	d82d      	bhi.n	8009354 <__ssputs_r+0x70>
 80092f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009300:	d026      	beq.n	8009350 <__ssputs_r+0x6c>
 8009302:	6965      	ldr	r5, [r4, #20]
 8009304:	6909      	ldr	r1, [r1, #16]
 8009306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800930a:	eba3 0901 	sub.w	r9, r3, r1
 800930e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009312:	1c7b      	adds	r3, r7, #1
 8009314:	444b      	add	r3, r9
 8009316:	106d      	asrs	r5, r5, #1
 8009318:	429d      	cmp	r5, r3
 800931a:	bf38      	it	cc
 800931c:	461d      	movcc	r5, r3
 800931e:	0553      	lsls	r3, r2, #21
 8009320:	d527      	bpl.n	8009372 <__ssputs_r+0x8e>
 8009322:	4629      	mov	r1, r5
 8009324:	f000 f958 	bl	80095d8 <_malloc_r>
 8009328:	4606      	mov	r6, r0
 800932a:	b360      	cbz	r0, 8009386 <__ssputs_r+0xa2>
 800932c:	464a      	mov	r2, r9
 800932e:	6921      	ldr	r1, [r4, #16]
 8009330:	f7ff ffc2 	bl	80092b8 <memcpy>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800933a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	6126      	str	r6, [r4, #16]
 8009342:	444e      	add	r6, r9
 8009344:	6026      	str	r6, [r4, #0]
 8009346:	463e      	mov	r6, r7
 8009348:	6165      	str	r5, [r4, #20]
 800934a:	eba5 0509 	sub.w	r5, r5, r9
 800934e:	60a5      	str	r5, [r4, #8]
 8009350:	42be      	cmp	r6, r7
 8009352:	d900      	bls.n	8009356 <__ssputs_r+0x72>
 8009354:	463e      	mov	r6, r7
 8009356:	4632      	mov	r2, r6
 8009358:	4641      	mov	r1, r8
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	f000 fb88 	bl	8009a70 <memmove>
 8009360:	2000      	movs	r0, #0
 8009362:	68a3      	ldr	r3, [r4, #8]
 8009364:	1b9b      	subs	r3, r3, r6
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	4433      	add	r3, r6
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009372:	462a      	mov	r2, r5
 8009374:	f000 fb4e 	bl	8009a14 <_realloc_r>
 8009378:	4606      	mov	r6, r0
 800937a:	2800      	cmp	r0, #0
 800937c:	d1e0      	bne.n	8009340 <__ssputs_r+0x5c>
 800937e:	4650      	mov	r0, sl
 8009380:	6921      	ldr	r1, [r4, #16]
 8009382:	f000 fbad 	bl	8009ae0 <_free_r>
 8009386:	230c      	movs	r3, #12
 8009388:	f8ca 3000 	str.w	r3, [sl]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	e7e9      	b.n	800936e <__ssputs_r+0x8a>
	...

0800939c <_svfiprintf_r>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	4698      	mov	r8, r3
 80093a2:	898b      	ldrh	r3, [r1, #12]
 80093a4:	4607      	mov	r7, r0
 80093a6:	061b      	lsls	r3, r3, #24
 80093a8:	460d      	mov	r5, r1
 80093aa:	4614      	mov	r4, r2
 80093ac:	b09d      	sub	sp, #116	@ 0x74
 80093ae:	d510      	bpl.n	80093d2 <_svfiprintf_r+0x36>
 80093b0:	690b      	ldr	r3, [r1, #16]
 80093b2:	b973      	cbnz	r3, 80093d2 <_svfiprintf_r+0x36>
 80093b4:	2140      	movs	r1, #64	@ 0x40
 80093b6:	f000 f90f 	bl	80095d8 <_malloc_r>
 80093ba:	6028      	str	r0, [r5, #0]
 80093bc:	6128      	str	r0, [r5, #16]
 80093be:	b930      	cbnz	r0, 80093ce <_svfiprintf_r+0x32>
 80093c0:	230c      	movs	r3, #12
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c8:	b01d      	add	sp, #116	@ 0x74
 80093ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ce:	2340      	movs	r3, #64	@ 0x40
 80093d0:	616b      	str	r3, [r5, #20]
 80093d2:	2300      	movs	r3, #0
 80093d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d6:	2320      	movs	r3, #32
 80093d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093dc:	2330      	movs	r3, #48	@ 0x30
 80093de:	f04f 0901 	mov.w	r9, #1
 80093e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009580 <_svfiprintf_r+0x1e4>
 80093ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093ee:	4623      	mov	r3, r4
 80093f0:	469a      	mov	sl, r3
 80093f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f6:	b10a      	cbz	r2, 80093fc <_svfiprintf_r+0x60>
 80093f8:	2a25      	cmp	r2, #37	@ 0x25
 80093fa:	d1f9      	bne.n	80093f0 <_svfiprintf_r+0x54>
 80093fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009400:	d00b      	beq.n	800941a <_svfiprintf_r+0x7e>
 8009402:	465b      	mov	r3, fp
 8009404:	4622      	mov	r2, r4
 8009406:	4629      	mov	r1, r5
 8009408:	4638      	mov	r0, r7
 800940a:	f7ff ff6b 	bl	80092e4 <__ssputs_r>
 800940e:	3001      	adds	r0, #1
 8009410:	f000 80a7 	beq.w	8009562 <_svfiprintf_r+0x1c6>
 8009414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009416:	445a      	add	r2, fp
 8009418:	9209      	str	r2, [sp, #36]	@ 0x24
 800941a:	f89a 3000 	ldrb.w	r3, [sl]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 809f 	beq.w	8009562 <_svfiprintf_r+0x1c6>
 8009424:	2300      	movs	r3, #0
 8009426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800942a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942e:	f10a 0a01 	add.w	sl, sl, #1
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800943a:	931a      	str	r3, [sp, #104]	@ 0x68
 800943c:	4654      	mov	r4, sl
 800943e:	2205      	movs	r2, #5
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	484e      	ldr	r0, [pc, #312]	@ (8009580 <_svfiprintf_r+0x1e4>)
 8009446:	f000 fb3d 	bl	8009ac4 <memchr>
 800944a:	9a04      	ldr	r2, [sp, #16]
 800944c:	b9d8      	cbnz	r0, 8009486 <_svfiprintf_r+0xea>
 800944e:	06d0      	lsls	r0, r2, #27
 8009450:	bf44      	itt	mi
 8009452:	2320      	movmi	r3, #32
 8009454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009458:	0711      	lsls	r1, r2, #28
 800945a:	bf44      	itt	mi
 800945c:	232b      	movmi	r3, #43	@ 0x2b
 800945e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009462:	f89a 3000 	ldrb.w	r3, [sl]
 8009466:	2b2a      	cmp	r3, #42	@ 0x2a
 8009468:	d015      	beq.n	8009496 <_svfiprintf_r+0xfa>
 800946a:	4654      	mov	r4, sl
 800946c:	2000      	movs	r0, #0
 800946e:	f04f 0c0a 	mov.w	ip, #10
 8009472:	9a07      	ldr	r2, [sp, #28]
 8009474:	4621      	mov	r1, r4
 8009476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947a:	3b30      	subs	r3, #48	@ 0x30
 800947c:	2b09      	cmp	r3, #9
 800947e:	d94b      	bls.n	8009518 <_svfiprintf_r+0x17c>
 8009480:	b1b0      	cbz	r0, 80094b0 <_svfiprintf_r+0x114>
 8009482:	9207      	str	r2, [sp, #28]
 8009484:	e014      	b.n	80094b0 <_svfiprintf_r+0x114>
 8009486:	eba0 0308 	sub.w	r3, r0, r8
 800948a:	fa09 f303 	lsl.w	r3, r9, r3
 800948e:	4313      	orrs	r3, r2
 8009490:	46a2      	mov	sl, r4
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	e7d2      	b.n	800943c <_svfiprintf_r+0xa0>
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	1d19      	adds	r1, r3, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	9103      	str	r1, [sp, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bfbb      	ittet	lt
 80094a2:	425b      	neglt	r3, r3
 80094a4:	f042 0202 	orrlt.w	r2, r2, #2
 80094a8:	9307      	strge	r3, [sp, #28]
 80094aa:	9307      	strlt	r3, [sp, #28]
 80094ac:	bfb8      	it	lt
 80094ae:	9204      	strlt	r2, [sp, #16]
 80094b0:	7823      	ldrb	r3, [r4, #0]
 80094b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80094b4:	d10a      	bne.n	80094cc <_svfiprintf_r+0x130>
 80094b6:	7863      	ldrb	r3, [r4, #1]
 80094b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ba:	d132      	bne.n	8009522 <_svfiprintf_r+0x186>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	3402      	adds	r4, #2
 80094c0:	1d1a      	adds	r2, r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	9203      	str	r2, [sp, #12]
 80094c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009584 <_svfiprintf_r+0x1e8>
 80094d0:	2203      	movs	r2, #3
 80094d2:	4650      	mov	r0, sl
 80094d4:	7821      	ldrb	r1, [r4, #0]
 80094d6:	f000 faf5 	bl	8009ac4 <memchr>
 80094da:	b138      	cbz	r0, 80094ec <_svfiprintf_r+0x150>
 80094dc:	2240      	movs	r2, #64	@ 0x40
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	eba0 000a 	sub.w	r0, r0, sl
 80094e4:	4082      	lsls	r2, r0
 80094e6:	4313      	orrs	r3, r2
 80094e8:	3401      	adds	r4, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	2206      	movs	r2, #6
 80094f2:	4825      	ldr	r0, [pc, #148]	@ (8009588 <_svfiprintf_r+0x1ec>)
 80094f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094f8:	f000 fae4 	bl	8009ac4 <memchr>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d036      	beq.n	800956e <_svfiprintf_r+0x1d2>
 8009500:	4b22      	ldr	r3, [pc, #136]	@ (800958c <_svfiprintf_r+0x1f0>)
 8009502:	bb1b      	cbnz	r3, 800954c <_svfiprintf_r+0x1b0>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	3307      	adds	r3, #7
 8009508:	f023 0307 	bic.w	r3, r3, #7
 800950c:	3308      	adds	r3, #8
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009512:	4433      	add	r3, r6
 8009514:	9309      	str	r3, [sp, #36]	@ 0x24
 8009516:	e76a      	b.n	80093ee <_svfiprintf_r+0x52>
 8009518:	460c      	mov	r4, r1
 800951a:	2001      	movs	r0, #1
 800951c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009520:	e7a8      	b.n	8009474 <_svfiprintf_r+0xd8>
 8009522:	2300      	movs	r3, #0
 8009524:	f04f 0c0a 	mov.w	ip, #10
 8009528:	4619      	mov	r1, r3
 800952a:	3401      	adds	r4, #1
 800952c:	9305      	str	r3, [sp, #20]
 800952e:	4620      	mov	r0, r4
 8009530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009534:	3a30      	subs	r2, #48	@ 0x30
 8009536:	2a09      	cmp	r2, #9
 8009538:	d903      	bls.n	8009542 <_svfiprintf_r+0x1a6>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0c6      	beq.n	80094cc <_svfiprintf_r+0x130>
 800953e:	9105      	str	r1, [sp, #20]
 8009540:	e7c4      	b.n	80094cc <_svfiprintf_r+0x130>
 8009542:	4604      	mov	r4, r0
 8009544:	2301      	movs	r3, #1
 8009546:	fb0c 2101 	mla	r1, ip, r1, r2
 800954a:	e7f0      	b.n	800952e <_svfiprintf_r+0x192>
 800954c:	ab03      	add	r3, sp, #12
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	462a      	mov	r2, r5
 8009552:	4638      	mov	r0, r7
 8009554:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <_svfiprintf_r+0x1f4>)
 8009556:	a904      	add	r1, sp, #16
 8009558:	f3af 8000 	nop.w
 800955c:	1c42      	adds	r2, r0, #1
 800955e:	4606      	mov	r6, r0
 8009560:	d1d6      	bne.n	8009510 <_svfiprintf_r+0x174>
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	065b      	lsls	r3, r3, #25
 8009566:	f53f af2d 	bmi.w	80093c4 <_svfiprintf_r+0x28>
 800956a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800956c:	e72c      	b.n	80093c8 <_svfiprintf_r+0x2c>
 800956e:	ab03      	add	r3, sp, #12
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	462a      	mov	r2, r5
 8009574:	4638      	mov	r0, r7
 8009576:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <_svfiprintf_r+0x1f4>)
 8009578:	a904      	add	r1, sp, #16
 800957a:	f000 f91f 	bl	80097bc <_printf_i>
 800957e:	e7ed      	b.n	800955c <_svfiprintf_r+0x1c0>
 8009580:	0800b94b 	.word	0x0800b94b
 8009584:	0800b951 	.word	0x0800b951
 8009588:	0800b955 	.word	0x0800b955
 800958c:	00000000 	.word	0x00000000
 8009590:	080092e5 	.word	0x080092e5

08009594 <sbrk_aligned>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4e0f      	ldr	r6, [pc, #60]	@ (80095d4 <sbrk_aligned+0x40>)
 8009598:	460c      	mov	r4, r1
 800959a:	6831      	ldr	r1, [r6, #0]
 800959c:	4605      	mov	r5, r0
 800959e:	b911      	cbnz	r1, 80095a6 <sbrk_aligned+0x12>
 80095a0:	f000 fa80 	bl	8009aa4 <_sbrk_r>
 80095a4:	6030      	str	r0, [r6, #0]
 80095a6:	4621      	mov	r1, r4
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 fa7b 	bl	8009aa4 <_sbrk_r>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d103      	bne.n	80095ba <sbrk_aligned+0x26>
 80095b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095b6:	4620      	mov	r0, r4
 80095b8:	bd70      	pop	{r4, r5, r6, pc}
 80095ba:	1cc4      	adds	r4, r0, #3
 80095bc:	f024 0403 	bic.w	r4, r4, #3
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d0f8      	beq.n	80095b6 <sbrk_aligned+0x22>
 80095c4:	1a21      	subs	r1, r4, r0
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 fa6c 	bl	8009aa4 <_sbrk_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d1f2      	bne.n	80095b6 <sbrk_aligned+0x22>
 80095d0:	e7ef      	b.n	80095b2 <sbrk_aligned+0x1e>
 80095d2:	bf00      	nop
 80095d4:	2000069c 	.word	0x2000069c

080095d8 <_malloc_r>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	1ccd      	adds	r5, r1, #3
 80095de:	f025 0503 	bic.w	r5, r5, #3
 80095e2:	3508      	adds	r5, #8
 80095e4:	2d0c      	cmp	r5, #12
 80095e6:	bf38      	it	cc
 80095e8:	250c      	movcc	r5, #12
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	db01      	blt.n	80095f4 <_malloc_r+0x1c>
 80095f0:	42a9      	cmp	r1, r5
 80095f2:	d904      	bls.n	80095fe <_malloc_r+0x26>
 80095f4:	230c      	movs	r3, #12
 80095f6:	6033      	str	r3, [r6, #0]
 80095f8:	2000      	movs	r0, #0
 80095fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096d4 <_malloc_r+0xfc>
 8009602:	f000 f9fb 	bl	80099fc <__malloc_lock>
 8009606:	f8d8 3000 	ldr.w	r3, [r8]
 800960a:	461c      	mov	r4, r3
 800960c:	bb44      	cbnz	r4, 8009660 <_malloc_r+0x88>
 800960e:	4629      	mov	r1, r5
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff ffbf 	bl	8009594 <sbrk_aligned>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	4604      	mov	r4, r0
 800961a:	d158      	bne.n	80096ce <_malloc_r+0xf6>
 800961c:	f8d8 4000 	ldr.w	r4, [r8]
 8009620:	4627      	mov	r7, r4
 8009622:	2f00      	cmp	r7, #0
 8009624:	d143      	bne.n	80096ae <_malloc_r+0xd6>
 8009626:	2c00      	cmp	r4, #0
 8009628:	d04b      	beq.n	80096c2 <_malloc_r+0xea>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	4639      	mov	r1, r7
 800962e:	4630      	mov	r0, r6
 8009630:	eb04 0903 	add.w	r9, r4, r3
 8009634:	f000 fa36 	bl	8009aa4 <_sbrk_r>
 8009638:	4581      	cmp	r9, r0
 800963a:	d142      	bne.n	80096c2 <_malloc_r+0xea>
 800963c:	6821      	ldr	r1, [r4, #0]
 800963e:	4630      	mov	r0, r6
 8009640:	1a6d      	subs	r5, r5, r1
 8009642:	4629      	mov	r1, r5
 8009644:	f7ff ffa6 	bl	8009594 <sbrk_aligned>
 8009648:	3001      	adds	r0, #1
 800964a:	d03a      	beq.n	80096c2 <_malloc_r+0xea>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	442b      	add	r3, r5
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	f8d8 3000 	ldr.w	r3, [r8]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	bb62      	cbnz	r2, 80096b4 <_malloc_r+0xdc>
 800965a:	f8c8 7000 	str.w	r7, [r8]
 800965e:	e00f      	b.n	8009680 <_malloc_r+0xa8>
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	1b52      	subs	r2, r2, r5
 8009664:	d420      	bmi.n	80096a8 <_malloc_r+0xd0>
 8009666:	2a0b      	cmp	r2, #11
 8009668:	d917      	bls.n	800969a <_malloc_r+0xc2>
 800966a:	1961      	adds	r1, r4, r5
 800966c:	42a3      	cmp	r3, r4
 800966e:	6025      	str	r5, [r4, #0]
 8009670:	bf18      	it	ne
 8009672:	6059      	strne	r1, [r3, #4]
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	bf08      	it	eq
 8009678:	f8c8 1000 	streq.w	r1, [r8]
 800967c:	5162      	str	r2, [r4, r5]
 800967e:	604b      	str	r3, [r1, #4]
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f9c1 	bl	8009a08 <__malloc_unlock>
 8009686:	f104 000b 	add.w	r0, r4, #11
 800968a:	1d23      	adds	r3, r4, #4
 800968c:	f020 0007 	bic.w	r0, r0, #7
 8009690:	1ac2      	subs	r2, r0, r3
 8009692:	bf1c      	itt	ne
 8009694:	1a1b      	subne	r3, r3, r0
 8009696:	50a3      	strne	r3, [r4, r2]
 8009698:	e7af      	b.n	80095fa <_malloc_r+0x22>
 800969a:	6862      	ldr	r2, [r4, #4]
 800969c:	42a3      	cmp	r3, r4
 800969e:	bf0c      	ite	eq
 80096a0:	f8c8 2000 	streq.w	r2, [r8]
 80096a4:	605a      	strne	r2, [r3, #4]
 80096a6:	e7eb      	b.n	8009680 <_malloc_r+0xa8>
 80096a8:	4623      	mov	r3, r4
 80096aa:	6864      	ldr	r4, [r4, #4]
 80096ac:	e7ae      	b.n	800960c <_malloc_r+0x34>
 80096ae:	463c      	mov	r4, r7
 80096b0:	687f      	ldr	r7, [r7, #4]
 80096b2:	e7b6      	b.n	8009622 <_malloc_r+0x4a>
 80096b4:	461a      	mov	r2, r3
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d1fb      	bne.n	80096b4 <_malloc_r+0xdc>
 80096bc:	2300      	movs	r3, #0
 80096be:	6053      	str	r3, [r2, #4]
 80096c0:	e7de      	b.n	8009680 <_malloc_r+0xa8>
 80096c2:	230c      	movs	r3, #12
 80096c4:	4630      	mov	r0, r6
 80096c6:	6033      	str	r3, [r6, #0]
 80096c8:	f000 f99e 	bl	8009a08 <__malloc_unlock>
 80096cc:	e794      	b.n	80095f8 <_malloc_r+0x20>
 80096ce:	6005      	str	r5, [r0, #0]
 80096d0:	e7d6      	b.n	8009680 <_malloc_r+0xa8>
 80096d2:	bf00      	nop
 80096d4:	200006a0 	.word	0x200006a0

080096d8 <_printf_common>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	4616      	mov	r6, r2
 80096de:	4698      	mov	r8, r3
 80096e0:	688a      	ldr	r2, [r1, #8]
 80096e2:	690b      	ldr	r3, [r1, #16]
 80096e4:	4607      	mov	r7, r0
 80096e6:	4293      	cmp	r3, r2
 80096e8:	bfb8      	it	lt
 80096ea:	4613      	movlt	r3, r2
 80096ec:	6033      	str	r3, [r6, #0]
 80096ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096f2:	460c      	mov	r4, r1
 80096f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096f8:	b10a      	cbz	r2, 80096fe <_printf_common+0x26>
 80096fa:	3301      	adds	r3, #1
 80096fc:	6033      	str	r3, [r6, #0]
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	0699      	lsls	r1, r3, #26
 8009702:	bf42      	ittt	mi
 8009704:	6833      	ldrmi	r3, [r6, #0]
 8009706:	3302      	addmi	r3, #2
 8009708:	6033      	strmi	r3, [r6, #0]
 800970a:	6825      	ldr	r5, [r4, #0]
 800970c:	f015 0506 	ands.w	r5, r5, #6
 8009710:	d106      	bne.n	8009720 <_printf_common+0x48>
 8009712:	f104 0a19 	add.w	sl, r4, #25
 8009716:	68e3      	ldr	r3, [r4, #12]
 8009718:	6832      	ldr	r2, [r6, #0]
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	42ab      	cmp	r3, r5
 800971e:	dc2b      	bgt.n	8009778 <_printf_common+0xa0>
 8009720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009724:	6822      	ldr	r2, [r4, #0]
 8009726:	3b00      	subs	r3, #0
 8009728:	bf18      	it	ne
 800972a:	2301      	movne	r3, #1
 800972c:	0692      	lsls	r2, r2, #26
 800972e:	d430      	bmi.n	8009792 <_printf_common+0xba>
 8009730:	4641      	mov	r1, r8
 8009732:	4638      	mov	r0, r7
 8009734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009738:	47c8      	blx	r9
 800973a:	3001      	adds	r0, #1
 800973c:	d023      	beq.n	8009786 <_printf_common+0xae>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	f003 0306 	and.w	r3, r3, #6
 8009746:	2b04      	cmp	r3, #4
 8009748:	bf14      	ite	ne
 800974a:	2500      	movne	r5, #0
 800974c:	6833      	ldreq	r3, [r6, #0]
 800974e:	f04f 0600 	mov.w	r6, #0
 8009752:	bf08      	it	eq
 8009754:	68e5      	ldreq	r5, [r4, #12]
 8009756:	f104 041a 	add.w	r4, r4, #26
 800975a:	bf08      	it	eq
 800975c:	1aed      	subeq	r5, r5, r3
 800975e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009762:	bf08      	it	eq
 8009764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009768:	4293      	cmp	r3, r2
 800976a:	bfc4      	itt	gt
 800976c:	1a9b      	subgt	r3, r3, r2
 800976e:	18ed      	addgt	r5, r5, r3
 8009770:	42b5      	cmp	r5, r6
 8009772:	d11a      	bne.n	80097aa <_printf_common+0xd2>
 8009774:	2000      	movs	r0, #0
 8009776:	e008      	b.n	800978a <_printf_common+0xb2>
 8009778:	2301      	movs	r3, #1
 800977a:	4652      	mov	r2, sl
 800977c:	4641      	mov	r1, r8
 800977e:	4638      	mov	r0, r7
 8009780:	47c8      	blx	r9
 8009782:	3001      	adds	r0, #1
 8009784:	d103      	bne.n	800978e <_printf_common+0xb6>
 8009786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800978a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978e:	3501      	adds	r5, #1
 8009790:	e7c1      	b.n	8009716 <_printf_common+0x3e>
 8009792:	2030      	movs	r0, #48	@ 0x30
 8009794:	18e1      	adds	r1, r4, r3
 8009796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097a0:	4422      	add	r2, r4
 80097a2:	3302      	adds	r3, #2
 80097a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097a8:	e7c2      	b.n	8009730 <_printf_common+0x58>
 80097aa:	2301      	movs	r3, #1
 80097ac:	4622      	mov	r2, r4
 80097ae:	4641      	mov	r1, r8
 80097b0:	4638      	mov	r0, r7
 80097b2:	47c8      	blx	r9
 80097b4:	3001      	adds	r0, #1
 80097b6:	d0e6      	beq.n	8009786 <_printf_common+0xae>
 80097b8:	3601      	adds	r6, #1
 80097ba:	e7d9      	b.n	8009770 <_printf_common+0x98>

080097bc <_printf_i>:
 80097bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	7e0f      	ldrb	r7, [r1, #24]
 80097c2:	4691      	mov	r9, r2
 80097c4:	2f78      	cmp	r7, #120	@ 0x78
 80097c6:	4680      	mov	r8, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	469a      	mov	sl, r3
 80097cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097d2:	d807      	bhi.n	80097e4 <_printf_i+0x28>
 80097d4:	2f62      	cmp	r7, #98	@ 0x62
 80097d6:	d80a      	bhi.n	80097ee <_printf_i+0x32>
 80097d8:	2f00      	cmp	r7, #0
 80097da:	f000 80d3 	beq.w	8009984 <_printf_i+0x1c8>
 80097de:	2f58      	cmp	r7, #88	@ 0x58
 80097e0:	f000 80ba 	beq.w	8009958 <_printf_i+0x19c>
 80097e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097ec:	e03a      	b.n	8009864 <_printf_i+0xa8>
 80097ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097f2:	2b15      	cmp	r3, #21
 80097f4:	d8f6      	bhi.n	80097e4 <_printf_i+0x28>
 80097f6:	a101      	add	r1, pc, #4	@ (adr r1, 80097fc <_printf_i+0x40>)
 80097f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097fc:	08009855 	.word	0x08009855
 8009800:	08009869 	.word	0x08009869
 8009804:	080097e5 	.word	0x080097e5
 8009808:	080097e5 	.word	0x080097e5
 800980c:	080097e5 	.word	0x080097e5
 8009810:	080097e5 	.word	0x080097e5
 8009814:	08009869 	.word	0x08009869
 8009818:	080097e5 	.word	0x080097e5
 800981c:	080097e5 	.word	0x080097e5
 8009820:	080097e5 	.word	0x080097e5
 8009824:	080097e5 	.word	0x080097e5
 8009828:	0800996b 	.word	0x0800996b
 800982c:	08009893 	.word	0x08009893
 8009830:	08009925 	.word	0x08009925
 8009834:	080097e5 	.word	0x080097e5
 8009838:	080097e5 	.word	0x080097e5
 800983c:	0800998d 	.word	0x0800998d
 8009840:	080097e5 	.word	0x080097e5
 8009844:	08009893 	.word	0x08009893
 8009848:	080097e5 	.word	0x080097e5
 800984c:	080097e5 	.word	0x080097e5
 8009850:	0800992d 	.word	0x0800992d
 8009854:	6833      	ldr	r3, [r6, #0]
 8009856:	1d1a      	adds	r2, r3, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6032      	str	r2, [r6, #0]
 800985c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009864:	2301      	movs	r3, #1
 8009866:	e09e      	b.n	80099a6 <_printf_i+0x1ea>
 8009868:	6833      	ldr	r3, [r6, #0]
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	1d19      	adds	r1, r3, #4
 800986e:	6031      	str	r1, [r6, #0]
 8009870:	0606      	lsls	r6, r0, #24
 8009872:	d501      	bpl.n	8009878 <_printf_i+0xbc>
 8009874:	681d      	ldr	r5, [r3, #0]
 8009876:	e003      	b.n	8009880 <_printf_i+0xc4>
 8009878:	0645      	lsls	r5, r0, #25
 800987a:	d5fb      	bpl.n	8009874 <_printf_i+0xb8>
 800987c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009880:	2d00      	cmp	r5, #0
 8009882:	da03      	bge.n	800988c <_printf_i+0xd0>
 8009884:	232d      	movs	r3, #45	@ 0x2d
 8009886:	426d      	negs	r5, r5
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800988c:	230a      	movs	r3, #10
 800988e:	4859      	ldr	r0, [pc, #356]	@ (80099f4 <_printf_i+0x238>)
 8009890:	e011      	b.n	80098b6 <_printf_i+0xfa>
 8009892:	6821      	ldr	r1, [r4, #0]
 8009894:	6833      	ldr	r3, [r6, #0]
 8009896:	0608      	lsls	r0, r1, #24
 8009898:	f853 5b04 	ldr.w	r5, [r3], #4
 800989c:	d402      	bmi.n	80098a4 <_printf_i+0xe8>
 800989e:	0649      	lsls	r1, r1, #25
 80098a0:	bf48      	it	mi
 80098a2:	b2ad      	uxthmi	r5, r5
 80098a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80098a6:	6033      	str	r3, [r6, #0]
 80098a8:	bf14      	ite	ne
 80098aa:	230a      	movne	r3, #10
 80098ac:	2308      	moveq	r3, #8
 80098ae:	4851      	ldr	r0, [pc, #324]	@ (80099f4 <_printf_i+0x238>)
 80098b0:	2100      	movs	r1, #0
 80098b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098b6:	6866      	ldr	r6, [r4, #4]
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	bfa8      	it	ge
 80098bc:	6821      	ldrge	r1, [r4, #0]
 80098be:	60a6      	str	r6, [r4, #8]
 80098c0:	bfa4      	itt	ge
 80098c2:	f021 0104 	bicge.w	r1, r1, #4
 80098c6:	6021      	strge	r1, [r4, #0]
 80098c8:	b90d      	cbnz	r5, 80098ce <_printf_i+0x112>
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d04b      	beq.n	8009966 <_printf_i+0x1aa>
 80098ce:	4616      	mov	r6, r2
 80098d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80098d4:	fb03 5711 	mls	r7, r3, r1, r5
 80098d8:	5dc7      	ldrb	r7, [r0, r7]
 80098da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098de:	462f      	mov	r7, r5
 80098e0:	42bb      	cmp	r3, r7
 80098e2:	460d      	mov	r5, r1
 80098e4:	d9f4      	bls.n	80098d0 <_printf_i+0x114>
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d10b      	bne.n	8009902 <_printf_i+0x146>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	07df      	lsls	r7, r3, #31
 80098ee:	d508      	bpl.n	8009902 <_printf_i+0x146>
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	6861      	ldr	r1, [r4, #4]
 80098f4:	4299      	cmp	r1, r3
 80098f6:	bfde      	ittt	le
 80098f8:	2330      	movle	r3, #48	@ 0x30
 80098fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009902:	1b92      	subs	r2, r2, r6
 8009904:	6122      	str	r2, [r4, #16]
 8009906:	464b      	mov	r3, r9
 8009908:	4621      	mov	r1, r4
 800990a:	4640      	mov	r0, r8
 800990c:	f8cd a000 	str.w	sl, [sp]
 8009910:	aa03      	add	r2, sp, #12
 8009912:	f7ff fee1 	bl	80096d8 <_printf_common>
 8009916:	3001      	adds	r0, #1
 8009918:	d14a      	bne.n	80099b0 <_printf_i+0x1f4>
 800991a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800991e:	b004      	add	sp, #16
 8009920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	f043 0320 	orr.w	r3, r3, #32
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	2778      	movs	r7, #120	@ 0x78
 800992e:	4832      	ldr	r0, [pc, #200]	@ (80099f8 <_printf_i+0x23c>)
 8009930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	6831      	ldr	r1, [r6, #0]
 8009938:	061f      	lsls	r7, r3, #24
 800993a:	f851 5b04 	ldr.w	r5, [r1], #4
 800993e:	d402      	bmi.n	8009946 <_printf_i+0x18a>
 8009940:	065f      	lsls	r7, r3, #25
 8009942:	bf48      	it	mi
 8009944:	b2ad      	uxthmi	r5, r5
 8009946:	6031      	str	r1, [r6, #0]
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	bf44      	itt	mi
 800994c:	f043 0320 	orrmi.w	r3, r3, #32
 8009950:	6023      	strmi	r3, [r4, #0]
 8009952:	b11d      	cbz	r5, 800995c <_printf_i+0x1a0>
 8009954:	2310      	movs	r3, #16
 8009956:	e7ab      	b.n	80098b0 <_printf_i+0xf4>
 8009958:	4826      	ldr	r0, [pc, #152]	@ (80099f4 <_printf_i+0x238>)
 800995a:	e7e9      	b.n	8009930 <_printf_i+0x174>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	f023 0320 	bic.w	r3, r3, #32
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	e7f6      	b.n	8009954 <_printf_i+0x198>
 8009966:	4616      	mov	r6, r2
 8009968:	e7bd      	b.n	80098e6 <_printf_i+0x12a>
 800996a:	6833      	ldr	r3, [r6, #0]
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1d18      	adds	r0, r3, #4
 8009970:	6961      	ldr	r1, [r4, #20]
 8009972:	6030      	str	r0, [r6, #0]
 8009974:	062e      	lsls	r6, r5, #24
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	d501      	bpl.n	800997e <_printf_i+0x1c2>
 800997a:	6019      	str	r1, [r3, #0]
 800997c:	e002      	b.n	8009984 <_printf_i+0x1c8>
 800997e:	0668      	lsls	r0, r5, #25
 8009980:	d5fb      	bpl.n	800997a <_printf_i+0x1be>
 8009982:	8019      	strh	r1, [r3, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	4616      	mov	r6, r2
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	e7bc      	b.n	8009906 <_printf_i+0x14a>
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	2100      	movs	r1, #0
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	6032      	str	r2, [r6, #0]
 8009994:	681e      	ldr	r6, [r3, #0]
 8009996:	6862      	ldr	r2, [r4, #4]
 8009998:	4630      	mov	r0, r6
 800999a:	f000 f893 	bl	8009ac4 <memchr>
 800999e:	b108      	cbz	r0, 80099a4 <_printf_i+0x1e8>
 80099a0:	1b80      	subs	r0, r0, r6
 80099a2:	6060      	str	r0, [r4, #4]
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	2300      	movs	r3, #0
 80099aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ae:	e7aa      	b.n	8009906 <_printf_i+0x14a>
 80099b0:	4632      	mov	r2, r6
 80099b2:	4649      	mov	r1, r9
 80099b4:	4640      	mov	r0, r8
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	47d0      	blx	sl
 80099ba:	3001      	adds	r0, #1
 80099bc:	d0ad      	beq.n	800991a <_printf_i+0x15e>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	079b      	lsls	r3, r3, #30
 80099c2:	d413      	bmi.n	80099ec <_printf_i+0x230>
 80099c4:	68e0      	ldr	r0, [r4, #12]
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	4298      	cmp	r0, r3
 80099ca:	bfb8      	it	lt
 80099cc:	4618      	movlt	r0, r3
 80099ce:	e7a6      	b.n	800991e <_printf_i+0x162>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4632      	mov	r2, r6
 80099d4:	4649      	mov	r1, r9
 80099d6:	4640      	mov	r0, r8
 80099d8:	47d0      	blx	sl
 80099da:	3001      	adds	r0, #1
 80099dc:	d09d      	beq.n	800991a <_printf_i+0x15e>
 80099de:	3501      	adds	r5, #1
 80099e0:	68e3      	ldr	r3, [r4, #12]
 80099e2:	9903      	ldr	r1, [sp, #12]
 80099e4:	1a5b      	subs	r3, r3, r1
 80099e6:	42ab      	cmp	r3, r5
 80099e8:	dcf2      	bgt.n	80099d0 <_printf_i+0x214>
 80099ea:	e7eb      	b.n	80099c4 <_printf_i+0x208>
 80099ec:	2500      	movs	r5, #0
 80099ee:	f104 0619 	add.w	r6, r4, #25
 80099f2:	e7f5      	b.n	80099e0 <_printf_i+0x224>
 80099f4:	0800b95c 	.word	0x0800b95c
 80099f8:	0800b96d 	.word	0x0800b96d

080099fc <__malloc_lock>:
 80099fc:	4801      	ldr	r0, [pc, #4]	@ (8009a04 <__malloc_lock+0x8>)
 80099fe:	f7ff bc59 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 8009a02:	bf00      	nop
 8009a04:	20000698 	.word	0x20000698

08009a08 <__malloc_unlock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	@ (8009a10 <__malloc_unlock+0x8>)
 8009a0a:	f7ff bc54 	b.w	80092b6 <__retarget_lock_release_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20000698 	.word	0x20000698

08009a14 <_realloc_r>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4615      	mov	r5, r2
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	b921      	cbnz	r1, 8009a2a <_realloc_r+0x16>
 8009a20:	4611      	mov	r1, r2
 8009a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a26:	f7ff bdd7 	b.w	80095d8 <_malloc_r>
 8009a2a:	b92a      	cbnz	r2, 8009a38 <_realloc_r+0x24>
 8009a2c:	f000 f858 	bl	8009ae0 <_free_r>
 8009a30:	2400      	movs	r4, #0
 8009a32:	4620      	mov	r0, r4
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	f000 f89a 	bl	8009b70 <_malloc_usable_size_r>
 8009a3c:	4285      	cmp	r5, r0
 8009a3e:	4606      	mov	r6, r0
 8009a40:	d802      	bhi.n	8009a48 <_realloc_r+0x34>
 8009a42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a46:	d8f4      	bhi.n	8009a32 <_realloc_r+0x1e>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff fdc4 	bl	80095d8 <_malloc_r>
 8009a50:	4607      	mov	r7, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0ec      	beq.n	8009a30 <_realloc_r+0x1c>
 8009a56:	42b5      	cmp	r5, r6
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	bf28      	it	cs
 8009a5e:	4632      	movcs	r2, r6
 8009a60:	f7ff fc2a 	bl	80092b8 <memcpy>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4640      	mov	r0, r8
 8009a68:	f000 f83a 	bl	8009ae0 <_free_r>
 8009a6c:	463c      	mov	r4, r7
 8009a6e:	e7e0      	b.n	8009a32 <_realloc_r+0x1e>

08009a70 <memmove>:
 8009a70:	4288      	cmp	r0, r1
 8009a72:	b510      	push	{r4, lr}
 8009a74:	eb01 0402 	add.w	r4, r1, r2
 8009a78:	d902      	bls.n	8009a80 <memmove+0x10>
 8009a7a:	4284      	cmp	r4, r0
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	d807      	bhi.n	8009a90 <memmove+0x20>
 8009a80:	1e43      	subs	r3, r0, #1
 8009a82:	42a1      	cmp	r1, r4
 8009a84:	d008      	beq.n	8009a98 <memmove+0x28>
 8009a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a8e:	e7f8      	b.n	8009a82 <memmove+0x12>
 8009a90:	4601      	mov	r1, r0
 8009a92:	4402      	add	r2, r0
 8009a94:	428a      	cmp	r2, r1
 8009a96:	d100      	bne.n	8009a9a <memmove+0x2a>
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aa2:	e7f7      	b.n	8009a94 <memmove+0x24>

08009aa4 <_sbrk_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4d05      	ldr	r5, [pc, #20]	@ (8009ac0 <_sbrk_r+0x1c>)
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	f7f9 fa5e 	bl	8002f70 <_sbrk>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_sbrk_r+0x1a>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_sbrk_r+0x1a>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	200006a4 	.word	0x200006a4

08009ac4 <memchr>:
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	b2c9      	uxtb	r1, r1
 8009aca:	4402      	add	r2, r0
 8009acc:	4293      	cmp	r3, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	d101      	bne.n	8009ad6 <memchr+0x12>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e003      	b.n	8009ade <memchr+0x1a>
 8009ad6:	7804      	ldrb	r4, [r0, #0]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	428c      	cmp	r4, r1
 8009adc:	d1f6      	bne.n	8009acc <memchr+0x8>
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <_free_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d040      	beq.n	8009b6a <_free_r+0x8a>
 8009ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aec:	1f0c      	subs	r4, r1, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfb8      	it	lt
 8009af2:	18e4      	addlt	r4, r4, r3
 8009af4:	f7ff ff82 	bl	80099fc <__malloc_lock>
 8009af8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b6c <_free_r+0x8c>)
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	b933      	cbnz	r3, 8009b0c <_free_r+0x2c>
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	4628      	mov	r0, r5
 8009b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b08:	f7ff bf7e 	b.w	8009a08 <__malloc_unlock>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d908      	bls.n	8009b22 <_free_r+0x42>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	1821      	adds	r1, r4, r0
 8009b14:	428b      	cmp	r3, r1
 8009b16:	bf01      	itttt	eq
 8009b18:	6819      	ldreq	r1, [r3, #0]
 8009b1a:	685b      	ldreq	r3, [r3, #4]
 8009b1c:	1809      	addeq	r1, r1, r0
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	e7ed      	b.n	8009afe <_free_r+0x1e>
 8009b22:	461a      	mov	r2, r3
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b10b      	cbz	r3, 8009b2c <_free_r+0x4c>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d9fa      	bls.n	8009b22 <_free_r+0x42>
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	1850      	adds	r0, r2, r1
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d10b      	bne.n	8009b4c <_free_r+0x6c>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	4401      	add	r1, r0
 8009b38:	1850      	adds	r0, r2, r1
 8009b3a:	4283      	cmp	r3, r0
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	d1e0      	bne.n	8009b02 <_free_r+0x22>
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	4408      	add	r0, r1
 8009b46:	6010      	str	r0, [r2, #0]
 8009b48:	6053      	str	r3, [r2, #4]
 8009b4a:	e7da      	b.n	8009b02 <_free_r+0x22>
 8009b4c:	d902      	bls.n	8009b54 <_free_r+0x74>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	e7d6      	b.n	8009b02 <_free_r+0x22>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	1821      	adds	r1, r4, r0
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf01      	itttt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	1809      	addeq	r1, r1, r0
 8009b62:	6021      	streq	r1, [r4, #0]
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	6054      	str	r4, [r2, #4]
 8009b68:	e7cb      	b.n	8009b02 <_free_r+0x22>
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200006a0 	.word	0x200006a0

08009b70 <_malloc_usable_size_r>:
 8009b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b74:	1f18      	subs	r0, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfbc      	itt	lt
 8009b7a:	580b      	ldrlt	r3, [r1, r0]
 8009b7c:	18c0      	addlt	r0, r0, r3
 8009b7e:	4770      	bx	lr

08009b80 <pow>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	4614      	mov	r4, r2
 8009b86:	461d      	mov	r5, r3
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	f000 f868 	bl	8009c60 <__ieee754_pow>
 8009b90:	4622      	mov	r2, r4
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	462b      	mov	r3, r5
 8009b98:	4620      	mov	r0, r4
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	f7f6 ff40 	bl	8000a20 <__aeabi_dcmpun>
 8009ba0:	bbc8      	cbnz	r0, 8009c16 <pow+0x96>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	4649      	mov	r1, r9
 8009baa:	f7f6 ff07 	bl	80009bc <__aeabi_dcmpeq>
 8009bae:	b1b8      	cbz	r0, 8009be0 <pow+0x60>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f7f6 ff00 	bl	80009bc <__aeabi_dcmpeq>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d141      	bne.n	8009c44 <pow+0xc4>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f000 f844 	bl	8009c50 <finite>
 8009bc8:	b328      	cbz	r0, 8009c16 <pow+0x96>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 fefd 	bl	80009d0 <__aeabi_dcmplt>
 8009bd6:	b1f0      	cbz	r0, 8009c16 <pow+0x96>
 8009bd8:	f7ff fb42 	bl	8009260 <__errno>
 8009bdc:	2322      	movs	r3, #34	@ 0x22
 8009bde:	e019      	b.n	8009c14 <pow+0x94>
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f000 f834 	bl	8009c50 <finite>
 8009be8:	b9c8      	cbnz	r0, 8009c1e <pow+0x9e>
 8009bea:	4640      	mov	r0, r8
 8009bec:	4649      	mov	r1, r9
 8009bee:	f000 f82f 	bl	8009c50 <finite>
 8009bf2:	b1a0      	cbz	r0, 8009c1e <pow+0x9e>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f000 f82a 	bl	8009c50 <finite>
 8009bfc:	b178      	cbz	r0, 8009c1e <pow+0x9e>
 8009bfe:	4632      	mov	r2, r6
 8009c00:	463b      	mov	r3, r7
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 ff0b 	bl	8000a20 <__aeabi_dcmpun>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0e4      	beq.n	8009bd8 <pow+0x58>
 8009c0e:	f7ff fb27 	bl	8009260 <__errno>
 8009c12:	2321      	movs	r3, #33	@ 0x21
 8009c14:	6003      	str	r3, [r0, #0]
 8009c16:	4630      	mov	r0, r6
 8009c18:	4639      	mov	r1, r7
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4630      	mov	r0, r6
 8009c24:	4639      	mov	r1, r7
 8009c26:	f7f6 fec9 	bl	80009bc <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0f3      	beq.n	8009c16 <pow+0x96>
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f000 f80d 	bl	8009c50 <finite>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d0ed      	beq.n	8009c16 <pow+0x96>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f000 f807 	bl	8009c50 <finite>
 8009c42:	e7c8      	b.n	8009bd6 <pow+0x56>
 8009c44:	2600      	movs	r6, #0
 8009c46:	4f01      	ldr	r7, [pc, #4]	@ (8009c4c <pow+0xcc>)
 8009c48:	e7e5      	b.n	8009c16 <pow+0x96>
 8009c4a:	bf00      	nop
 8009c4c:	3ff00000 	.word	0x3ff00000

08009c50 <finite>:
 8009c50:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009c54:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009c58:	0fc0      	lsrs	r0, r0, #31
 8009c5a:	4770      	bx	lr
 8009c5c:	0000      	movs	r0, r0
	...

08009c60 <__ieee754_pow>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	b091      	sub	sp, #68	@ 0x44
 8009c66:	e9cd 2300 	strd	r2, r3, [sp]
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009c70:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009c74:	4682      	mov	sl, r0
 8009c76:	ea57 0001 	orrs.w	r0, r7, r1
 8009c7a:	d112      	bne.n	8009ca2 <__ieee754_pow+0x42>
 8009c7c:	4653      	mov	r3, sl
 8009c7e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009c82:	18db      	adds	r3, r3, r3
 8009c84:	4152      	adcs	r2, r2
 8009c86:	4298      	cmp	r0, r3
 8009c88:	4b91      	ldr	r3, [pc, #580]	@ (8009ed0 <__ieee754_pow+0x270>)
 8009c8a:	4193      	sbcs	r3, r2
 8009c8c:	f080 84ce 	bcs.w	800a62c <__ieee754_pow+0x9cc>
 8009c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c94:	4650      	mov	r0, sl
 8009c96:	4659      	mov	r1, fp
 8009c98:	f7f6 fa72 	bl	8000180 <__adddf3>
 8009c9c:	b011      	add	sp, #68	@ 0x44
 8009c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca2:	4b8c      	ldr	r3, [pc, #560]	@ (8009ed4 <__ieee754_pow+0x274>)
 8009ca4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009ca8:	429e      	cmp	r6, r3
 8009caa:	465d      	mov	r5, fp
 8009cac:	46d1      	mov	r9, sl
 8009cae:	d807      	bhi.n	8009cc0 <__ieee754_pow+0x60>
 8009cb0:	d102      	bne.n	8009cb8 <__ieee754_pow+0x58>
 8009cb2:	f1ba 0f00 	cmp.w	sl, #0
 8009cb6:	d1eb      	bne.n	8009c90 <__ieee754_pow+0x30>
 8009cb8:	429f      	cmp	r7, r3
 8009cba:	d801      	bhi.n	8009cc0 <__ieee754_pow+0x60>
 8009cbc:	d10f      	bne.n	8009cde <__ieee754_pow+0x7e>
 8009cbe:	b171      	cbz	r1, 8009cde <__ieee754_pow+0x7e>
 8009cc0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009cc4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009cc8:	ea55 0509 	orrs.w	r5, r5, r9
 8009ccc:	d1e0      	bne.n	8009c90 <__ieee754_pow+0x30>
 8009cce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cd2:	18db      	adds	r3, r3, r3
 8009cd4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009cd8:	4152      	adcs	r2, r2
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	e7d4      	b.n	8009c88 <__ieee754_pow+0x28>
 8009cde:	2d00      	cmp	r5, #0
 8009ce0:	4633      	mov	r3, r6
 8009ce2:	da39      	bge.n	8009d58 <__ieee754_pow+0xf8>
 8009ce4:	4a7c      	ldr	r2, [pc, #496]	@ (8009ed8 <__ieee754_pow+0x278>)
 8009ce6:	4297      	cmp	r7, r2
 8009ce8:	d84e      	bhi.n	8009d88 <__ieee754_pow+0x128>
 8009cea:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009cee:	4297      	cmp	r7, r2
 8009cf0:	f240 84ab 	bls.w	800a64a <__ieee754_pow+0x9ea>
 8009cf4:	153a      	asrs	r2, r7, #20
 8009cf6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009cfa:	2a14      	cmp	r2, #20
 8009cfc:	dd0f      	ble.n	8009d1e <__ieee754_pow+0xbe>
 8009cfe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009d02:	fa21 f402 	lsr.w	r4, r1, r2
 8009d06:	fa04 f202 	lsl.w	r2, r4, r2
 8009d0a:	428a      	cmp	r2, r1
 8009d0c:	f040 849d 	bne.w	800a64a <__ieee754_pow+0x9ea>
 8009d10:	f004 0401 	and.w	r4, r4, #1
 8009d14:	f1c4 0402 	rsb	r4, r4, #2
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d15a      	bne.n	8009dd2 <__ieee754_pow+0x172>
 8009d1c:	e00e      	b.n	8009d3c <__ieee754_pow+0xdc>
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d156      	bne.n	8009dd0 <__ieee754_pow+0x170>
 8009d22:	f1c2 0214 	rsb	r2, r2, #20
 8009d26:	fa47 f402 	asr.w	r4, r7, r2
 8009d2a:	fa04 f202 	lsl.w	r2, r4, r2
 8009d2e:	42ba      	cmp	r2, r7
 8009d30:	f040 8488 	bne.w	800a644 <__ieee754_pow+0x9e4>
 8009d34:	f004 0401 	and.w	r4, r4, #1
 8009d38:	f1c4 0402 	rsb	r4, r4, #2
 8009d3c:	4a67      	ldr	r2, [pc, #412]	@ (8009edc <__ieee754_pow+0x27c>)
 8009d3e:	4297      	cmp	r7, r2
 8009d40:	d130      	bne.n	8009da4 <__ieee754_pow+0x144>
 8009d42:	f1b8 0f00 	cmp.w	r8, #0
 8009d46:	f280 8479 	bge.w	800a63c <__ieee754_pow+0x9dc>
 8009d4a:	4652      	mov	r2, sl
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	2000      	movs	r0, #0
 8009d50:	4962      	ldr	r1, [pc, #392]	@ (8009edc <__ieee754_pow+0x27c>)
 8009d52:	f7f6 fcf5 	bl	8000740 <__aeabi_ddiv>
 8009d56:	e7a1      	b.n	8009c9c <__ieee754_pow+0x3c>
 8009d58:	2400      	movs	r4, #0
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	d139      	bne.n	8009dd2 <__ieee754_pow+0x172>
 8009d5e:	4a5d      	ldr	r2, [pc, #372]	@ (8009ed4 <__ieee754_pow+0x274>)
 8009d60:	4297      	cmp	r7, r2
 8009d62:	d1eb      	bne.n	8009d3c <__ieee754_pow+0xdc>
 8009d64:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009d68:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009d6c:	ea53 0309 	orrs.w	r3, r3, r9
 8009d70:	f000 845c 	beq.w	800a62c <__ieee754_pow+0x9cc>
 8009d74:	4b5a      	ldr	r3, [pc, #360]	@ (8009ee0 <__ieee754_pow+0x280>)
 8009d76:	429e      	cmp	r6, r3
 8009d78:	d908      	bls.n	8009d8c <__ieee754_pow+0x12c>
 8009d7a:	f1b8 0f00 	cmp.w	r8, #0
 8009d7e:	f2c0 8459 	blt.w	800a634 <__ieee754_pow+0x9d4>
 8009d82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d86:	e789      	b.n	8009c9c <__ieee754_pow+0x3c>
 8009d88:	2402      	movs	r4, #2
 8009d8a:	e7e6      	b.n	8009d5a <__ieee754_pow+0xfa>
 8009d8c:	f1b8 0f00 	cmp.w	r8, #0
 8009d90:	f04f 0000 	mov.w	r0, #0
 8009d94:	f04f 0100 	mov.w	r1, #0
 8009d98:	da80      	bge.n	8009c9c <__ieee754_pow+0x3c>
 8009d9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009d9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009da2:	e77b      	b.n	8009c9c <__ieee754_pow+0x3c>
 8009da4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009da8:	d106      	bne.n	8009db8 <__ieee754_pow+0x158>
 8009daa:	4652      	mov	r2, sl
 8009dac:	465b      	mov	r3, fp
 8009dae:	4650      	mov	r0, sl
 8009db0:	4659      	mov	r1, fp
 8009db2:	f7f6 fb9b 	bl	80004ec <__aeabi_dmul>
 8009db6:	e771      	b.n	8009c9c <__ieee754_pow+0x3c>
 8009db8:	4a4a      	ldr	r2, [pc, #296]	@ (8009ee4 <__ieee754_pow+0x284>)
 8009dba:	4590      	cmp	r8, r2
 8009dbc:	d109      	bne.n	8009dd2 <__ieee754_pow+0x172>
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	db07      	blt.n	8009dd2 <__ieee754_pow+0x172>
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	b011      	add	sp, #68	@ 0x44
 8009dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	f000 bd12 	b.w	800a7f4 <__ieee754_sqrt>
 8009dd0:	2400      	movs	r4, #0
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	9302      	str	r3, [sp, #8]
 8009dd8:	f000 fc91 	bl	800a6fe <fabs>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	f1b9 0f00 	cmp.w	r9, #0
 8009de2:	d127      	bne.n	8009e34 <__ieee754_pow+0x1d4>
 8009de4:	4a3d      	ldr	r2, [pc, #244]	@ (8009edc <__ieee754_pow+0x27c>)
 8009de6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009dea:	4594      	cmp	ip, r2
 8009dec:	d000      	beq.n	8009df0 <__ieee754_pow+0x190>
 8009dee:	bb0e      	cbnz	r6, 8009e34 <__ieee754_pow+0x1d4>
 8009df0:	f1b8 0f00 	cmp.w	r8, #0
 8009df4:	da05      	bge.n	8009e02 <__ieee754_pow+0x1a2>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	4937      	ldr	r1, [pc, #220]	@ (8009edc <__ieee754_pow+0x27c>)
 8009dfe:	f7f6 fc9f 	bl	8000740 <__aeabi_ddiv>
 8009e02:	2d00      	cmp	r5, #0
 8009e04:	f6bf af4a 	bge.w	8009c9c <__ieee754_pow+0x3c>
 8009e08:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009e0c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009e10:	4326      	orrs	r6, r4
 8009e12:	d108      	bne.n	8009e26 <__ieee754_pow+0x1c6>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f7f6 f9ae 	bl	800017c <__aeabi_dsub>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	e795      	b.n	8009d52 <__ieee754_pow+0xf2>
 8009e26:	2c01      	cmp	r4, #1
 8009e28:	f47f af38 	bne.w	8009c9c <__ieee754_pow+0x3c>
 8009e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e30:	4619      	mov	r1, r3
 8009e32:	e733      	b.n	8009c9c <__ieee754_pow+0x3c>
 8009e34:	0fea      	lsrs	r2, r5, #31
 8009e36:	3a01      	subs	r2, #1
 8009e38:	ea52 0c04 	orrs.w	ip, r2, r4
 8009e3c:	d102      	bne.n	8009e44 <__ieee754_pow+0x1e4>
 8009e3e:	4652      	mov	r2, sl
 8009e40:	465b      	mov	r3, fp
 8009e42:	e7e9      	b.n	8009e18 <__ieee754_pow+0x1b8>
 8009e44:	f04f 0900 	mov.w	r9, #0
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	4314      	orrs	r4, r2
 8009e4c:	bf14      	ite	ne
 8009e4e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009edc <__ieee754_pow+0x27c>
 8009e52:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009ee8 <__ieee754_pow+0x288>
 8009e56:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009e5a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009e5e:	f240 8107 	bls.w	800a070 <__ieee754_pow+0x410>
 8009e62:	4b22      	ldr	r3, [pc, #136]	@ (8009eec <__ieee754_pow+0x28c>)
 8009e64:	429f      	cmp	r7, r3
 8009e66:	4b1e      	ldr	r3, [pc, #120]	@ (8009ee0 <__ieee754_pow+0x280>)
 8009e68:	d913      	bls.n	8009e92 <__ieee754_pow+0x232>
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	d808      	bhi.n	8009e80 <__ieee754_pow+0x220>
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	da08      	bge.n	8009e86 <__ieee754_pow+0x226>
 8009e74:	2000      	movs	r0, #0
 8009e76:	b011      	add	sp, #68	@ 0x44
 8009e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	f000 bc3a 	b.w	800a6f4 <__math_oflow>
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	dcf6      	bgt.n	8009e74 <__ieee754_pow+0x214>
 8009e86:	2000      	movs	r0, #0
 8009e88:	b011      	add	sp, #68	@ 0x44
 8009e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8e:	f000 bc2c 	b.w	800a6ea <__math_uflow>
 8009e92:	429e      	cmp	r6, r3
 8009e94:	d20c      	bcs.n	8009eb0 <__ieee754_pow+0x250>
 8009e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f7f6 fd97 	bl	80009d0 <__aeabi_dcmplt>
 8009ea2:	3800      	subs	r0, #0
 8009ea4:	bf18      	it	ne
 8009ea6:	2001      	movne	r0, #1
 8009ea8:	f1b8 0f00 	cmp.w	r8, #0
 8009eac:	daec      	bge.n	8009e88 <__ieee754_pow+0x228>
 8009eae:	e7e2      	b.n	8009e76 <__ieee754_pow+0x216>
 8009eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <__ieee754_pow+0x27c>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	429e      	cmp	r6, r3
 8009eb6:	d91b      	bls.n	8009ef0 <__ieee754_pow+0x290>
 8009eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f7f6 fd87 	bl	80009d0 <__aeabi_dcmplt>
 8009ec2:	3800      	subs	r0, #0
 8009ec4:	bf18      	it	ne
 8009ec6:	2001      	movne	r0, #1
 8009ec8:	f1b8 0f00 	cmp.w	r8, #0
 8009ecc:	dcd3      	bgt.n	8009e76 <__ieee754_pow+0x216>
 8009ece:	e7db      	b.n	8009e88 <__ieee754_pow+0x228>
 8009ed0:	fff00000 	.word	0xfff00000
 8009ed4:	7ff00000 	.word	0x7ff00000
 8009ed8:	433fffff 	.word	0x433fffff
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	3fefffff 	.word	0x3fefffff
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	bff00000 	.word	0xbff00000
 8009eec:	43f00000 	.word	0x43f00000
 8009ef0:	4b5b      	ldr	r3, [pc, #364]	@ (800a060 <__ieee754_pow+0x400>)
 8009ef2:	f7f6 f943 	bl	800017c <__aeabi_dsub>
 8009ef6:	a352      	add	r3, pc, #328	@ (adr r3, 800a040 <__ieee754_pow+0x3e0>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	f7f6 faf4 	bl	80004ec <__aeabi_dmul>
 8009f04:	a350      	add	r3, pc, #320	@ (adr r3, 800a048 <__ieee754_pow+0x3e8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 faeb 	bl	80004ec <__aeabi_dmul>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4682      	mov	sl, r0
 8009f1a:	468b      	mov	fp, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	4b50      	ldr	r3, [pc, #320]	@ (800a064 <__ieee754_pow+0x404>)
 8009f22:	f7f6 fae3 	bl	80004ec <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	a149      	add	r1, pc, #292	@ (adr r1, 800a050 <__ieee754_pow+0x3f0>)
 8009f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f30:	f7f6 f924 	bl	800017c <__aeabi_dsub>
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 fad8 	bl	80004ec <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	2000      	movs	r0, #0
 8009f42:	4949      	ldr	r1, [pc, #292]	@ (800a068 <__ieee754_pow+0x408>)
 8009f44:	f7f6 f91a 	bl	800017c <__aeabi_dsub>
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	4689      	mov	r9, r1
 8009f4e:	462b      	mov	r3, r5
 8009f50:	4620      	mov	r0, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	f7f6 faca 	bl	80004ec <__aeabi_dmul>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	4649      	mov	r1, r9
 8009f60:	f7f6 fac4 	bl	80004ec <__aeabi_dmul>
 8009f64:	a33c      	add	r3, pc, #240	@ (adr r3, 800a058 <__ieee754_pow+0x3f8>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f7f6 fabf 	bl	80004ec <__aeabi_dmul>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	f7f6 f901 	bl	800017c <__aeabi_dsub>
 8009f7a:	2400      	movs	r4, #0
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4680      	mov	r8, r0
 8009f82:	4689      	mov	r9, r1
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 f8fa 	bl	8000180 <__adddf3>
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	463b      	mov	r3, r7
 8009f90:	4620      	mov	r0, r4
 8009f92:	460d      	mov	r5, r1
 8009f94:	f7f6 f8f2 	bl	800017c <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 f8ec 	bl	800017c <__aeabi_dsub>
 8009fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	465b      	mov	r3, fp
 8009fc0:	f7f6 f8dc 	bl	800017c <__aeabi_dsub>
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	f7f6 fa90 	bl	80004ec <__aeabi_dmul>
 8009fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 fa88 	bl	80004ec <__aeabi_dmul>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 f8cc 	bl	8000180 <__adddf3>
 8009fe8:	4652      	mov	r2, sl
 8009fea:	465b      	mov	r3, fp
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 fa7a 	bl	80004ec <__aeabi_dmul>
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	4689      	mov	r9, r1
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 f8bc 	bl	8000180 <__adddf3>
 800a008:	4b18      	ldr	r3, [pc, #96]	@ (800a06c <__ieee754_pow+0x40c>)
 800a00a:	4604      	mov	r4, r0
 800a00c:	4299      	cmp	r1, r3
 800a00e:	460d      	mov	r5, r1
 800a010:	468a      	mov	sl, r1
 800a012:	468b      	mov	fp, r1
 800a014:	f340 82e0 	ble.w	800a5d8 <__ieee754_pow+0x978>
 800a018:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a01c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a020:	4303      	orrs	r3, r0
 800a022:	f000 81df 	beq.w	800a3e4 <__ieee754_pow+0x784>
 800a026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a02a:	2200      	movs	r2, #0
 800a02c:	2300      	movs	r3, #0
 800a02e:	f7f6 fccf 	bl	80009d0 <__aeabi_dcmplt>
 800a032:	3800      	subs	r0, #0
 800a034:	bf18      	it	ne
 800a036:	2001      	movne	r0, #1
 800a038:	e71d      	b.n	8009e76 <__ieee754_pow+0x216>
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w
 800a040:	60000000 	.word	0x60000000
 800a044:	3ff71547 	.word	0x3ff71547
 800a048:	f85ddf44 	.word	0xf85ddf44
 800a04c:	3e54ae0b 	.word	0x3e54ae0b
 800a050:	55555555 	.word	0x55555555
 800a054:	3fd55555 	.word	0x3fd55555
 800a058:	652b82fe 	.word	0x652b82fe
 800a05c:	3ff71547 	.word	0x3ff71547
 800a060:	3ff00000 	.word	0x3ff00000
 800a064:	3fd00000 	.word	0x3fd00000
 800a068:	3fe00000 	.word	0x3fe00000
 800a06c:	408fffff 	.word	0x408fffff
 800a070:	4ad3      	ldr	r2, [pc, #844]	@ (800a3c0 <__ieee754_pow+0x760>)
 800a072:	402a      	ands	r2, r5
 800a074:	2a00      	cmp	r2, #0
 800a076:	f040 817a 	bne.w	800a36e <__ieee754_pow+0x70e>
 800a07a:	4bd2      	ldr	r3, [pc, #840]	@ (800a3c4 <__ieee754_pow+0x764>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	f7f6 fa35 	bl	80004ec <__aeabi_dmul>
 800a082:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a086:	460b      	mov	r3, r1
 800a088:	151a      	asrs	r2, r3, #20
 800a08a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a08e:	4422      	add	r2, r4
 800a090:	920a      	str	r2, [sp, #40]	@ 0x28
 800a092:	4acd      	ldr	r2, [pc, #820]	@ (800a3c8 <__ieee754_pow+0x768>)
 800a094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a098:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a09c:	4293      	cmp	r3, r2
 800a09e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a0a2:	dd08      	ble.n	800a0b6 <__ieee754_pow+0x456>
 800a0a4:	4ac9      	ldr	r2, [pc, #804]	@ (800a3cc <__ieee754_pow+0x76c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	f340 8163 	ble.w	800a372 <__ieee754_pow+0x712>
 800a0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	00f3      	lsls	r3, r6, #3
 800a0ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0bc:	4bc4      	ldr	r3, [pc, #784]	@ (800a3d0 <__ieee754_pow+0x770>)
 800a0be:	4629      	mov	r1, r5
 800a0c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	4682      	mov	sl, r0
 800a0d2:	f7f6 f853 	bl	800017c <__aeabi_dsub>
 800a0d6:	4652      	mov	r2, sl
 800a0d8:	462b      	mov	r3, r5
 800a0da:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a0de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e2:	f7f6 f84d 	bl	8000180 <__adddf3>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	49b9      	ldr	r1, [pc, #740]	@ (800a3d4 <__ieee754_pow+0x774>)
 800a0ee:	f7f6 fb27 	bl	8000740 <__aeabi_ddiv>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0fe:	f7f6 f9f5 	bl	80004ec <__aeabi_dmul>
 800a102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a106:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a10a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a10e:	2300      	movs	r3, #0
 800a110:	2200      	movs	r2, #0
 800a112:	46ab      	mov	fp, r5
 800a114:	106d      	asrs	r5, r5, #1
 800a116:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a120:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a124:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	4614      	mov	r4, r2
 800a12e:	461d      	mov	r5, r3
 800a130:	f7f6 f9dc 	bl	80004ec <__aeabi_dmul>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a13c:	f7f6 f81e 	bl	800017c <__aeabi_dsub>
 800a140:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a144:	4606      	mov	r6, r0
 800a146:	460f      	mov	r7, r1
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f816 	bl	800017c <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4650      	mov	r0, sl
 800a156:	4659      	mov	r1, fp
 800a158:	f7f6 f810 	bl	800017c <__aeabi_dsub>
 800a15c:	4642      	mov	r2, r8
 800a15e:	464b      	mov	r3, r9
 800a160:	f7f6 f9c4 	bl	80004ec <__aeabi_dmul>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 f806 	bl	800017c <__aeabi_dsub>
 800a170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a174:	f7f6 f9ba 	bl	80004ec <__aeabi_dmul>
 800a178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a17c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a180:	4610      	mov	r0, r2
 800a182:	4619      	mov	r1, r3
 800a184:	f7f6 f9b2 	bl	80004ec <__aeabi_dmul>
 800a188:	a37b      	add	r3, pc, #492	@ (adr r3, 800a378 <__ieee754_pow+0x718>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	f7f6 f9ab 	bl	80004ec <__aeabi_dmul>
 800a196:	a37a      	add	r3, pc, #488	@ (adr r3, 800a380 <__ieee754_pow+0x720>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f5 fff0 	bl	8000180 <__adddf3>
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	462b      	mov	r3, r5
 800a1a4:	f7f6 f9a2 	bl	80004ec <__aeabi_dmul>
 800a1a8:	a377      	add	r3, pc, #476	@ (adr r3, 800a388 <__ieee754_pow+0x728>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f5 ffe7 	bl	8000180 <__adddf3>
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	f7f6 f999 	bl	80004ec <__aeabi_dmul>
 800a1ba:	a375      	add	r3, pc, #468	@ (adr r3, 800a390 <__ieee754_pow+0x730>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f5 ffde 	bl	8000180 <__adddf3>
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	f7f6 f990 	bl	80004ec <__aeabi_dmul>
 800a1cc:	a372      	add	r3, pc, #456	@ (adr r3, 800a398 <__ieee754_pow+0x738>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f5 ffd5 	bl	8000180 <__adddf3>
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	462b      	mov	r3, r5
 800a1da:	f7f6 f987 	bl	80004ec <__aeabi_dmul>
 800a1de:	a370      	add	r3, pc, #448	@ (adr r3, 800a3a0 <__ieee754_pow+0x740>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f5 ffcc 	bl	8000180 <__adddf3>
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	f7f6 f97a 	bl	80004ec <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 f974 	bl	80004ec <__aeabi_dmul>
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a20c:	4642      	mov	r2, r8
 800a20e:	464b      	mov	r3, r9
 800a210:	f7f5 ffb6 	bl	8000180 <__adddf3>
 800a214:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a218:	f7f6 f968 	bl	80004ec <__aeabi_dmul>
 800a21c:	4622      	mov	r2, r4
 800a21e:	462b      	mov	r3, r5
 800a220:	f7f5 ffae 	bl	8000180 <__adddf3>
 800a224:	4642      	mov	r2, r8
 800a226:	4682      	mov	sl, r0
 800a228:	468b      	mov	fp, r1
 800a22a:	464b      	mov	r3, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f7f6 f95c 	bl	80004ec <__aeabi_dmul>
 800a234:	2200      	movs	r2, #0
 800a236:	4b68      	ldr	r3, [pc, #416]	@ (800a3d8 <__ieee754_pow+0x778>)
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	f7f5 ffa0 	bl	8000180 <__adddf3>
 800a240:	4652      	mov	r2, sl
 800a242:	465b      	mov	r3, fp
 800a244:	f7f5 ff9c 	bl	8000180 <__adddf3>
 800a248:	2400      	movs	r4, #0
 800a24a:	460d      	mov	r5, r1
 800a24c:	4622      	mov	r2, r4
 800a24e:	460b      	mov	r3, r1
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	f7f6 f94a 	bl	80004ec <__aeabi_dmul>
 800a258:	2200      	movs	r2, #0
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	4620      	mov	r0, r4
 800a260:	4629      	mov	r1, r5
 800a262:	4b5d      	ldr	r3, [pc, #372]	@ (800a3d8 <__ieee754_pow+0x778>)
 800a264:	f7f5 ff8a 	bl	800017c <__aeabi_dsub>
 800a268:	4632      	mov	r2, r6
 800a26a:	463b      	mov	r3, r7
 800a26c:	f7f5 ff86 	bl	800017c <__aeabi_dsub>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4650      	mov	r0, sl
 800a276:	4659      	mov	r1, fp
 800a278:	f7f5 ff80 	bl	800017c <__aeabi_dsub>
 800a27c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a280:	f7f6 f934 	bl	80004ec <__aeabi_dmul>
 800a284:	4622      	mov	r2, r4
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a28e:	462b      	mov	r3, r5
 800a290:	f7f6 f92c 	bl	80004ec <__aeabi_dmul>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f5 ff70 	bl	8000180 <__adddf3>
 800a2a0:	2400      	movs	r4, #0
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	460f      	mov	r7, r1
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f5 ff67 	bl	8000180 <__adddf3>
 800a2b2:	a33d      	add	r3, pc, #244	@ (adr r3, 800a3a8 <__ieee754_pow+0x748>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	f7f6 f916 	bl	80004ec <__aeabi_dmul>
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	464b      	mov	r3, r9
 800a2c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7f5 ff56 	bl	800017c <__aeabi_dsub>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f7f5 ff50 	bl	800017c <__aeabi_dsub>
 800a2dc:	a334      	add	r3, pc, #208	@ (adr r3, 800a3b0 <__ieee754_pow+0x750>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f6 f903 	bl	80004ec <__aeabi_dmul>
 800a2e6:	a334      	add	r3, pc, #208	@ (adr r3, 800a3b8 <__ieee754_pow+0x758>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 f8fa 	bl	80004ec <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f5 ff3e 	bl	8000180 <__adddf3>
 800a304:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a306:	4b35      	ldr	r3, [pc, #212]	@ (800a3dc <__ieee754_pow+0x77c>)
 800a308:	2400      	movs	r4, #0
 800a30a:	4413      	add	r3, r2
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f5 ff36 	bl	8000180 <__adddf3>
 800a314:	4682      	mov	sl, r0
 800a316:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a318:	468b      	mov	fp, r1
 800a31a:	f7f6 f87d 	bl	8000418 <__aeabi_i2d>
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a324:	4b2e      	ldr	r3, [pc, #184]	@ (800a3e0 <__ieee754_pow+0x780>)
 800a326:	4413      	add	r3, r2
 800a328:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a32c:	4652      	mov	r2, sl
 800a32e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a332:	465b      	mov	r3, fp
 800a334:	f7f5 ff24 	bl	8000180 <__adddf3>
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	f7f5 ff20 	bl	8000180 <__adddf3>
 800a340:	4632      	mov	r2, r6
 800a342:	463b      	mov	r3, r7
 800a344:	f7f5 ff1c 	bl	8000180 <__adddf3>
 800a348:	4632      	mov	r2, r6
 800a34a:	463b      	mov	r3, r7
 800a34c:	4620      	mov	r0, r4
 800a34e:	460d      	mov	r5, r1
 800a350:	f7f5 ff14 	bl	800017c <__aeabi_dsub>
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	f7f5 ff10 	bl	800017c <__aeabi_dsub>
 800a35c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a360:	f7f5 ff0c 	bl	800017c <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	e618      	b.n	8009fa0 <__ieee754_pow+0x340>
 800a36e:	2400      	movs	r4, #0
 800a370:	e68a      	b.n	800a088 <__ieee754_pow+0x428>
 800a372:	2601      	movs	r6, #1
 800a374:	e6a0      	b.n	800a0b8 <__ieee754_pow+0x458>
 800a376:	bf00      	nop
 800a378:	4a454eef 	.word	0x4a454eef
 800a37c:	3fca7e28 	.word	0x3fca7e28
 800a380:	93c9db65 	.word	0x93c9db65
 800a384:	3fcd864a 	.word	0x3fcd864a
 800a388:	a91d4101 	.word	0xa91d4101
 800a38c:	3fd17460 	.word	0x3fd17460
 800a390:	518f264d 	.word	0x518f264d
 800a394:	3fd55555 	.word	0x3fd55555
 800a398:	db6fabff 	.word	0xdb6fabff
 800a39c:	3fdb6db6 	.word	0x3fdb6db6
 800a3a0:	33333303 	.word	0x33333303
 800a3a4:	3fe33333 	.word	0x3fe33333
 800a3a8:	e0000000 	.word	0xe0000000
 800a3ac:	3feec709 	.word	0x3feec709
 800a3b0:	dc3a03fd 	.word	0xdc3a03fd
 800a3b4:	3feec709 	.word	0x3feec709
 800a3b8:	145b01f5 	.word	0x145b01f5
 800a3bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	43400000 	.word	0x43400000
 800a3c8:	0003988e 	.word	0x0003988e
 800a3cc:	000bb679 	.word	0x000bb679
 800a3d0:	0800b9a0 	.word	0x0800b9a0
 800a3d4:	3ff00000 	.word	0x3ff00000
 800a3d8:	40080000 	.word	0x40080000
 800a3dc:	0800b980 	.word	0x0800b980
 800a3e0:	0800b990 	.word	0x0800b990
 800a3e4:	a39a      	add	r3, pc, #616	@ (adr r3, 800a650 <__ieee754_pow+0x9f0>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 fec7 	bl	8000180 <__adddf3>
 800a3f2:	4642      	mov	r2, r8
 800a3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7f5 febd 	bl	800017c <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a40a:	f7f6 faff 	bl	8000a0c <__aeabi_dcmpgt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f47f ae09 	bne.w	800a026 <__ieee754_pow+0x3c6>
 800a414:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a418:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a41c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a420:	fa43 fa0a 	asr.w	sl, r3, sl
 800a424:	44da      	add	sl, fp
 800a426:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a42a:	489b      	ldr	r0, [pc, #620]	@ (800a698 <__ieee754_pow+0xa38>)
 800a42c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a430:	4108      	asrs	r0, r1
 800a432:	ea00 030a 	and.w	r3, r0, sl
 800a436:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a43a:	f1c1 0114 	rsb	r1, r1, #20
 800a43e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a442:	4640      	mov	r0, r8
 800a444:	fa4a fa01 	asr.w	sl, sl, r1
 800a448:	f1bb 0f00 	cmp.w	fp, #0
 800a44c:	4649      	mov	r1, r9
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	bfb8      	it	lt
 800a454:	f1ca 0a00 	rsblt	sl, sl, #0
 800a458:	f7f5 fe90 	bl	800017c <__aeabi_dsub>
 800a45c:	4680      	mov	r8, r0
 800a45e:	4689      	mov	r9, r1
 800a460:	2400      	movs	r4, #0
 800a462:	4632      	mov	r2, r6
 800a464:	463b      	mov	r3, r7
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f5 fe89 	bl	8000180 <__adddf3>
 800a46e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a658 <__ieee754_pow+0x9f8>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4620      	mov	r0, r4
 800a476:	460d      	mov	r5, r1
 800a478:	f7f6 f838 	bl	80004ec <__aeabi_dmul>
 800a47c:	4642      	mov	r2, r8
 800a47e:	464b      	mov	r3, r9
 800a480:	e9cd 0100 	strd	r0, r1, [sp]
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f5 fe78 	bl	800017c <__aeabi_dsub>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f5 fe72 	bl	800017c <__aeabi_dsub>
 800a498:	a371      	add	r3, pc, #452	@ (adr r3, 800a660 <__ieee754_pow+0xa00>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f7f6 f825 	bl	80004ec <__aeabi_dmul>
 800a4a2:	a371      	add	r3, pc, #452	@ (adr r3, 800a668 <__ieee754_pow+0xa08>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	4689      	mov	r9, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f6 f81c 	bl	80004ec <__aeabi_dmul>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f5 fe60 	bl	8000180 <__adddf3>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4cc:	f7f5 fe58 	bl	8000180 <__adddf3>
 800a4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	4689      	mov	r9, r1
 800a4d8:	f7f5 fe50 	bl	800017c <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	f7f5 fe4a 	bl	800017c <__aeabi_dsub>
 800a4e8:	4642      	mov	r2, r8
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	f7f5 fffa 	bl	80004ec <__aeabi_dmul>
 800a4f8:	a35d      	add	r3, pc, #372	@ (adr r3, 800a670 <__ieee754_pow+0xa10>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	f7f5 fff3 	bl	80004ec <__aeabi_dmul>
 800a506:	a35c      	add	r3, pc, #368	@ (adr r3, 800a678 <__ieee754_pow+0xa18>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f5 fe36 	bl	800017c <__aeabi_dsub>
 800a510:	4622      	mov	r2, r4
 800a512:	462b      	mov	r3, r5
 800a514:	f7f5 ffea 	bl	80004ec <__aeabi_dmul>
 800a518:	a359      	add	r3, pc, #356	@ (adr r3, 800a680 <__ieee754_pow+0xa20>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 fe2f 	bl	8000180 <__adddf3>
 800a522:	4622      	mov	r2, r4
 800a524:	462b      	mov	r3, r5
 800a526:	f7f5 ffe1 	bl	80004ec <__aeabi_dmul>
 800a52a:	a357      	add	r3, pc, #348	@ (adr r3, 800a688 <__ieee754_pow+0xa28>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 fe24 	bl	800017c <__aeabi_dsub>
 800a534:	4622      	mov	r2, r4
 800a536:	462b      	mov	r3, r5
 800a538:	f7f5 ffd8 	bl	80004ec <__aeabi_dmul>
 800a53c:	a354      	add	r3, pc, #336	@ (adr r3, 800a690 <__ieee754_pow+0xa30>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f5 fe1d 	bl	8000180 <__adddf3>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	f7f5 ffcf 	bl	80004ec <__aeabi_dmul>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f5 fe11 	bl	800017c <__aeabi_dsub>
 800a55a:	4604      	mov	r4, r0
 800a55c:	460d      	mov	r5, r1
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4640      	mov	r0, r8
 800a564:	4649      	mov	r1, r9
 800a566:	f7f5 ffc1 	bl	80004ec <__aeabi_dmul>
 800a56a:	2200      	movs	r2, #0
 800a56c:	e9cd 0100 	strd	r0, r1, [sp]
 800a570:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fe00 	bl	800017c <__aeabi_dsub>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a584:	f7f6 f8dc 	bl	8000740 <__aeabi_ddiv>
 800a588:	4632      	mov	r2, r6
 800a58a:	4604      	mov	r4, r0
 800a58c:	460d      	mov	r5, r1
 800a58e:	463b      	mov	r3, r7
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	f7f5 ffaa 	bl	80004ec <__aeabi_dmul>
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	f7f5 fdf0 	bl	8000180 <__adddf3>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f5 fde8 	bl	800017c <__aeabi_dsub>
 800a5ac:	4642      	mov	r2, r8
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	f7f5 fde4 	bl	800017c <__aeabi_dsub>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	4938      	ldr	r1, [pc, #224]	@ (800a69c <__ieee754_pow+0xa3c>)
 800a5bc:	f7f5 fdde 	bl	800017c <__aeabi_dsub>
 800a5c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a5c4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a5c8:	da2e      	bge.n	800a628 <__ieee754_pow+0x9c8>
 800a5ca:	4652      	mov	r2, sl
 800a5cc:	f000 f89c 	bl	800a708 <scalbn>
 800a5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5d4:	f7ff bbed 	b.w	8009db2 <__ieee754_pow+0x152>
 800a5d8:	4c31      	ldr	r4, [pc, #196]	@ (800a6a0 <__ieee754_pow+0xa40>)
 800a5da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5de:	42a3      	cmp	r3, r4
 800a5e0:	d91a      	bls.n	800a618 <__ieee754_pow+0x9b8>
 800a5e2:	4b30      	ldr	r3, [pc, #192]	@ (800a6a4 <__ieee754_pow+0xa44>)
 800a5e4:	440b      	add	r3, r1
 800a5e6:	4303      	orrs	r3, r0
 800a5e8:	d009      	beq.n	800a5fe <__ieee754_pow+0x99e>
 800a5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f7f6 f9ed 	bl	80009d0 <__aeabi_dcmplt>
 800a5f6:	3800      	subs	r0, #0
 800a5f8:	bf18      	it	ne
 800a5fa:	2001      	movne	r0, #1
 800a5fc:	e444      	b.n	8009e88 <__ieee754_pow+0x228>
 800a5fe:	4642      	mov	r2, r8
 800a600:	464b      	mov	r3, r9
 800a602:	f7f5 fdbb 	bl	800017c <__aeabi_dsub>
 800a606:	4632      	mov	r2, r6
 800a608:	463b      	mov	r3, r7
 800a60a:	f7f6 f9f5 	bl	80009f8 <__aeabi_dcmpge>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1eb      	bne.n	800a5ea <__ieee754_pow+0x98a>
 800a612:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a6a8 <__ieee754_pow+0xa48>
 800a616:	e6fd      	b.n	800a414 <__ieee754_pow+0x7b4>
 800a618:	469a      	mov	sl, r3
 800a61a:	4b24      	ldr	r3, [pc, #144]	@ (800a6ac <__ieee754_pow+0xa4c>)
 800a61c:	459a      	cmp	sl, r3
 800a61e:	f63f aef9 	bhi.w	800a414 <__ieee754_pow+0x7b4>
 800a622:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a626:	e71b      	b.n	800a460 <__ieee754_pow+0x800>
 800a628:	4621      	mov	r1, r4
 800a62a:	e7d1      	b.n	800a5d0 <__ieee754_pow+0x970>
 800a62c:	2000      	movs	r0, #0
 800a62e:	491b      	ldr	r1, [pc, #108]	@ (800a69c <__ieee754_pow+0xa3c>)
 800a630:	f7ff bb34 	b.w	8009c9c <__ieee754_pow+0x3c>
 800a634:	2000      	movs	r0, #0
 800a636:	2100      	movs	r1, #0
 800a638:	f7ff bb30 	b.w	8009c9c <__ieee754_pow+0x3c>
 800a63c:	4650      	mov	r0, sl
 800a63e:	4659      	mov	r1, fp
 800a640:	f7ff bb2c 	b.w	8009c9c <__ieee754_pow+0x3c>
 800a644:	460c      	mov	r4, r1
 800a646:	f7ff bb79 	b.w	8009d3c <__ieee754_pow+0xdc>
 800a64a:	2400      	movs	r4, #0
 800a64c:	f7ff bb64 	b.w	8009d18 <__ieee754_pow+0xb8>
 800a650:	652b82fe 	.word	0x652b82fe
 800a654:	3c971547 	.word	0x3c971547
 800a658:	00000000 	.word	0x00000000
 800a65c:	3fe62e43 	.word	0x3fe62e43
 800a660:	fefa39ef 	.word	0xfefa39ef
 800a664:	3fe62e42 	.word	0x3fe62e42
 800a668:	0ca86c39 	.word	0x0ca86c39
 800a66c:	be205c61 	.word	0xbe205c61
 800a670:	72bea4d0 	.word	0x72bea4d0
 800a674:	3e663769 	.word	0x3e663769
 800a678:	c5d26bf1 	.word	0xc5d26bf1
 800a67c:	3ebbbd41 	.word	0x3ebbbd41
 800a680:	af25de2c 	.word	0xaf25de2c
 800a684:	3f11566a 	.word	0x3f11566a
 800a688:	16bebd93 	.word	0x16bebd93
 800a68c:	3f66c16c 	.word	0x3f66c16c
 800a690:	5555553e 	.word	0x5555553e
 800a694:	3fc55555 	.word	0x3fc55555
 800a698:	fff00000 	.word	0xfff00000
 800a69c:	3ff00000 	.word	0x3ff00000
 800a6a0:	4090cbff 	.word	0x4090cbff
 800a6a4:	3f6f3400 	.word	0x3f6f3400
 800a6a8:	4090cc00 	.word	0x4090cc00
 800a6ac:	3fe00000 	.word	0x3fe00000

0800a6b0 <with_errno>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	4616      	mov	r6, r2
 800a6b8:	f7fe fdd2 	bl	8009260 <__errno>
 800a6bc:	4629      	mov	r1, r5
 800a6be:	6006      	str	r6, [r0, #0]
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}

0800a6c4 <xflow>:
 800a6c4:	b513      	push	{r0, r1, r4, lr}
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	b10c      	cbz	r4, 800a6d2 <xflow+0xe>
 800a6ce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a6d2:	e9cd 2300 	strd	r2, r3, [sp]
 800a6d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6da:	f7f5 ff07 	bl	80004ec <__aeabi_dmul>
 800a6de:	2222      	movs	r2, #34	@ 0x22
 800a6e0:	b002      	add	sp, #8
 800a6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e6:	f7ff bfe3 	b.w	800a6b0 <with_errno>

0800a6ea <__math_uflow>:
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a6f0:	f7ff bfe8 	b.w	800a6c4 <xflow>

0800a6f4 <__math_oflow>:
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a6fa:	f7ff bfe3 	b.w	800a6c4 <xflow>

0800a6fe <fabs>:
 800a6fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a702:	4619      	mov	r1, r3
 800a704:	4770      	bx	lr
	...

0800a708 <scalbn>:
 800a708:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a70c:	4616      	mov	r6, r2
 800a70e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a712:	4683      	mov	fp, r0
 800a714:	468c      	mov	ip, r1
 800a716:	460b      	mov	r3, r1
 800a718:	b982      	cbnz	r2, 800a73c <scalbn+0x34>
 800a71a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a71e:	4303      	orrs	r3, r0
 800a720:	d039      	beq.n	800a796 <scalbn+0x8e>
 800a722:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e0 <scalbn+0xd8>)
 800a724:	2200      	movs	r2, #0
 800a726:	f7f5 fee1 	bl	80004ec <__aeabi_dmul>
 800a72a:	4b2e      	ldr	r3, [pc, #184]	@ (800a7e4 <scalbn+0xdc>)
 800a72c:	4683      	mov	fp, r0
 800a72e:	429e      	cmp	r6, r3
 800a730:	468c      	mov	ip, r1
 800a732:	da0d      	bge.n	800a750 <scalbn+0x48>
 800a734:	a326      	add	r3, pc, #152	@ (adr r3, 800a7d0 <scalbn+0xc8>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	e01b      	b.n	800a774 <scalbn+0x6c>
 800a73c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a740:	42ba      	cmp	r2, r7
 800a742:	d109      	bne.n	800a758 <scalbn+0x50>
 800a744:	4602      	mov	r2, r0
 800a746:	f7f5 fd1b 	bl	8000180 <__adddf3>
 800a74a:	4683      	mov	fp, r0
 800a74c:	468c      	mov	ip, r1
 800a74e:	e022      	b.n	800a796 <scalbn+0x8e>
 800a750:	460b      	mov	r3, r1
 800a752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a756:	3a36      	subs	r2, #54	@ 0x36
 800a758:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a75c:	428e      	cmp	r6, r1
 800a75e:	dd0c      	ble.n	800a77a <scalbn+0x72>
 800a760:	a31d      	add	r3, pc, #116	@ (adr r3, 800a7d8 <scalbn+0xd0>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	461c      	mov	r4, r3
 800a768:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a76c:	f361 74df 	bfi	r4, r1, #31, #1
 800a770:	4621      	mov	r1, r4
 800a772:	481d      	ldr	r0, [pc, #116]	@ (800a7e8 <scalbn+0xe0>)
 800a774:	f7f5 feba 	bl	80004ec <__aeabi_dmul>
 800a778:	e7e7      	b.n	800a74a <scalbn+0x42>
 800a77a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a77e:	4432      	add	r2, r6
 800a780:	428a      	cmp	r2, r1
 800a782:	dced      	bgt.n	800a760 <scalbn+0x58>
 800a784:	2a00      	cmp	r2, #0
 800a786:	dd0a      	ble.n	800a79e <scalbn+0x96>
 800a788:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a78c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a790:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a794:	46ac      	mov	ip, r5
 800a796:	4658      	mov	r0, fp
 800a798:	4661      	mov	r1, ip
 800a79a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a79e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a7a2:	da09      	bge.n	800a7b8 <scalbn+0xb0>
 800a7a4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a7a8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a7ac:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a7b0:	480e      	ldr	r0, [pc, #56]	@ (800a7ec <scalbn+0xe4>)
 800a7b2:	f041 011f 	orr.w	r1, r1, #31
 800a7b6:	e7bd      	b.n	800a734 <scalbn+0x2c>
 800a7b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a7bc:	3236      	adds	r2, #54	@ 0x36
 800a7be:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a7c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7c6:	4658      	mov	r0, fp
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4b08      	ldr	r3, [pc, #32]	@ (800a7f0 <scalbn+0xe8>)
 800a7ce:	e7d1      	b.n	800a774 <scalbn+0x6c>
 800a7d0:	c2f8f359 	.word	0xc2f8f359
 800a7d4:	01a56e1f 	.word	0x01a56e1f
 800a7d8:	8800759c 	.word	0x8800759c
 800a7dc:	7e37e43c 	.word	0x7e37e43c
 800a7e0:	43500000 	.word	0x43500000
 800a7e4:	ffff3cb0 	.word	0xffff3cb0
 800a7e8:	8800759c 	.word	0x8800759c
 800a7ec:	c2f8f359 	.word	0xc2f8f359
 800a7f0:	3c900000 	.word	0x3c900000

0800a7f4 <__ieee754_sqrt>:
 800a7f4:	4a67      	ldr	r2, [pc, #412]	@ (800a994 <__ieee754_sqrt+0x1a0>)
 800a7f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	438a      	bics	r2, r1
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	460b      	mov	r3, r1
 800a802:	4604      	mov	r4, r0
 800a804:	d10e      	bne.n	800a824 <__ieee754_sqrt+0x30>
 800a806:	4602      	mov	r2, r0
 800a808:	f7f5 fe70 	bl	80004ec <__aeabi_dmul>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fcb4 	bl	8000180 <__adddf3>
 800a818:	4606      	mov	r6, r0
 800a81a:	460f      	mov	r7, r1
 800a81c:	4630      	mov	r0, r6
 800a81e:	4639      	mov	r1, r7
 800a820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	2900      	cmp	r1, #0
 800a826:	dc0c      	bgt.n	800a842 <__ieee754_sqrt+0x4e>
 800a828:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a82c:	4302      	orrs	r2, r0
 800a82e:	d0f5      	beq.n	800a81c <__ieee754_sqrt+0x28>
 800a830:	b189      	cbz	r1, 800a856 <__ieee754_sqrt+0x62>
 800a832:	4602      	mov	r2, r0
 800a834:	f7f5 fca2 	bl	800017c <__aeabi_dsub>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	f7f5 ff80 	bl	8000740 <__aeabi_ddiv>
 800a840:	e7ea      	b.n	800a818 <__ieee754_sqrt+0x24>
 800a842:	150a      	asrs	r2, r1, #20
 800a844:	d115      	bne.n	800a872 <__ieee754_sqrt+0x7e>
 800a846:	2100      	movs	r1, #0
 800a848:	e009      	b.n	800a85e <__ieee754_sqrt+0x6a>
 800a84a:	0ae3      	lsrs	r3, r4, #11
 800a84c:	3a15      	subs	r2, #21
 800a84e:	0564      	lsls	r4, r4, #21
 800a850:	2b00      	cmp	r3, #0
 800a852:	d0fa      	beq.n	800a84a <__ieee754_sqrt+0x56>
 800a854:	e7f7      	b.n	800a846 <__ieee754_sqrt+0x52>
 800a856:	460a      	mov	r2, r1
 800a858:	e7fa      	b.n	800a850 <__ieee754_sqrt+0x5c>
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	3101      	adds	r1, #1
 800a85e:	02d8      	lsls	r0, r3, #11
 800a860:	d5fb      	bpl.n	800a85a <__ieee754_sqrt+0x66>
 800a862:	1e48      	subs	r0, r1, #1
 800a864:	1a12      	subs	r2, r2, r0
 800a866:	f1c1 0020 	rsb	r0, r1, #32
 800a86a:	fa24 f000 	lsr.w	r0, r4, r0
 800a86e:	4303      	orrs	r3, r0
 800a870:	408c      	lsls	r4, r1
 800a872:	2600      	movs	r6, #0
 800a874:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a878:	2116      	movs	r1, #22
 800a87a:	07d2      	lsls	r2, r2, #31
 800a87c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a880:	4632      	mov	r2, r6
 800a882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a88a:	bf5c      	itt	pl
 800a88c:	005b      	lslpl	r3, r3, #1
 800a88e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a892:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a896:	bf58      	it	pl
 800a898:	0064      	lslpl	r4, r4, #1
 800a89a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a89e:	107f      	asrs	r7, r7, #1
 800a8a0:	0064      	lsls	r4, r4, #1
 800a8a2:	1815      	adds	r5, r2, r0
 800a8a4:	429d      	cmp	r5, r3
 800a8a6:	bfde      	ittt	le
 800a8a8:	182a      	addle	r2, r5, r0
 800a8aa:	1b5b      	suble	r3, r3, r5
 800a8ac:	1836      	addle	r6, r6, r0
 800a8ae:	0fe5      	lsrs	r5, r4, #31
 800a8b0:	3901      	subs	r1, #1
 800a8b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a8b6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a8ba:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a8be:	d1f0      	bne.n	800a8a2 <__ieee754_sqrt+0xae>
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	f04f 0a20 	mov.w	sl, #32
 800a8c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	eb01 0c00 	add.w	ip, r1, r0
 800a8d0:	db02      	blt.n	800a8d8 <__ieee754_sqrt+0xe4>
 800a8d2:	d113      	bne.n	800a8fc <__ieee754_sqrt+0x108>
 800a8d4:	45a4      	cmp	ip, r4
 800a8d6:	d811      	bhi.n	800a8fc <__ieee754_sqrt+0x108>
 800a8d8:	f1bc 0f00 	cmp.w	ip, #0
 800a8dc:	eb0c 0100 	add.w	r1, ip, r0
 800a8e0:	da42      	bge.n	800a968 <__ieee754_sqrt+0x174>
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	db40      	blt.n	800a968 <__ieee754_sqrt+0x174>
 800a8e6:	f102 0e01 	add.w	lr, r2, #1
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	4672      	mov	r2, lr
 800a8ee:	45a4      	cmp	ip, r4
 800a8f0:	bf88      	it	hi
 800a8f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a8f6:	eba4 040c 	sub.w	r4, r4, ip
 800a8fa:	4405      	add	r5, r0
 800a8fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a900:	f1ba 0a01 	subs.w	sl, sl, #1
 800a904:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a908:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a90c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a910:	d1db      	bne.n	800a8ca <__ieee754_sqrt+0xd6>
 800a912:	431c      	orrs	r4, r3
 800a914:	d01a      	beq.n	800a94c <__ieee754_sqrt+0x158>
 800a916:	4c20      	ldr	r4, [pc, #128]	@ (800a998 <__ieee754_sqrt+0x1a4>)
 800a918:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a99c <__ieee754_sqrt+0x1a8>
 800a91c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a920:	e9db 2300 	ldrd	r2, r3, [fp]
 800a924:	f7f5 fc2a 	bl	800017c <__aeabi_dsub>
 800a928:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	f7f6 f856 	bl	80009e4 <__aeabi_dcmple>
 800a938:	b140      	cbz	r0, 800a94c <__ieee754_sqrt+0x158>
 800a93a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a93e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a942:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a946:	d111      	bne.n	800a96c <__ieee754_sqrt+0x178>
 800a948:	4655      	mov	r5, sl
 800a94a:	3601      	adds	r6, #1
 800a94c:	1072      	asrs	r2, r6, #1
 800a94e:	086b      	lsrs	r3, r5, #1
 800a950:	07f1      	lsls	r1, r6, #31
 800a952:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a956:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a95a:	bf48      	it	mi
 800a95c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a960:	4618      	mov	r0, r3
 800a962:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a966:	e757      	b.n	800a818 <__ieee754_sqrt+0x24>
 800a968:	4696      	mov	lr, r2
 800a96a:	e7be      	b.n	800a8ea <__ieee754_sqrt+0xf6>
 800a96c:	f7f5 fc08 	bl	8000180 <__adddf3>
 800a970:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7f6 f828 	bl	80009d0 <__aeabi_dcmplt>
 800a980:	b120      	cbz	r0, 800a98c <__ieee754_sqrt+0x198>
 800a982:	1ca8      	adds	r0, r5, #2
 800a984:	bf08      	it	eq
 800a986:	3601      	addeq	r6, #1
 800a988:	3502      	adds	r5, #2
 800a98a:	e7df      	b.n	800a94c <__ieee754_sqrt+0x158>
 800a98c:	1c6b      	adds	r3, r5, #1
 800a98e:	f023 0501 	bic.w	r5, r3, #1
 800a992:	e7db      	b.n	800a94c <__ieee754_sqrt+0x158>
 800a994:	7ff00000 	.word	0x7ff00000
 800a998:	20000078 	.word	0x20000078
 800a99c:	20000070 	.word	0x20000070

0800a9a0 <_init>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	bf00      	nop
 800a9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a6:	bc08      	pop	{r3}
 800a9a8:	469e      	mov	lr, r3
 800a9aa:	4770      	bx	lr

0800a9ac <_fini>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	bf00      	nop
 800a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	469e      	mov	lr, r3
 800a9b6:	4770      	bx	lr
